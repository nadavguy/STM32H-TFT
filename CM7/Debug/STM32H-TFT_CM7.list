
STM32H-TFT_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006464  08006464  00007464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006504  08006504  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  08006504  08006504  00007504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800650c  0800650c  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800650c  0800650c  0000750c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006510  08006510  00007510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  24000000  08006514  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  24000080  08006594  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ae0  08006594  00008ae0  2**0
                  ALLOC
 11 .shared_ram   00000004  38000000  38000000  00009000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f0f  00000000  00000000  000080ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea9  00000000  00000000  00019fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  0001ce68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a79  00000000  00000000  0001dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c692  00000000  00000000  0001e6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014520  00000000  00000000  0005ad8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018136c  00000000  00000000  0006f2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001f0617  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040fc  00000000  00000000  001f065c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  001f4758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800644c 	.word	0x0800644c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800644c 	.word	0x0800644c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b49      	ldr	r3, [pc, #292]	@ (80004ac <SystemInit+0x12c>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800038a:	4a48      	ldr	r2, [pc, #288]	@ (80004ac <SystemInit+0x12c>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b45      	ldr	r3, [pc, #276]	@ (80004ac <SystemInit+0x12c>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a44      	ldr	r2, [pc, #272]	@ (80004ac <SystemInit+0x12c>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b43      	ldr	r3, [pc, #268]	@ (80004b0 <SystemInit+0x130>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b40      	ldr	r3, [pc, #256]	@ (80004b0 <SystemInit+0x130>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a3e      	ldr	r2, [pc, #248]	@ (80004b0 <SystemInit+0x130>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b3d      	ldr	r3, [pc, #244]	@ (80004b4 <SystemInit+0x134>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a3c      	ldr	r2, [pc, #240]	@ (80004b4 <SystemInit+0x134>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b3a      	ldr	r3, [pc, #232]	@ (80004b4 <SystemInit+0x134>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b39      	ldr	r3, [pc, #228]	@ (80004b4 <SystemInit+0x134>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4938      	ldr	r1, [pc, #224]	@ (80004b4 <SystemInit+0x134>)
 80003d4:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <SystemInit+0x138>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b35      	ldr	r3, [pc, #212]	@ (80004b0 <SystemInit+0x130>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b32      	ldr	r3, [pc, #200]	@ (80004b0 <SystemInit+0x130>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a30      	ldr	r2, [pc, #192]	@ (80004b0 <SystemInit+0x130>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b2f      	ldr	r3, [pc, #188]	@ (80004b4 <SystemInit+0x134>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b2d      	ldr	r3, [pc, #180]	@ (80004b4 <SystemInit+0x134>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b2c      	ldr	r3, [pc, #176]	@ (80004b4 <SystemInit+0x134>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b2a      	ldr	r3, [pc, #168]	@ (80004b4 <SystemInit+0x134>)
 800040a:	4a2c      	ldr	r2, [pc, #176]	@ (80004bc <SystemInit+0x13c>)
 800040c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b29      	ldr	r3, [pc, #164]	@ (80004b4 <SystemInit+0x134>)
 8000410:	4a2b      	ldr	r2, [pc, #172]	@ (80004c0 <SystemInit+0x140>)
 8000412:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b27      	ldr	r3, [pc, #156]	@ (80004b4 <SystemInit+0x134>)
 8000416:	4a2b      	ldr	r2, [pc, #172]	@ (80004c4 <SystemInit+0x144>)
 8000418:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b26      	ldr	r3, [pc, #152]	@ (80004b4 <SystemInit+0x134>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b24      	ldr	r3, [pc, #144]	@ (80004b4 <SystemInit+0x134>)
 8000422:	4a28      	ldr	r2, [pc, #160]	@ (80004c4 <SystemInit+0x144>)
 8000424:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <SystemInit+0x134>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b21      	ldr	r3, [pc, #132]	@ (80004b4 <SystemInit+0x134>)
 800042e:	4a25      	ldr	r2, [pc, #148]	@ (80004c4 <SystemInit+0x144>)
 8000430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <SystemInit+0x134>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b1e      	ldr	r3, [pc, #120]	@ (80004b4 <SystemInit+0x134>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a1d      	ldr	r2, [pc, #116]	@ (80004b4 <SystemInit+0x134>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <SystemInit+0x134>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b1f      	ldr	r3, [pc, #124]	@ (80004c8 <SystemInit+0x148>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800044e:	4a1e      	ldr	r2, [pc, #120]	@ (80004c8 <SystemInit+0x148>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000454:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <SystemInit+0x14c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b1d      	ldr	r3, [pc, #116]	@ (80004d0 <SystemInit+0x150>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <SystemInit+0x154>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800046a:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <SystemInit+0x134>)
 800046c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000474:	2b00      	cmp	r3, #0
 8000476:	d113      	bne.n	80004a0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000478:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <SystemInit+0x134>)
 800047a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800047e:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <SystemInit+0x134>)
 8000480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000484:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <SystemInit+0x158>)
 800048a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800048e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000490:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <SystemInit+0x134>)
 8000492:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000496:	4a07      	ldr	r2, [pc, #28]	@ (80004b4 <SystemInit+0x134>)
 8000498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800049c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	52002000 	.word	0x52002000
 80004b4:	58024400 	.word	0x58024400
 80004b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004bc:	02020200 	.word	0x02020200
 80004c0:	01ff0000 	.word	0x01ff0000
 80004c4:	01010280 	.word	0x01010280
 80004c8:	580000c0 	.word	0x580000c0
 80004cc:	5c001000 	.word	0x5c001000
 80004d0:	ffff0000 	.word	0xffff0000
 80004d4:	51008108 	.word	0x51008108
 80004d8:	52004000 	.word	0x52004000

080004dc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	4a08      	ldr	r2, [pc, #32]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004e6:	f023 0302 	bic.w	r3, r3, #2
 80004ea:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80004ec:	bf00      	nop
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	58024800 	.word	0x58024800

0800050c <W25N01_Init>:

    return HAL_QSPI_Command(hqspi, &qspi_cmd, HAL_MAX_DELAY);
}

HAL_StatusTypeDef W25N01_Init(QSPI_HandleTypeDef *hqspi)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    g_qspi = hqspi;
 8000514:	4a08      	ldr	r2, [pc, #32]	@ (8000538 <W25N01_Init+0x2c>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6013      	str	r3, [r2, #0]

    // Verify the device by reading its ID
    uint32_t id = W25N01_ReadID(hqspi);
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 f810 	bl	8000540 <W25N01_ReadID>
 8000520:	60f8      	str	r0, [r7, #12]
    if (id != 0xEFAA21)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	4a05      	ldr	r2, [pc, #20]	@ (800053c <W25N01_Init+0x30>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d001      	beq.n	800052e <W25N01_Init+0x22>
    {  // Replace with the actual ID from the datasheet
        return HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	e000      	b.n	8000530 <W25N01_Init+0x24>
    }
    return HAL_OK;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	2400009c 	.word	0x2400009c
 800053c:	00efaa21 	.word	0x00efaa21

08000540 <W25N01_ReadID>:

uint32_t W25N01_ReadID(QSPI_HandleTypeDef *hqspi) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b092      	sub	sp, #72	@ 0x48
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    uint8_t id[3] = {0};
 8000548:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <W25N01_ReadID+0x78>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8000550:	2300      	movs	r3, #0
 8000552:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

    QSPI_CommandTypeDef qspi_cmd = {
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	2238      	movs	r2, #56	@ 0x38
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f004 ff64 	bl	800542c <memset>
 8000564:	239f      	movs	r3, #159	@ 0x9f
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	2308      	movs	r3, #8
 800056a:	623b      	str	r3, [r7, #32]
 800056c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
 8000572:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000576:	633b      	str	r3, [r7, #48]	@ 0x30
 8000578:	2303      	movs	r3, #3
 800057a:	637b      	str	r3, [r7, #52]	@ 0x34
        .DummyCycles       = 8,
        .NbData            = 3,
        .SIOOMode          = QSPI_SIOO_INST_EVERY_CMD,
    };

    HAL_QSPI_Command(hqspi, &qspi_cmd, HAL_MAX_DELAY);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000584:	4619      	mov	r1, r3
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f001 fca0 	bl	8001ecc <HAL_QSPI_Command>
    HAL_QSPI_Receive(hqspi, id, HAL_MAX_DELAY);
 800058c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000590:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000594:	4619      	mov	r1, r3
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f001 fd88 	bl	80020ac <HAL_QSPI_Receive>


    return (id[0] << 16) | (id[1] << 8) | id[2];
 800059c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80005a0:	041a      	lsls	r2, r3, #16
 80005a2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80005a6:	021b      	lsls	r3, r3, #8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80005ae:	4313      	orrs	r3, r2
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3748      	adds	r7, #72	@ 0x48
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	08006464 	.word	0x08006464

080005bc <W25N01_ReadPage>:

HAL_StatusTypeDef W25N01_ReadPage(QSPI_HandleTypeDef *hqspi, uint32_t page, uint8_t *buffer, uint32_t length)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0a0      	sub	sp, #128	@ 0x80
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
 80005c8:	603b      	str	r3, [r7, #0]
    if (length > W25N01_PAGE_SIZE)
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80005d0:	d901      	bls.n	80005d6 <W25N01_ReadPage+0x1a>
    	return HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e05a      	b.n	800068c <W25N01_ReadPage+0xd0>
    // Issue the page read command
//    if (W25N01_SendCommand(hqspi, W25N01_CMD_READ_PAGE, page, 0) != HAL_OK)
//    {
//        return HAL_ERROR;
//    }
    QSPI_CommandTypeDef qspi_cmd = {0};
 80005d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005da:	2238      	movs	r2, #56	@ 0x38
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 ff24 	bl	800542c <memset>
//    uint32_t rowAddress = calculateRowAddress(addr);
    qspi_cmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80005e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005e8:	663b      	str	r3, [r7, #96]	@ 0x60
    qspi_cmd.AddressMode       = QSPI_ADDRESS_1_LINE;
 80005ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ee:	667b      	str	r3, [r7, #100]	@ 0x64
    qspi_cmd.AddressSize       = QSPI_ADDRESS_24_BITS;
 80005f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f4:	657b      	str	r3, [r7, #84]	@ 0x54
    qspi_cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    qspi_cmd.DataMode          = QSPI_DATA_NONE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    qspi_cmd.DummyCycles       = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	65fb      	str	r3, [r7, #92]	@ 0x5c
    qspi_cmd.Instruction       = W25N01_CMD_READ_PAGE;
 8000602:	2313      	movs	r3, #19
 8000604:	64bb      	str	r3, [r7, #72]	@ 0x48
    qspi_cmd.Address           = page;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	64fb      	str	r3, [r7, #76]	@ 0x4c
    qspi_cmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800060a:	2300      	movs	r3, #0
 800060c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    if( HAL_QSPI_Command(hqspi, &qspi_cmd, HAL_MAX_DELAY) != HAL_OK)
 800060e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000612:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000616:	4619      	mov	r1, r3
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f001 fc57 	bl	8001ecc <HAL_QSPI_Command>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <W25N01_ReadPage+0x6c>
    {
    	return HAL_ERROR;
 8000624:	2301      	movs	r3, #1
 8000626:	e031      	b.n	800068c <W25N01_ReadPage+0xd0>
    }

    // Read the page data
    QSPI_CommandTypeDef qspi_cmd2 =
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2238      	movs	r2, #56	@ 0x38
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f004 fefb 	bl	800542c <memset>
 8000636:	2303      	movs	r3, #3
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	2308      	movs	r3, #8
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24
 8000644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800064a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000650:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000654:	637b      	str	r3, [r7, #52]	@ 0x34
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	63bb      	str	r3, [r7, #56]	@ 0x38
        .DummyCycles       = 8,
        .NbData            = length,
        .SIOOMode          = QSPI_SIOO_INST_EVERY_CMD,
    };

    if (HAL_QSPI_Command(hqspi, &qspi_cmd2, HAL_MAX_DELAY) != HAL_OK)
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000662:	4619      	mov	r1, r3
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f001 fc31 	bl	8001ecc <HAL_QSPI_Command>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <W25N01_ReadPage+0xb8>
    {
        return HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	e00b      	b.n	800068c <W25N01_ReadPage+0xd0>
    }

    if (HAL_QSPI_Receive(hqspi, buffer, HAL_MAX_DELAY) != HAL_OK)
 8000674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	68f8      	ldr	r0, [r7, #12]
 800067c:	f001 fd16 	bl	80020ac <HAL_QSPI_Receive>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <W25N01_ReadPage+0xce>
    {
        return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <W25N01_ReadPage+0xd0>
    }

    return HAL_OK;
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	3780      	adds	r7, #128	@ 0x80
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <W25N01_WritePage>:

HAL_StatusTypeDef W25N01_WritePage(QSPI_HandleTypeDef *hqspi, uint32_t page, const uint8_t *buffer, uint32_t length)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b0ae      	sub	sp, #184	@ 0xb8
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	603b      	str	r3, [r7, #0]
    if (length > W25N01_PAGE_SIZE)
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006a8:	d901      	bls.n	80006ae <W25N01_WritePage+0x1a>
    	return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e082      	b.n	80007b4 <W25N01_WritePage+0x120>
    // Enable write operations
//    if (W25N01_SendCommand(hqspi, W25N01_CMD_WRITE_ENABLE, 0, 0) != HAL_OK)
//    {
//        return HAL_ERROR;
//    }
    QSPI_CommandTypeDef qspi_cmd = {0};
 80006ae:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006b2:	2238      	movs	r2, #56	@ 0x38
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 feb8 	bl	800542c <memset>
//    uint32_t rowAddress = calculateRowAddress(addr);
    qspi_cmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80006bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    qspi_cmd.AddressMode       = QSPI_ADDRESS_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    qspi_cmd.AddressSize       = QSPI_ADDRESS_24_BITS;
 80006ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    qspi_cmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    qspi_cmd.DataMode          = QSPI_DATA_NONE;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    qspi_cmd.DummyCycles       = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    qspi_cmd.Instruction       = W25N01_CMD_WRITE_ENABLE;
 80006e4:	2306      	movs	r3, #6
 80006e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    qspi_cmd.Address           = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    qspi_cmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    if (HAL_QSPI_Command(hqspi, &qspi_cmd, HAL_MAX_DELAY) != HAL_OK)
 80006f6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006fe:	4619      	mov	r1, r3
 8000700:	68f8      	ldr	r0, [r7, #12]
 8000702:	f001 fbe3 	bl	8001ecc <HAL_QSPI_Command>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <W25N01_WritePage+0x7c>
    {
    	return HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	e051      	b.n	80007b4 <W25N01_WritePage+0x120>
    }

    // Load data into the NAND page buffer
    QSPI_CommandTypeDef qspi_cmd2 =
 8000710:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000714:	2238      	movs	r2, #56	@ 0x38
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fe87 	bl	800542c <memset>
 800071e:	2302      	movs	r3, #2
 8000720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	657b      	str	r3, [r7, #84]	@ 0x54
 8000728:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072c:	663b      	str	r3, [r7, #96]	@ 0x60
 800072e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000732:	667b      	str	r3, [r7, #100]	@ 0x64
 8000734:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000738:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	673b      	str	r3, [r7, #112]	@ 0x70
        .DummyCycles       = 0,
        .NbData            = length,
        .SIOOMode          = QSPI_SIOO_INST_EVERY_CMD,
    };

    if (HAL_QSPI_Command(hqspi, &qspi_cmd2, HAL_MAX_DELAY) != HAL_OK)
 800073e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000742:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000746:	4619      	mov	r1, r3
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f001 fbbf 	bl	8001ecc <HAL_QSPI_Command>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <W25N01_WritePage+0xc4>
    {
        return HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	e02d      	b.n	80007b4 <W25N01_WritePage+0x120>
    }

    if (HAL_QSPI_Transmit(hqspi, (uint8_t *)buffer, HAL_MAX_DELAY) != HAL_OK)
 8000758:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f001 fc12 	bl	8001f88 <HAL_QSPI_Transmit>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <W25N01_WritePage+0xda>
    {
        return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e022      	b.n	80007b4 <W25N01_WritePage+0x120>
    // Execute the program command
//    if (W25N01_SendCommand(hqspi, W25N01_CMD_PROGRAM_EXECUTE, page, 8) != HAL_OK)
//    {
//        return HAL_ERROR;
//    }
    QSPI_CommandTypeDef qspi_cmd3 =
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	2238      	movs	r2, #56	@ 0x38
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fe58 	bl	800542c <memset>
 800077c:	2310      	movs	r3, #16
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000784:	61fb      	str	r3, [r7, #28]
 8000786:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800078c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000790:	62fb      	str	r3, [r7, #44]	@ 0x2c
			.DummyCycles       = 0,
			.NbData            = 0,
			.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD,
    };

    if (HAL_QSPI_Command(hqspi, &qspi_cmd3, HAL_MAX_DELAY) != HAL_OK)
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800079a:	4619      	mov	r1, r3
 800079c:	68f8      	ldr	r0, [r7, #12]
 800079e:	f001 fb95 	bl	8001ecc <HAL_QSPI_Command>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <W25N01_WritePage+0x118>
    {
    	return HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e003      	b.n	80007b4 <W25N01_WritePage+0x120>
    }

    HAL_Delay(5);  // Wait for programming to complete
 80007ac:	2005      	movs	r0, #5
 80007ae:	f000 fd47 	bl	8001240 <HAL_Delay>

    return HAL_OK;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	37b8      	adds	r7, #184	@ 0xb8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <fileSystemInit>:
    uint32_t pageNumber  = page % 64; // Calculate the page within the block
    return (blockNumber << 6) | pageNumber; // Combine block and page addresses
}

void fileSystemInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0

//	for (int i = 0 ; i < 1024 ; i++)
//	{
//		W25N01_EraseBlock(&hqspi, i);
//	}
	if (W25N01_ReadPage(&hqspi, 63, buffer, sizeof(buffer)) != HAL_OK)
 80007c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000884 <fileSystemInit+0xc8>)
 80007c8:	213f      	movs	r1, #63	@ 0x3f
 80007ca:	482f      	ldr	r0, [pc, #188]	@ (8000888 <fileSystemInit+0xcc>)
 80007cc:	f7ff fef6 	bl	80005bc <W25N01_ReadPage>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d003      	beq.n	80007de <fileSystemInit+0x22>
	{
		printf("Page read failed!\r\n");
 80007d6:	482d      	ldr	r0, [pc, #180]	@ (800088c <fileSystemInit+0xd0>)
 80007d8:	f004 fe20 	bl	800541c <puts>
 80007dc:	e005      	b.n	80007ea <fileSystemInit+0x2e>
	}
	else
	{
		printf("Page read success, data: 0x%02X\r\n", buffer[0]);
 80007de:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <fileSystemInit+0xc8>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4619      	mov	r1, r3
 80007e4:	482a      	ldr	r0, [pc, #168]	@ (8000890 <fileSystemInit+0xd4>)
 80007e6:	f004 fdb1 	bl	800534c <iprintf>
	}
	sprintf(buffer,"\xEB\xFE\x90" "MSDOS5.0");
 80007ea:	492a      	ldr	r1, [pc, #168]	@ (8000894 <fileSystemInit+0xd8>)
 80007ec:	4825      	ldr	r0, [pc, #148]	@ (8000884 <fileSystemInit+0xc8>)
 80007ee:	f004 fccb 	bl	8005188 <siprintf>
	if (W25N01_WritePage(&hqspi, 63, buffer, sizeof(buffer)) != HAL_OK)
 80007f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007f6:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <fileSystemInit+0xc8>)
 80007f8:	213f      	movs	r1, #63	@ 0x3f
 80007fa:	4823      	ldr	r0, [pc, #140]	@ (8000888 <fileSystemInit+0xcc>)
 80007fc:	f7ff ff4a 	bl	8000694 <W25N01_WritePage>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <fileSystemInit+0x50>
	{
	    printf("Page write failed!\r\n");
 8000806:	4824      	ldr	r0, [pc, #144]	@ (8000898 <fileSystemInit+0xdc>)
 8000808:	f004 fe08 	bl	800541c <puts>
	}

	if (W25N01_ReadPage(&hqspi, 63, buffer, sizeof(buffer)) != HAL_OK)
 800080c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000810:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <fileSystemInit+0xc8>)
 8000812:	213f      	movs	r1, #63	@ 0x3f
 8000814:	481c      	ldr	r0, [pc, #112]	@ (8000888 <fileSystemInit+0xcc>)
 8000816:	f7ff fed1 	bl	80005bc <W25N01_ReadPage>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d003      	beq.n	8000828 <fileSystemInit+0x6c>
	{
		printf("Page read failed!\r\n");
 8000820:	481a      	ldr	r0, [pc, #104]	@ (800088c <fileSystemInit+0xd0>)
 8000822:	f004 fdfb 	bl	800541c <puts>
 8000826:	e005      	b.n	8000834 <fileSystemInit+0x78>
	}
	else
	{
		printf("Page read success, data: 0x%02X\r\n", buffer[0]);
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <fileSystemInit+0xc8>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	4818      	ldr	r0, [pc, #96]	@ (8000890 <fileSystemInit+0xd4>)
 8000830:	f004 fd8c 	bl	800534c <iprintf>
//	    printf("Page read failed!\r\n");
//	} else {
//	    printf("Page read success, data: 0x%02X\r\n", buffer[0]);
//	}

	for (int i = 1 ; i < 65536 ; i++)
 8000834:	2301      	movs	r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	e01c      	b.n	8000874 <fileSystemInit+0xb8>
//		sprintf(buffer,"\xEB\xFE\x90" "MSDOS5.0");
//		buffer[2047] = i%255;
//		if (W25N01_WritePage(&hqspi, i, buffer, sizeof(buffer)) != HAL_OK) {
//			printf("Page write failed!\r\n");
//		}
		memset(buffer, 0xFF, sizeof(buffer));
 800083a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800083e:	21ff      	movs	r1, #255	@ 0xff
 8000840:	4810      	ldr	r0, [pc, #64]	@ (8000884 <fileSystemInit+0xc8>)
 8000842:	f004 fdf3 	bl	800542c <memset>
		// Test read
		if (W25N01_ReadPage(&hqspi, i, buffer, W25N01_PAGE_SIZE) != HAL_OK)
 8000846:	68f9      	ldr	r1, [r7, #12]
 8000848:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800084c:	4a0d      	ldr	r2, [pc, #52]	@ (8000884 <fileSystemInit+0xc8>)
 800084e:	480e      	ldr	r0, [pc, #56]	@ (8000888 <fileSystemInit+0xcc>)
 8000850:	f7ff feb4 	bl	80005bc <W25N01_ReadPage>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <fileSystemInit+0xa6>
		{
			printf("Page read failed!\r\n");
 800085a:	480c      	ldr	r0, [pc, #48]	@ (800088c <fileSystemInit+0xd0>)
 800085c:	f004 fdde 	bl	800541c <puts>
 8000860:	e005      	b.n	800086e <fileSystemInit+0xb2>
		}
		else
		{
			printf("Page read success, data: 0x%02X\r\n", buffer[0]);
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <fileSystemInit+0xc8>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4619      	mov	r1, r3
 8000868:	4809      	ldr	r0, [pc, #36]	@ (8000890 <fileSystemInit+0xd4>)
 800086a:	f004 fd6f 	bl	800534c <iprintf>
	for (int i = 1 ; i < 65536 ; i++)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800087a:	dbde      	blt.n	800083a <fileSystemInit+0x7e>
		}
	}

	while(1)
	{
		HAL_Delay(100);
 800087c:	2064      	movs	r0, #100	@ 0x64
 800087e:	f000 fcdf 	bl	8001240 <HAL_Delay>
 8000882:	e7fb      	b.n	800087c <fileSystemInit+0xc0>
 8000884:	240000a0 	.word	0x240000a0
 8000888:	240008a0 	.word	0x240008a0
 800088c:	0800647c 	.word	0x0800647c
 8000890:	08006490 	.word	0x08006490
 8000894:	080064b4 	.word	0x080064b4
 8000898:	08006468 	.word	0x08006468

0800089c <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a2:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_GPIO_Init+0x8c>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000928 <MX_GPIO_Init+0x8c>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <MX_GPIO_Init+0x8c>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b8:	f003 0310 	and.w	r3, r3, #16
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c0:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_GPIO_Init+0x8c>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c6:	4a18      	ldr	r2, [pc, #96]	@ (8000928 <MX_GPIO_Init+0x8c>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d0:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <MX_GPIO_Init+0x8c>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <MX_GPIO_Init+0x8c>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <MX_GPIO_Init+0x8c>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_GPIO_Init+0x8c>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <MX_GPIO_Init+0x8c>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	4a09      	ldr	r2, [pc, #36]	@ (8000928 <MX_GPIO_Init+0x8c>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_GPIO_Init+0x8c>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	58024400 	.word	0x58024400

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000932:	f000 f8df 	bl	8000af4 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800093a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800093c:	bf00      	nop
 800093e:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <main+0xc4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d004      	beq.n	8000954 <main+0x28>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	1e5a      	subs	r2, r3, #1
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	dcf4      	bgt.n	800093e <main+0x12>
  if ( timeout < 0 )
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	da01      	bge.n	800095e <main+0x32>
  {
  Error_Handler();
 800095a:	f000 f8f7 	bl	8000b4c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f000 fbdd 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f84b 	bl	80009fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000966:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <main+0xc4>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	4a20      	ldr	r2, [pc, #128]	@ (80009f0 <main+0xc4>)
 800096e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <main+0xc4>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000984:	2000      	movs	r0, #0
 8000986:	f000 ffc3 	bl	8001910 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800098a:	2100      	movs	r1, #0
 800098c:	2000      	movs	r0, #0
 800098e:	f000 ffd9 	bl	8001944 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000992:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000996:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000998:	bf00      	nop
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <main+0xc4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d104      	bne.n	80009b0 <main+0x84>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	1e5a      	subs	r2, r3, #1
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	dcf4      	bgt.n	800099a <main+0x6e>
if ( timeout < 0 )
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da01      	bge.n	80009ba <main+0x8e>
{
Error_Handler();
 80009b6:	f000 f8c9 	bl	8000b4c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f7ff ff6f 	bl	800089c <MX_GPIO_Init>
  MX_SPI1_Init();
 80009be:	f000 f9cb 	bl	8000d58 <MX_SPI1_Init>
  MX_QUADSPI_Init();
 80009c2:	f000 f8c9 	bl	8000b58 <MX_QUADSPI_Init>
  MX_FATFS_Init();
 80009c6:	f004 faa5 	bl	8004f14 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


//  BSP_QSPI_Init();
  W25N01_Init(&hqspi);
 80009ca:	480a      	ldr	r0, [pc, #40]	@ (80009f4 <main+0xc8>)
 80009cc:	f7ff fd9e 	bl	800050c <W25N01_Init>
	// HAL_Delay(1000);

	fileSystemInit();
 80009d0:	f7ff fef4 	bl	80007bc <fileSystemInit>
  // Lock HSEM to access shared memory
  HAL_HSEM_FastTake(0);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f000 ff9b 	bl	8001910 <HAL_HSEM_FastTake>

  shared_data = 1234;  // Write data to shared memory
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <main+0xcc>)
 80009dc:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 80009e0:	601a      	str	r2, [r3, #0]

  HAL_HSEM_Release(0, 0); // Release HSEM to notify Cortex-M4
 80009e2:	2100      	movs	r1, #0
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 ffad 	bl	8001944 <HAL_HSEM_Release>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ea:	bf00      	nop
 80009ec:	e7fd      	b.n	80009ea <main+0xbe>
 80009ee:	bf00      	nop
 80009f0:	58024400 	.word	0x58024400
 80009f4:	240008a0 	.word	0x240008a0
 80009f8:	38000000 	.word	0x38000000

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09c      	sub	sp, #112	@ 0x70
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a06:	224c      	movs	r2, #76	@ 0x4c
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f004 fd0e 	bl	800542c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2220      	movs	r2, #32
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 fd08 	bl	800542c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a1c:	2004      	movs	r0, #4
 8000a1e:	f000 ffcd 	bl	80019bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b31      	ldr	r3, [pc, #196]	@ (8000aec <SystemClock_Config+0xf0>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2a:	4a30      	ldr	r2, [pc, #192]	@ (8000aec <SystemClock_Config+0xf0>)
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a32:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <SystemClock_Config+0xf0>)
 8000a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000af0 <SystemClock_Config+0xf4>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a44:	4a2a      	ldr	r2, [pc, #168]	@ (8000af0 <SystemClock_Config+0xf4>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b28      	ldr	r3, [pc, #160]	@ (8000af0 <SystemClock_Config+0xf4>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a58:	bf00      	nop
 8000a5a:	4b25      	ldr	r3, [pc, #148]	@ (8000af0 <SystemClock_Config+0xf4>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a66:	d1f8      	bne.n	8000a5a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a72:	2302      	movs	r3, #2
 8000a74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a76:	2302      	movs	r3, #2
 8000a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a8e:	230c      	movs	r3, #12
 8000a90:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a92:	2302      	movs	r3, #2
 8000a94:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fe00 	bl	80026a4 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000aaa:	f000 f84f 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	233f      	movs	r3, #63	@ 0x3f
 8000ab0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000abe:	2340      	movs	r3, #64	@ 0x40
 8000ac0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac2:	2340      	movs	r3, #64	@ 0x40
 8000ac4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000acc:	2340      	movs	r3, #64	@ 0x40
 8000ace:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 fa3f 	bl	8002f58 <HAL_RCC_ClockConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000ae0:	f000 f834 	bl	8000b4c <Error_Handler>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3770      	adds	r7, #112	@ 0x70
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	58000400 	.word	0x58000400
 8000af0:	58024800 	.word	0x58024800

08000af4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000afa:	463b      	mov	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b06:	f000 fcdb 	bl	80014c0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b16:	231f      	movs	r3, #31
 8000b18:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b1a:	2387      	movs	r3, #135	@ 0x87
 8000b1c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b22:	2300      	movs	r3, #0
 8000b24:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b26:	2301      	movs	r3, #1
 8000b28:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b36:	463b      	mov	r3, r7
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fcf9 	bl	8001530 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b3e:	2004      	movs	r0, #4
 8000b40:	f000 fcd6 	bl	80014f0 <HAL_MPU_Enable>

}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_QUADSPI_Init+0x50>)
 8000b5e:	4a13      	ldr	r2, [pc, #76]	@ (8000bac <MX_QUADSPI_Init+0x54>)
 8000b60:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 74;
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_QUADSPI_Init+0x50>)
 8000b64:	224a      	movs	r2, #74	@ 0x4a
 8000b66:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_QUADSPI_Init+0x50>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_QUADSPI_Init+0x50>)
 8000b70:	2210      	movs	r2, #16
 8000b72:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 27;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_QUADSPI_Init+0x50>)
 8000b76:	221b      	movs	r2, #27
 8000b78:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_QUADSPI_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_QUADSPI_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_QUADSPI_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_QUADSPI_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_QUADSPI_Init+0x50>)
 8000b94:	f000 ff6c 	bl	8001a70 <HAL_QSPI_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b9e:	f7ff ffd5 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	240008a0 	.word	0x240008a0
 8000bac:	52005000 	.word	0x52005000

08000bb0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0bc      	sub	sp, #240	@ 0xf0
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	22c0      	movs	r2, #192	@ 0xc0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f004 fc2b 	bl	800542c <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a5a      	ldr	r2, [pc, #360]	@ (8000d44 <HAL_QSPI_MspInit+0x194>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	f040 80ac 	bne.w	8000d3a <HAL_QSPI_MspInit+0x18a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000be2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000be6:	f04f 0300 	mov.w	r3, #0
 8000bea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf2:	f107 0318 	add.w	r3, r7, #24
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 fcde 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000c02:	f7ff ffa3 	bl	8000b4c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000c06:	4b50      	ldr	r3, [pc, #320]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c0c:	4a4e      	ldr	r2, [pc, #312]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c12:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000c16:	4b4c      	ldr	r3, [pc, #304]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c24:	4b48      	ldr	r3, [pc, #288]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2a:	4a47      	ldr	r2, [pc, #284]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c2c:	f043 0310 	orr.w	r3, r3, #16
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c34:	4b44      	ldr	r3, [pc, #272]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c42:	4b41      	ldr	r3, [pc, #260]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c48:	4a3f      	ldr	r2, [pc, #252]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c4a:	f043 0320 	orr.w	r3, r3, #32
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c52:	4b3d      	ldr	r3, [pc, #244]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c60:	4b39      	ldr	r3, [pc, #228]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c66:	4a38      	ldr	r2, [pc, #224]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c70:	4b35      	ldr	r3, [pc, #212]	@ (8000d48 <HAL_QSPI_MspInit+0x198>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c96:	2309      	movs	r3, #9
 8000c98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	482a      	ldr	r0, [pc, #168]	@ (8000d4c <HAL_QSPI_MspInit+0x19c>)
 8000ca4:	f000 fc84 	bl	80015b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8000ca8:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8000cac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cc2:	2309      	movs	r3, #9
 8000cc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4820      	ldr	r0, [pc, #128]	@ (8000d50 <HAL_QSPI_MspInit+0x1a0>)
 8000cd0:	f000 fc6e 	bl	80015b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cd4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000cee:	230a      	movs	r3, #10
 8000cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cf4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4815      	ldr	r0, [pc, #84]	@ (8000d50 <HAL_QSPI_MspInit+0x1a0>)
 8000cfc:	f000 fc58 	bl	80015b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d00:	2340      	movs	r3, #64	@ 0x40
 8000d02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d18:	230a      	movs	r3, #10
 8000d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d22:	4619      	mov	r1, r3
 8000d24:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <HAL_QSPI_MspInit+0x1a4>)
 8000d26:	f000 fc43 	bl	80015b0 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	205c      	movs	r0, #92	@ 0x5c
 8000d30:	f000 fb91 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8000d34:	205c      	movs	r0, #92	@ 0x5c
 8000d36:	f000 fba8 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	37f0      	adds	r7, #240	@ 0xf0
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	52005000 	.word	0x52005000
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	58021000 	.word	0x58021000
 8000d50:	58021400 	.word	0x58021400
 8000d54:	58021800 	.word	0x58021800

08000d58 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d5c:	4b27      	ldr	r3, [pc, #156]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000d5e:	4a28      	ldr	r2, [pc, #160]	@ (8000e00 <MX_SPI1_Init+0xa8>)
 8000d60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d62:	4b26      	ldr	r3, [pc, #152]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000d64:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6a:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d70:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000d72:	2207      	movs	r2, #7
 8000d74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000d84:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000d8c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000da4:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000daa:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000dac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000db0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000db8:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	@ (8000dfc <MX_SPI1_Init+0xa4>)
 8000dea:	f003 ff53 	bl	8004c94 <HAL_SPI_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000df4:	f7ff feaa 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	240008ec 	.word	0x240008ec
 8000e00:	40013000 	.word	0x40013000

08000e04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0ba      	sub	sp, #232	@ 0xe8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	22c0      	movs	r2, #192	@ 0xc0
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f004 fb01 	bl	800542c <memset>
  if(spiHandle->Instance==SPI1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a26      	ldr	r2, [pc, #152]	@ (8000ec8 <HAL_SPI_MspInit+0xc4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d144      	bne.n	8000ebe <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 fbb5 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000e54:	f7ff fe7a 	bl	8000b4c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <HAL_SPI_MspInit+0xc8>)
 8000e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <HAL_SPI_MspInit+0xc8>)
 8000e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e68:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_SPI_MspInit+0xc8>)
 8000e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_SPI_MspInit+0xc8>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7c:	4a13      	ldr	r2, [pc, #76]	@ (8000ecc <HAL_SPI_MspInit+0xc8>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_SPI_MspInit+0xc8>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e94:	23e0      	movs	r3, #224	@ 0xe0
 8000e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eac:	2305      	movs	r3, #5
 8000eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <HAL_SPI_MspInit+0xcc>)
 8000eba:	f000 fb79 	bl	80015b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	37e8      	adds	r7, #232	@ 0xe8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40013000 	.word	0x40013000
 8000ecc:	58024400 	.word	0x58024400
 8000ed0:	58020000 	.word	0x58020000

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <HAL_MspInit+0x30>)
 8000edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ee0:	4a08      	ldr	r2, [pc, #32]	@ (8000f04 <HAL_MspInit+0x30>)
 8000ee2:	f043 0302 	orr.w	r3, r3, #2
 8000ee6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_MspInit+0x30>)
 8000eec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	58024400 	.word	0x58024400

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <NMI_Handler+0x4>

08000f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <MemManage_Handler+0x4>

08000f20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5e:	f000 f94f 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <QUADSPI_IRQHandler+0x10>)
 8000f6e:	f000 fdf3 	bl	8001b58 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	240008a0 	.word	0x240008a0

08000f7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e00a      	b.n	8000fa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f8e:	f3af 8000 	nop.w
 8000f92:	4601      	mov	r1, r0
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	b2ca      	uxtb	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbf0      	blt.n	8000f8e <_read+0x12>
  }

  return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	e009      	b.n	8000fdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf1      	blt.n	8000fc8 <_write+0x12>
  }
  return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_close>:

int _close(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001016:	605a      	str	r2, [r3, #4]
  return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_isatty>:

int _isatty(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	@ (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f004 f9d8 	bl	800543c <__errno>
 800108c:	4603      	mov	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	24080000 	.word	0x24080000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	24000974 	.word	0x24000974
 80010c0:	24000ae0 	.word	0x24000ae0

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001100 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010c8:	f7ff fa08 	bl	80004dc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010cc:	f7ff f958 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	@ (8001108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001114 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f6:	f004 f9a7 	bl	8005448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff fc17 	bl	800092c <main>
  bx  lr
 80010fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001100:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001104:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001108:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 800110c:	08006514 	.word	0x08006514
  ldr r2, =_sbss
 8001110:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8001114:	24000ae0 	.word	0x24000ae0

08001118 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC3_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001122:	2003      	movs	r0, #3
 8001124:	f000 f98c 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001128:	f002 f8cc 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 800112c:	4602      	mov	r2, r0
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_Init+0x68>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	4913      	ldr	r1, [pc, #76]	@ (8001188 <HAL_Init+0x6c>)
 800113a:	5ccb      	ldrb	r3, [r1, r3]
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <HAL_Init+0x68>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <HAL_Init+0x6c>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	4a0b      	ldr	r2, [pc, #44]	@ (800118c <HAL_Init+0x70>)
 800115e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001160:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <HAL_Init+0x74>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001166:	2000      	movs	r0, #0
 8001168:	f000 f814 	bl	8001194 <HAL_InitTick>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e002      	b.n	800117c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001176:	f7ff fead 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	58024400 	.word	0x58024400
 8001188:	080064c0 	.word	0x080064c0
 800118c:	24000004 	.word	0x24000004
 8001190:	24000000 	.word	0x24000000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800119c:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HAL_InitTick+0x60>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e021      	b.n	80011ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <HAL_InitTick+0x64>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f971 	bl	80014a6 <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00e      	b.n	80011ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d80a      	bhi.n	80011ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011dc:	f000 f93b 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e0:	4a06      	ldr	r2, [pc, #24]	@ (80011fc <HAL_InitTick+0x68>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2400000c 	.word	0x2400000c
 80011f8:	24000000 	.word	0x24000000
 80011fc:	24000008 	.word	0x24000008

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	2400000c 	.word	0x2400000c
 8001224:	24000978 	.word	0x24000978

08001228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	24000978 	.word	0x24000978

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff ffee 	bl	8001228 <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffde 	bl	8001228 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2400000c 	.word	0x2400000c

08001288 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <HAL_GetREVID+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	0c1b      	lsrs	r3, r3, #16
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	5c001000 	.word	0x5c001000

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x40>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x40>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	05fa0000 	.word	0x05fa0000

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	@ (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	@ (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	@ (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	@ 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	@ 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	@ (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff29 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff40 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff90 	bl	8001394 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5f 	bl	8001340 <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff33 	bl	8001304 <__NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffa4 	bl	80013fc <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014c4:	f3bf 8f5f 	dmb	sy
}
 80014c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <HAL_MPU_Disable+0x28>)
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	4a06      	ldr	r2, [pc, #24]	@ (80014e8 <HAL_MPU_Disable+0x28>)
 80014d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014d4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_MPU_Disable+0x2c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00
 80014ec:	e000ed90 	.word	0xe000ed90

080014f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001528 <HAL_MPU_Enable+0x38>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_MPU_Enable+0x3c>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	4a09      	ldr	r2, [pc, #36]	@ (800152c <HAL_MPU_Enable+0x3c>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800150c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800150e:	f3bf 8f4f 	dsb	sy
}
 8001512:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001514:	f3bf 8f6f 	isb	sy
}
 8001518:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed90 	.word	0xe000ed90
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	785a      	ldrb	r2, [r3, #1]
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <HAL_MPU_ConfigRegion+0x7c>)
 800153e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001540:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <HAL_MPU_ConfigRegion+0x7c>)
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	4a19      	ldr	r2, [pc, #100]	@ (80015ac <HAL_MPU_ConfigRegion+0x7c>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800154c:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_MPU_ConfigRegion+0x7c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7b1b      	ldrb	r3, [r3, #12]
 8001558:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7adb      	ldrb	r3, [r3, #11]
 800155e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001560:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7a9b      	ldrb	r3, [r3, #10]
 8001566:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001568:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7b5b      	ldrb	r3, [r3, #13]
 800156e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001570:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7b9b      	ldrb	r3, [r3, #14]
 8001576:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001578:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7bdb      	ldrb	r3, [r3, #15]
 800157e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001580:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7a5b      	ldrb	r3, [r3, #9]
 8001586:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001588:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7a1b      	ldrb	r3, [r3, #8]
 800158e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001590:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001598:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800159a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800159c:	6113      	str	r3, [r2, #16]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed90 	.word	0xe000ed90

080015b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	@ 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015be:	4b89      	ldr	r3, [pc, #548]	@ (80017e4 <HAL_GPIO_Init+0x234>)
 80015c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015c2:	e194      	b.n	80018ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2101      	movs	r1, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8186 	beq.w	80018e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d005      	beq.n	80015f4 <HAL_GPIO_Init+0x44>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d130      	bne.n	8001656 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800162a:	2201      	movs	r2, #1
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	f003 0201 	and.w	r2, r3, #1
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b03      	cmp	r3, #3
 8001660:	d017      	beq.n	8001692 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d123      	bne.n	80016e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	08da      	lsrs	r2, r3, #3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3208      	adds	r2, #8
 80016e0:	69b9      	ldr	r1, [r7, #24]
 80016e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0203 	and.w	r2, r3, #3
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 80e0 	beq.w	80018e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001728:	4b2f      	ldr	r3, [pc, #188]	@ (80017e8 <HAL_GPIO_Init+0x238>)
 800172a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800172e:	4a2e      	ldr	r2, [pc, #184]	@ (80017e8 <HAL_GPIO_Init+0x238>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001738:	4b2b      	ldr	r3, [pc, #172]	@ (80017e8 <HAL_GPIO_Init+0x238>)
 800173a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001746:	4a29      	ldr	r2, [pc, #164]	@ (80017ec <HAL_GPIO_Init+0x23c>)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	220f      	movs	r2, #15
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a20      	ldr	r2, [pc, #128]	@ (80017f0 <HAL_GPIO_Init+0x240>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d052      	beq.n	8001818 <HAL_GPIO_Init+0x268>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a1f      	ldr	r2, [pc, #124]	@ (80017f4 <HAL_GPIO_Init+0x244>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d031      	beq.n	80017de <HAL_GPIO_Init+0x22e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a1e      	ldr	r2, [pc, #120]	@ (80017f8 <HAL_GPIO_Init+0x248>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d02b      	beq.n	80017da <HAL_GPIO_Init+0x22a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a1d      	ldr	r2, [pc, #116]	@ (80017fc <HAL_GPIO_Init+0x24c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d025      	beq.n	80017d6 <HAL_GPIO_Init+0x226>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a1c      	ldr	r2, [pc, #112]	@ (8001800 <HAL_GPIO_Init+0x250>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01f      	beq.n	80017d2 <HAL_GPIO_Init+0x222>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a1b      	ldr	r2, [pc, #108]	@ (8001804 <HAL_GPIO_Init+0x254>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d019      	beq.n	80017ce <HAL_GPIO_Init+0x21e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a1a      	ldr	r2, [pc, #104]	@ (8001808 <HAL_GPIO_Init+0x258>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x21a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a19      	ldr	r2, [pc, #100]	@ (800180c <HAL_GPIO_Init+0x25c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00d      	beq.n	80017c6 <HAL_GPIO_Init+0x216>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a18      	ldr	r2, [pc, #96]	@ (8001810 <HAL_GPIO_Init+0x260>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x212>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a17      	ldr	r2, [pc, #92]	@ (8001814 <HAL_GPIO_Init+0x264>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_Init+0x20e>
 80017ba:	2309      	movs	r3, #9
 80017bc:	e02d      	b.n	800181a <HAL_GPIO_Init+0x26a>
 80017be:	230a      	movs	r3, #10
 80017c0:	e02b      	b.n	800181a <HAL_GPIO_Init+0x26a>
 80017c2:	2308      	movs	r3, #8
 80017c4:	e029      	b.n	800181a <HAL_GPIO_Init+0x26a>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e027      	b.n	800181a <HAL_GPIO_Init+0x26a>
 80017ca:	2306      	movs	r3, #6
 80017cc:	e025      	b.n	800181a <HAL_GPIO_Init+0x26a>
 80017ce:	2305      	movs	r3, #5
 80017d0:	e023      	b.n	800181a <HAL_GPIO_Init+0x26a>
 80017d2:	2304      	movs	r3, #4
 80017d4:	e021      	b.n	800181a <HAL_GPIO_Init+0x26a>
 80017d6:	2303      	movs	r3, #3
 80017d8:	e01f      	b.n	800181a <HAL_GPIO_Init+0x26a>
 80017da:	2302      	movs	r3, #2
 80017dc:	e01d      	b.n	800181a <HAL_GPIO_Init+0x26a>
 80017de:	2301      	movs	r3, #1
 80017e0:	e01b      	b.n	800181a <HAL_GPIO_Init+0x26a>
 80017e2:	bf00      	nop
 80017e4:	58000080 	.word	0x58000080
 80017e8:	58024400 	.word	0x58024400
 80017ec:	58000400 	.word	0x58000400
 80017f0:	58020000 	.word	0x58020000
 80017f4:	58020400 	.word	0x58020400
 80017f8:	58020800 	.word	0x58020800
 80017fc:	58020c00 	.word	0x58020c00
 8001800:	58021000 	.word	0x58021000
 8001804:	58021400 	.word	0x58021400
 8001808:	58021800 	.word	0x58021800
 800180c:	58021c00 	.word	0x58021c00
 8001810:	58022000 	.word	0x58022000
 8001814:	58022400 	.word	0x58022400
 8001818:	2300      	movs	r3, #0
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	f002 0203 	and.w	r2, r2, #3
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	4093      	lsls	r3, r2
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800182a:	4938      	ldr	r1, [pc, #224]	@ (800190c <HAL_GPIO_Init+0x35c>)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800185e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800188c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	3301      	adds	r3, #1
 80018ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f47f ae63 	bne.w	80015c4 <HAL_GPIO_Init+0x14>
  }
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	3724      	adds	r7, #36	@ 0x24
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	58000400 	.word	0x58000400

08001910 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001918:	4a08      	ldr	r2, [pc, #32]	@ (800193c <HAL_HSEM_FastTake+0x2c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3320      	adds	r3, #32
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	4a07      	ldr	r2, [pc, #28]	@ (8001940 <HAL_HSEM_FastTake+0x30>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	e000      	b.n	800192e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	58026400 	.word	0x58026400
 8001940:	80000300 	.word	0x80000300

08001944 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800194e:	4906      	ldr	r1, [pc, #24]	@ (8001968 <HAL_HSEM_Release+0x24>)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	58026400 	.word	0x58026400

0800196c <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e017      	b.n	80019ae <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d004      	beq.n	8001994 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2280      	movs	r2, #128	@ 0x80
 800198e:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e00c      	b.n	80019ae <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80019c4:	4b29      	ldr	r3, [pc, #164]	@ (8001a6c <HAL_PWREx_ConfigSupply+0xb0>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	2b06      	cmp	r3, #6
 80019ce:	d00a      	beq.n	80019e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019d0:	4b26      	ldr	r3, [pc, #152]	@ (8001a6c <HAL_PWREx_ConfigSupply+0xb0>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d001      	beq.n	80019e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e040      	b.n	8001a64 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e03e      	b.n	8001a64 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019e6:	4b21      	ldr	r3, [pc, #132]	@ (8001a6c <HAL_PWREx_ConfigSupply+0xb0>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80019ee:	491f      	ldr	r1, [pc, #124]	@ (8001a6c <HAL_PWREx_ConfigSupply+0xb0>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019f6:	f7ff fc17 	bl	8001228 <HAL_GetTick>
 80019fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019fc:	e009      	b.n	8001a12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019fe:	f7ff fc13 	bl	8001228 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a0c:	d901      	bls.n	8001a12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e028      	b.n	8001a64 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a12:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a1e:	d1ee      	bne.n	80019fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b1e      	cmp	r3, #30
 8001a24:	d008      	beq.n	8001a38 <HAL_PWREx_ConfigSupply+0x7c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a2a:	d005      	beq.n	8001a38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b1d      	cmp	r3, #29
 8001a30:	d002      	beq.n	8001a38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b2d      	cmp	r3, #45	@ 0x2d
 8001a36:	d114      	bne.n	8001a62 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a38:	f7ff fbf6 	bl	8001228 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a3e:	e009      	b.n	8001a54 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a40:	f7ff fbf2 	bl	8001228 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a4e:	d901      	bls.n	8001a54 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e007      	b.n	8001a64 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a60:	d1ee      	bne.n	8001a40 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	58024800 	.word	0x58024800

08001a70 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff fbd6 	bl	8001228 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e05f      	b.n	8001b48 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d107      	bne.n	8001aa4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff f88b 	bl	8000bb0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001a9a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fbf1 	bl	8002286 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	021a      	lsls	r2, r3, #8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2120      	movs	r1, #32
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fc1c 	bl	8002308 <QSPI_WaitFlagStateUntilTimeout>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d135      	bne.n	8001b46 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <HAL_QSPI_Init+0xe0>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6852      	ldr	r2, [r2, #4]
 8001ae8:	0611      	lsls	r1, r2, #24
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68d2      	ldr	r2, [r2, #12]
 8001aee:	4311      	orrs	r1, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	69d2      	ldr	r2, [r2, #28]
 8001af4:	4311      	orrs	r1, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6a12      	ldr	r2, [r2, #32]
 8001afa:	4311      	orrs	r1, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	430b      	orrs	r3, r1
 8001b02:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_QSPI_Init+0xe4>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6912      	ldr	r2, [r2, #16]
 8001b12:	0411      	lsls	r1, r2, #16
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6952      	ldr	r2, [r2, #20]
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6992      	ldr	r2, [r2, #24]
 8001b1e:	4311      	orrs	r1, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8001b46:	7afb      	ldrb	r3, [r7, #11]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	00ffff2f 	.word	0x00ffff2f
 8001b54:	ffe0f8fe 	.word	0xffe0f8fe

08001b58 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d064      	beq.n	8001c44 <HAL_QSPI_IRQHandler+0xec>
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d05f      	beq.n	8001c44 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3320      	adds	r3, #32
 8001b8a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b12      	cmp	r3, #18
 8001b96:	d125      	bne.n	8001be4 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001b98:	e01c      	b.n	8001bd4 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00f      	beq.n	8001bc2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24
          hqspi->TxXferCount--;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bba:	1e5a      	subs	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bc0:	e008      	b.n	8001bd4 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001bd0:	601a      	str	r2, [r3, #0]
          break;
 8001bd2:	e033      	b.n	8001c3c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1db      	bne.n	8001b9a <HAL_QSPI_IRQHandler+0x42>
 8001be2:	e02b      	b.n	8001c3c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b22      	cmp	r3, #34	@ 0x22
 8001bee:	d125      	bne.n	8001c3c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001bf0:	e01d      	b.n	8001c2e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d010      	beq.n	8001c1c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hqspi->RxXferCount--;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c1a:	e008      	b.n	8001c2e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c2a:	601a      	str	r2, [r3, #0]
          break;
 8001c2c:	e006      	b.n	8001c3c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1da      	bne.n	8001bf2 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fb04 	bl	800224a <HAL_QSPI_FifoThresholdCallback>
 8001c42:	e13c      	b.n	8001ebe <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80b0 	beq.w	8001db0 <HAL_QSPI_IRQHandler+0x258>
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 80aa 	beq.w	8001db0 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2202      	movs	r2, #2
 8001c62:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8001c72:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d120      	bne.n	8001cc2 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d011      	beq.n	8001cb2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0204 	bic.w	r2, r2, #4
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0201 	bic.w	r2, r2, #1
 8001cb0:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fabb 	bl	8002236 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001cc0:	e0fa      	b.n	8001eb8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b22      	cmp	r3, #34	@ 0x22
 8001ccc:	d143      	bne.n	8001d56 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d012      	beq.n	8001d02 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	e021      	b.n	8001d46 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3320      	adds	r3, #32
 8001d08:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8001d0a:	e013      	b.n	8001d34 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d017      	beq.n	8001d44 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	7812      	ldrb	r2, [r2, #0]
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	631a      	str	r2, [r3, #48]	@ 0x30
            hqspi->RxXferCount--;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d2e:	1e5a      	subs	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	639a      	str	r2, [r3, #56]	@ 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e4      	bne.n	8001d0c <HAL_QSPI_IRQHandler+0x1b4>
 8001d42:	e000      	b.n	8001d46 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8001d44:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fa67 	bl	8002222 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001d54:	e0b0      	b.n	8001eb8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d107      	bne.n	8001d72 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fa4f 	bl	800220e <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001d70:	e0a2      	b.n	8001eb8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	f040 809c 	bne.w	8001eb8 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8001d8e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d103      	bne.n	8001da8 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fa2a 	bl	80021fa <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001da6:	e087      	b.n	8001eb8 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fa1c 	bl	80021e6 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001dae:	e083      	b.n	8001eb8 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01f      	beq.n	8001dfa <HAL_QSPI_IRQHandler+0x2a2>
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01a      	beq.n	8001dfa <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2208      	movs	r2, #8
 8001dca:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8001de8:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fa33 	bl	800225e <HAL_QSPI_StatusMatchCallback>
 8001df8:	e061      	b.n	8001ebe <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d047      	beq.n	8001e94 <HAL_QSPI_IRQHandler+0x33c>
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d042      	beq.n	8001e94 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2201      	movs	r2, #1
 8001e14:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8001e24:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f043 0202 	orr.w	r2, r3, #2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d021      	beq.n	8001e84 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0204 	bic.w	r2, r2, #4
 8001e4e:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e54:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <HAL_QSPI_IRQHandler+0x370>)
 8001e56:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fd85 	bl	800196c <HAL_MDMA_Abort_IT>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d029      	beq.n	8001ebc <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6c:	f043 0204 	orr.w	r2, r3, #4
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f9b2 	bl	80021e6 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001e82:	e01b      	b.n	8001ebc <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f9aa 	bl	80021e6 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001e92:	e013      	b.n	8001ebc <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00f      	beq.n	8001ebe <HAL_QSPI_IRQHandler+0x366>
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00a      	beq.n	8001ebe <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2210      	movs	r2, #16
 8001eae:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f9de 	bl	8002272 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8001eb6:	e002      	b.n	8001ebe <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001eb8:	bf00      	nop
 8001eba:	e000      	b.n	8001ebe <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001ebc:	bf00      	nop
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	080022a3 	.word	0x080022a3

08001ecc <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff f9a6 	bl	8001228 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_QSPI_Command+0x22>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e048      	b.n	8001f80 <HAL_QSPI_Command+0xb4>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d137      	bne.n	8001f72 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2200      	movs	r2, #0
 8001f18:	2120      	movs	r1, #32
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f9f4 	bl	8002308 <QSPI_WaitFlagStateUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d125      	bne.n	8001f76 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fa21 	bl	8002376 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d115      	bne.n	8001f68 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2201      	movs	r2, #1
 8001f44:	2102      	movs	r1, #2
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f9de 	bl	8002308 <QSPI_WaitFlagStateUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f66:	e006      	b.n	8001f76 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f70:	e001      	b.n	8001f76 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff f946 	bl	8001228 <HAL_GetTick>
 8001f9c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3320      	adds	r3, #32
 8001fa4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_QSPI_Transmit+0x2e>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e076      	b.n	80020a4 <HAL_QSPI_Transmit+0x11c>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d165      	bne.n	8002096 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d056      	beq.n	8002084 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2212      	movs	r2, #18
 8001fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800200a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800200c:	e01b      	b.n	8002046 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	2201      	movs	r2, #1
 8002016:	2104      	movs	r1, #4
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f975 	bl	8002308 <QSPI_WaitFlagStateUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002022:	7ffb      	ldrb	r3, [r7, #31]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d113      	bne.n	8002050 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1df      	bne.n	800200e <HAL_QSPI_Transmit+0x86>
 800204e:	e000      	b.n	8002052 <HAL_QSPI_Transmit+0xca>
          break;
 8002050:	bf00      	nop
      }

      if (status == HAL_OK)
 8002052:	7ffb      	ldrb	r3, [r7, #31]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d110      	bne.n	800207a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2201      	movs	r2, #1
 8002060:	2102      	movs	r1, #2
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f950 	bl	8002308 <QSPI_WaitFlagStateUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800206c:	7ffb      	ldrb	r3, [r7, #31]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2202      	movs	r2, #2
 8002078:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002082:	e00a      	b.n	800209a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002088:	f043 0208 	orr.w	r2, r3, #8
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	77fb      	strb	r3, [r7, #31]
 8002094:	e001      	b.n	800209a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002096:	2302      	movs	r3, #2
 8002098:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 80020a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	@ 0x28
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff f8b4 	bl	8001228 <HAL_GetTick>
 80020c0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3320      	adds	r3, #32
 80020d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_QSPI_Receive+0x36>
 80020de:	2302      	movs	r3, #2
 80020e0:	e07d      	b.n	80021de <HAL_QSPI_Receive+0x132>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d16c      	bne.n	80021d0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d05d      	beq.n	80021be <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2222      	movs	r2, #34	@ 0x22
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800213a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002144:	e01c      	b.n	8002180 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2201      	movs	r2, #1
 800214e:	2106      	movs	r1, #6
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f8d9 	bl	8002308 <QSPI_WaitFlagStateUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800215a:	7ffb      	ldrb	r3, [r7, #31]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d114      	bne.n	800218a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	7812      	ldrb	r2, [r2, #0]
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217a:	1e5a      	subs	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1de      	bne.n	8002146 <HAL_QSPI_Receive+0x9a>
 8002188:	e000      	b.n	800218c <HAL_QSPI_Receive+0xe0>
          break;
 800218a:	bf00      	nop
      }

      if (status == HAL_OK)
 800218c:	7ffb      	ldrb	r3, [r7, #31]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d110      	bne.n	80021b4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2201      	movs	r2, #1
 800219a:	2102      	movs	r1, #2
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f8b3 	bl	8002308 <QSPI_WaitFlagStateUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d103      	bne.n	80021b4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2202      	movs	r2, #2
 80021b2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021bc:	e00a      	b.n	80021d4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	f043 0208 	orr.w	r2, r3, #8
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	77fb      	strb	r3, [r7, #31]
 80021ce:	e001      	b.n	80021d4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80021d0:	2302      	movs	r3, #2
 80021d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 80021dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hqspi->TxXferCount = 0U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d114      	bne.n	80022f2 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2202      	movs	r2, #2
 80022ce:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80022de:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0202 	orr.w	r2, r2, #2
 80022ee:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80022f0:	e006      	b.n	8002300 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7ff ff73 	bl	80021e6 <HAL_QSPI_ErrorCallback>
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002318:	e01a      	b.n	8002350 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002320:	d016      	beq.n	8002350 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002322:	f7fe ff81 	bl	8001228 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2204      	movs	r2, #4
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e00e      	b.n	800236e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf14      	ite	ne
 800235e:	2301      	movne	r3, #1
 8002360:	2300      	moveq	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	429a      	cmp	r2, r3
 800236a:	d1d6      	bne.n	800231a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <QSPI_Config+0x28>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8002390:	d005      	beq.n	800239e <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3a01      	subs	r2, #1
 800239c:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80c1 	beq.w	800252a <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d063      	beq.n	8002478 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	6892      	ldr	r2, [r2, #8]
 80023b8:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d031      	beq.n	8002426 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	431a      	orrs	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d0:	431a      	orrs	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	431a      	orrs	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	049b      	lsls	r3, r3, #18
 80023de:	431a      	orrs	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	431a      	orrs	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	ea42 0103 	orr.w	r1, r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	430a      	orrs	r2, r1
 800240e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8002416:	f000 813f 	beq.w	8002698 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	6852      	ldr	r2, [r2, #4]
 8002422:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 8002424:	e138      	b.n	8002698 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	431a      	orrs	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002434:	431a      	orrs	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	431a      	orrs	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	049b      	lsls	r3, r3, #18
 8002442:	431a      	orrs	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	431a      	orrs	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	431a      	orrs	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	431a      	orrs	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	431a      	orrs	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	ea42 0103 	orr.w	r1, r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	430a      	orrs	r2, r1
 800246c:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2200      	movs	r2, #0
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	e10f      	b.n	8002698 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d02e      	beq.n	80024de <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	431a      	orrs	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248e:	431a      	orrs	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	431a      	orrs	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	049b      	lsls	r3, r3, #18
 800249c:	431a      	orrs	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	ea42 0103 	orr.w	r1, r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80024ce:	f000 80e3 	beq.w	8002698 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	6852      	ldr	r2, [r2, #4]
 80024da:	619a      	str	r2, [r3, #24]
}
 80024dc:	e0dc      	b.n	8002698 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	431a      	orrs	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	431a      	orrs	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	049b      	lsls	r3, r3, #18
 80024fa:	431a      	orrs	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	431a      	orrs	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	431a      	orrs	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	431a      	orrs	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	ea42 0103 	orr.w	r1, r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	430a      	orrs	r2, r1
 800251e:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
}
 8002528:	e0b6      	b.n	8002698 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d05d      	beq.n	80025ee <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	6892      	ldr	r2, [r2, #8]
 800253a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02e      	beq.n	80025a2 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254c:	431a      	orrs	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002552:	431a      	orrs	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	431a      	orrs	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	049b      	lsls	r3, r3, #18
 8002560:	431a      	orrs	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	431a      	orrs	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	431a      	orrs	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	431a      	orrs	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	431a      	orrs	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	ea42 0103 	orr.w	r1, r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	430a      	orrs	r2, r1
 800258a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8002592:	f000 8081 	beq.w	8002698 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	6852      	ldr	r2, [r2, #4]
 800259e:	619a      	str	r2, [r3, #24]
}
 80025a0:	e07a      	b.n	8002698 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	431a      	orrs	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b0:	431a      	orrs	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	431a      	orrs	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	049b      	lsls	r3, r3, #18
 80025be:	431a      	orrs	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	ea42 0103 	orr.w	r1, r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
}
 80025ec:	e054      	b.n	8002698 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d02a      	beq.n	800264c <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	431a      	orrs	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002604:	431a      	orrs	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	431a      	orrs	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	049b      	lsls	r3, r3, #18
 8002612:	431a      	orrs	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	431a      	orrs	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	431a      	orrs	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	431a      	orrs	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	ea42 0103 	orr.w	r1, r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	430a      	orrs	r2, r1
 8002636:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800263e:	d02b      	beq.n	8002698 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	6852      	ldr	r2, [r2, #4]
 8002648:	619a      	str	r2, [r3, #24]
}
 800264a:	e025      	b.n	8002698 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d021      	beq.n	8002698 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	431a      	orrs	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002662:	431a      	orrs	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	431a      	orrs	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	049b      	lsls	r3, r3, #18
 8002670:	431a      	orrs	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	431a      	orrs	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	431a      	orrs	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	ea42 0103 	orr.w	r1, r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	430a      	orrs	r2, r1
 800268e:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	@ 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d102      	bne.n	80026b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f000 bc48 	b.w	8002f48 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8088 	beq.w	80027d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c6:	4b99      	ldr	r3, [pc, #612]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d0:	4b96      	ldr	r3, [pc, #600]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 80026d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d007      	beq.n	80026ec <HAL_RCC_OscConfig+0x48>
 80026dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026de:	2b18      	cmp	r3, #24
 80026e0:	d111      	bne.n	8002706 <HAL_RCC_OscConfig+0x62>
 80026e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d10c      	bne.n	8002706 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b8f      	ldr	r3, [pc, #572]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d06d      	beq.n	80027d4 <HAL_RCC_OscConfig+0x130>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d169      	bne.n	80027d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	f000 bc21 	b.w	8002f48 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x7a>
 8002710:	4b86      	ldr	r3, [pc, #536]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a85      	ldr	r2, [pc, #532]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e02e      	b.n	800277c <HAL_RCC_OscConfig+0xd8>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x9c>
 8002726:	4b81      	ldr	r3, [pc, #516]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a80      	ldr	r2, [pc, #512]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 800272c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b7e      	ldr	r3, [pc, #504]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a7d      	ldr	r2, [pc, #500]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002738:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e01d      	b.n	800277c <HAL_RCC_OscConfig+0xd8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0xc0>
 800274a:	4b78      	ldr	r3, [pc, #480]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a77      	ldr	r2, [pc, #476]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b75      	ldr	r3, [pc, #468]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a74      	ldr	r2, [pc, #464]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0xd8>
 8002764:	4b71      	ldr	r3, [pc, #452]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a70      	ldr	r2, [pc, #448]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 800276a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b6e      	ldr	r3, [pc, #440]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6d      	ldr	r2, [pc, #436]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800277a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fd50 	bl	8001228 <HAL_GetTick>
 8002788:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800278c:	f7fe fd4c 	bl	8001228 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	@ 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e3d4      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800279e:	4b63      	ldr	r3, [pc, #396]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0xe8>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fd3c 	bl	8001228 <HAL_GetTick>
 80027b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe fd38 	bl	8001228 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	@ 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e3c0      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027c6:	4b59      	ldr	r3, [pc, #356]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x110>
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80ca 	beq.w	8002978 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e4:	4b51      	ldr	r3, [pc, #324]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ee:	4b4f      	ldr	r3, [pc, #316]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_RCC_OscConfig+0x166>
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	2b18      	cmp	r3, #24
 80027fe:	d156      	bne.n	80028ae <HAL_RCC_OscConfig+0x20a>
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d151      	bne.n	80028ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800280a:	4b48      	ldr	r3, [pc, #288]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_RCC_OscConfig+0x17e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e392      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002822:	4b42      	ldr	r3, [pc, #264]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0219 	bic.w	r2, r3, #25
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	493f      	ldr	r1, [pc, #252]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fcf8 	bl	8001228 <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283c:	f7fe fcf4 	bl	8001228 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e37c      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800284e:	4b37      	ldr	r3, [pc, #220]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285a:	f7fe fd15 	bl	8001288 <HAL_GetREVID>
 800285e:	4603      	mov	r3, r0
 8002860:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002864:	4293      	cmp	r3, r2
 8002866:	d817      	bhi.n	8002898 <HAL_RCC_OscConfig+0x1f4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b40      	cmp	r3, #64	@ 0x40
 800286e:	d108      	bne.n	8002882 <HAL_RCC_OscConfig+0x1de>
 8002870:	4b2e      	ldr	r3, [pc, #184]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002878:	4a2c      	ldr	r2, [pc, #176]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 800287a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002880:	e07a      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b2a      	ldr	r3, [pc, #168]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	031b      	lsls	r3, r3, #12
 8002890:	4926      	ldr	r1, [pc, #152]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002896:	e06f      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002898:	4b24      	ldr	r3, [pc, #144]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	4921      	ldr	r1, [pc, #132]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ac:	e064      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d047      	beq.n	8002946 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028b6:	4b1d      	ldr	r3, [pc, #116]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 0219 	bic.w	r2, r3, #25
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	491a      	ldr	r1, [pc, #104]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe fcae 	bl	8001228 <HAL_GetTick>
 80028cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d0:	f7fe fcaa 	bl	8001228 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e332      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e2:	4b12      	ldr	r3, [pc, #72]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	f7fe fccb 	bl	8001288 <HAL_GetREVID>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d819      	bhi.n	8002930 <HAL_RCC_OscConfig+0x28c>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b40      	cmp	r3, #64	@ 0x40
 8002902:	d108      	bne.n	8002916 <HAL_RCC_OscConfig+0x272>
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800290c:	4a07      	ldr	r2, [pc, #28]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 800290e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002912:	6053      	str	r3, [r2, #4]
 8002914:	e030      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
 8002916:	4b05      	ldr	r3, [pc, #20]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	031b      	lsls	r3, r3, #12
 8002924:	4901      	ldr	r1, [pc, #4]	@ (800292c <HAL_RCC_OscConfig+0x288>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
 800292a:	e025      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
 800292c:	58024400 	.word	0x58024400
 8002930:	4b9a      	ldr	r3, [pc, #616]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	4997      	ldr	r1, [pc, #604]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
 8002944:	e018      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002946:	4b95      	ldr	r3, [pc, #596]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a94      	ldr	r2, [pc, #592]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe fc69 	bl	8001228 <HAL_GetTick>
 8002956:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295a:	f7fe fc65 	bl	8001228 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e2ed      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800296c:	4b8b      	ldr	r3, [pc, #556]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a9 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002986:	4b85      	ldr	r3, [pc, #532]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800298e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002990:	4b82      	ldr	r3, [pc, #520]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002994:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d007      	beq.n	80029ac <HAL_RCC_OscConfig+0x308>
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b18      	cmp	r3, #24
 80029a0:	d13a      	bne.n	8002a18 <HAL_RCC_OscConfig+0x374>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d135      	bne.n	8002a18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ac:	4b7b      	ldr	r3, [pc, #492]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_OscConfig+0x320>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b80      	cmp	r3, #128	@ 0x80
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e2c1      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029c4:	f7fe fc60 	bl	8001288 <HAL_GetREVID>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d817      	bhi.n	8002a02 <HAL_RCC_OscConfig+0x35e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d108      	bne.n	80029ec <HAL_RCC_OscConfig+0x348>
 80029da:	4b70      	ldr	r3, [pc, #448]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029e2:	4a6e      	ldr	r2, [pc, #440]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 80029e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ea:	e075      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029ec:	4b6b      	ldr	r3, [pc, #428]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	069b      	lsls	r3, r3, #26
 80029fa:	4968      	ldr	r1, [pc, #416]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a00:	e06a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a02:	4b66      	ldr	r3, [pc, #408]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	061b      	lsls	r3, r3, #24
 8002a10:	4962      	ldr	r1, [pc, #392]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a16:	e05f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d042      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a20:	4b5e      	ldr	r3, [pc, #376]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5d      	ldr	r2, [pc, #372]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fbfc 	bl	8001228 <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a34:	f7fe fbf8 	bl	8001228 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e280      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a46:	4b55      	ldr	r3, [pc, #340]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a52:	f7fe fc19 	bl	8001288 <HAL_GetREVID>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d817      	bhi.n	8002a90 <HAL_RCC_OscConfig+0x3ec>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d108      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3d6>
 8002a68:	4b4c      	ldr	r3, [pc, #304]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a70:	4a4a      	ldr	r2, [pc, #296]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a76:	6053      	str	r3, [r2, #4]
 8002a78:	e02e      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
 8002a7a:	4b48      	ldr	r3, [pc, #288]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	069b      	lsls	r3, r3, #26
 8002a88:	4944      	ldr	r1, [pc, #272]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
 8002a8e:	e023      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
 8002a90:	4b42      	ldr	r3, [pc, #264]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	493f      	ldr	r1, [pc, #252]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
 8002aa4:	e018      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a3c      	ldr	r2, [pc, #240]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002aac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fbb9 	bl	8001228 <HAL_GetTick>
 8002ab6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002aba:	f7fe fbb5 	bl	8001228 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e23d      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002acc:	4b33      	ldr	r3, [pc, #204]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d036      	beq.n	8002b52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d019      	beq.n	8002b20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aec:	4b2b      	ldr	r3, [pc, #172]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7fe fb96 	bl	8001228 <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b00:	f7fe fb92 	bl	8001228 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e21a      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b12:	4b22      	ldr	r3, [pc, #136]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x45c>
 8002b1e:	e018      	b.n	8002b52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b20:	4b1e      	ldr	r3, [pc, #120]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b24:	4a1d      	ldr	r2, [pc, #116]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fb7c 	bl	8001228 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe fb78 	bl	8001228 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e200      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b46:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d039      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d01c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b72:	f7fe fb59 	bl	8001228 <HAL_GetTick>
 8002b76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b7a:	f7fe fb55 	bl	8001228 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e1dd      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b8c:	4b03      	ldr	r3, [pc, #12]	@ (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x4d6>
 8002b98:	e01b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x52e>
 8002b9a:	bf00      	nop
 8002b9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ba0:	4b9b      	ldr	r3, [pc, #620]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a9a      	ldr	r2, [pc, #616]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002ba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002baa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bac:	f7fe fb3c 	bl	8001228 <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bb4:	f7fe fb38 	bl	8001228 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e1c0      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bc6:	4b92      	ldr	r3, [pc, #584]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8081 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002be0:	4b8c      	ldr	r3, [pc, #560]	@ (8002e14 <HAL_RCC_OscConfig+0x770>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a8b      	ldr	r2, [pc, #556]	@ (8002e14 <HAL_RCC_OscConfig+0x770>)
 8002be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bec:	f7fe fb1c 	bl	8001228 <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf4:	f7fe fb18 	bl	8001228 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	@ 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1a0      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c06:	4b83      	ldr	r3, [pc, #524]	@ (8002e14 <HAL_RCC_OscConfig+0x770>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d106      	bne.n	8002c28 <HAL_RCC_OscConfig+0x584>
 8002c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c26:	e02d      	b.n	8002c84 <HAL_RCC_OscConfig+0x5e0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10c      	bne.n	8002c4a <HAL_RCC_OscConfig+0x5a6>
 8002c30:	4b77      	ldr	r3, [pc, #476]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c34:	4a76      	ldr	r2, [pc, #472]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c3c:	4b74      	ldr	r3, [pc, #464]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c40:	4a73      	ldr	r2, [pc, #460]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c42:	f023 0304 	bic.w	r3, r3, #4
 8002c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c48:	e01c      	b.n	8002c84 <HAL_RCC_OscConfig+0x5e0>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x5c8>
 8002c52:	4b6f      	ldr	r3, [pc, #444]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	4a6e      	ldr	r2, [pc, #440]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5e:	4b6c      	ldr	r3, [pc, #432]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	4a6b      	ldr	r2, [pc, #428]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x5e0>
 8002c6c:	4b68      	ldr	r3, [pc, #416]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c70:	4a67      	ldr	r2, [pc, #412]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c78:	4b65      	ldr	r3, [pc, #404]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	4a64      	ldr	r2, [pc, #400]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c7e:	f023 0304 	bic.w	r3, r3, #4
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe facc 	bl	8001228 <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe fac8 	bl	8001228 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e14e      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002caa:	4b59      	ldr	r3, [pc, #356]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ee      	beq.n	8002c94 <HAL_RCC_OscConfig+0x5f0>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fab6 	bl	8001228 <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fab2 	bl	8001228 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e138      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 812d 	beq.w	8002f46 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cec:	4b48      	ldr	r3, [pc, #288]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cf4:	2b18      	cmp	r3, #24
 8002cf6:	f000 80bd 	beq.w	8002e74 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	f040 809e 	bne.w	8002e40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d04:	4b42      	ldr	r3, [pc, #264]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a41      	ldr	r2, [pc, #260]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe fa8a 	bl	8001228 <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe fa86 	bl	8001228 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e10e      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d2a:	4b39      	ldr	r3, [pc, #228]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d36:	4b36      	ldr	r3, [pc, #216]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d3a:	4b37      	ldr	r3, [pc, #220]	@ (8002e18 <HAL_RCC_OscConfig+0x774>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	4931      	ldr	r1, [pc, #196]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	3b01      	subs	r3, #1
 8002d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	025b      	lsls	r3, r3, #9
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	061b      	lsls	r3, r3, #24
 8002d7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d80:	4923      	ldr	r1, [pc, #140]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d86:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	4a21      	ldr	r2, [pc, #132]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d92:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d96:	4b21      	ldr	r3, [pc, #132]	@ (8002e1c <HAL_RCC_OscConfig+0x778>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d9e:	00d2      	lsls	r2, r2, #3
 8002da0:	491b      	ldr	r1, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	f023 020c 	bic.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	4917      	ldr	r1, [pc, #92]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002db8:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	f023 0202 	bic.w	r2, r3, #2
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc4:	4912      	ldr	r1, [pc, #72]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dca:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	4a10      	ldr	r2, [pc, #64]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dda:	4a0d      	ldr	r2, [pc, #52]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002de2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002dee:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df2:	4a07      	ldr	r2, [pc, #28]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfa:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a04      	ldr	r2, [pc, #16]	@ (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7fe fa0f 	bl	8001228 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0c:	e011      	b.n	8002e32 <HAL_RCC_OscConfig+0x78e>
 8002e0e:	bf00      	nop
 8002e10:	58024400 	.word	0x58024400
 8002e14:	58024800 	.word	0x58024800
 8002e18:	fffffc0c 	.word	0xfffffc0c
 8002e1c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe fa02 	bl	8001228 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e08a      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e32:	4b47      	ldr	r3, [pc, #284]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x77c>
 8002e3e:	e082      	b.n	8002f46 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b43      	ldr	r3, [pc, #268]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a42      	ldr	r2, [pc, #264]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f9ec 	bl	8001228 <HAL_GetTick>
 8002e50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe f9e8 	bl	8001228 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e070      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e66:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x7b0>
 8002e72:	e068      	b.n	8002f46 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e74:	4b36      	ldr	r3, [pc, #216]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e7a:	4b35      	ldr	r3, [pc, #212]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d031      	beq.n	8002eec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d12a      	bne.n	8002eec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d122      	bne.n	8002eec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d11a      	bne.n	8002eec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	0a5b      	lsrs	r3, r3, #9
 8002eba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d111      	bne.n	8002eec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	0c1b      	lsrs	r3, r3, #16
 8002ecc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d108      	bne.n	8002eec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	0e1b      	lsrs	r3, r3, #24
 8002ede:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e02b      	b.n	8002f48 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ef0:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002efa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d01f      	beq.n	8002f46 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f06:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	4a11      	ldr	r2, [pc, #68]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f12:	f7fe f989 	bl	8001228 <HAL_GetTick>
 8002f16:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f18:	bf00      	nop
 8002f1a:	f7fe f985 	bl	8001228 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d0f9      	beq.n	8002f1a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_RCC_OscConfig+0x8b0>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f32:	00d2      	lsls	r2, r2, #3
 8002f34:	4906      	ldr	r1, [pc, #24]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f3a:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3e:	4a04      	ldr	r2, [pc, #16]	@ (8002f50 <HAL_RCC_OscConfig+0x8ac>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3730      	adds	r7, #48	@ 0x30
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	58024400 	.word	0x58024400
 8002f54:	ffff0007 	.word	0xffff0007

08002f58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e19c      	b.n	80032a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b8a      	ldr	r3, [pc, #552]	@ (8003198 <HAL_RCC_ClockConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d910      	bls.n	8002f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b87      	ldr	r3, [pc, #540]	@ (8003198 <HAL_RCC_ClockConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 020f 	bic.w	r2, r3, #15
 8002f82:	4985      	ldr	r1, [pc, #532]	@ (8003198 <HAL_RCC_ClockConfig+0x240>)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b83      	ldr	r3, [pc, #524]	@ (8003198 <HAL_RCC_ClockConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e184      	b.n	80032a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d010      	beq.n	8002fca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	4b7b      	ldr	r3, [pc, #492]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d908      	bls.n	8002fca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fb8:	4b78      	ldr	r3, [pc, #480]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	4975      	ldr	r1, [pc, #468]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d010      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	4b70      	ldr	r3, [pc, #448]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d908      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	496a      	ldr	r1, [pc, #424]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	d010      	beq.n	8003026 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	4b64      	ldr	r3, [pc, #400]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003010:	429a      	cmp	r2, r3
 8003012:	d908      	bls.n	8003026 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003014:	4b61      	ldr	r3, [pc, #388]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	495e      	ldr	r1, [pc, #376]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8003022:	4313      	orrs	r3, r2
 8003024:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	d010      	beq.n	8003054 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	4b59      	ldr	r3, [pc, #356]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800303e:	429a      	cmp	r2, r3
 8003040:	d908      	bls.n	8003054 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003042:	4b56      	ldr	r3, [pc, #344]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4953      	ldr	r1, [pc, #332]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8003050:	4313      	orrs	r3, r2
 8003052:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d010      	beq.n	8003082 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	4b4d      	ldr	r3, [pc, #308]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	429a      	cmp	r2, r3
 800306e:	d908      	bls.n	8003082 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003070:	4b4a      	ldr	r3, [pc, #296]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f023 020f 	bic.w	r2, r3, #15
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4947      	ldr	r1, [pc, #284]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 800307e:	4313      	orrs	r3, r2
 8003080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d055      	beq.n	800313a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800308e:	4b43      	ldr	r3, [pc, #268]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	4940      	ldr	r1, [pc, #256]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 800309c:	4313      	orrs	r3, r2
 800309e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d107      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a8:	4b3c      	ldr	r3, [pc, #240]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d121      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0f6      	b.n	80032a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d107      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030c0:	4b36      	ldr	r3, [pc, #216]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d115      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0ea      	b.n	80032a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030d8:	4b30      	ldr	r3, [pc, #192]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0de      	b.n	80032a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e8:	4b2c      	ldr	r3, [pc, #176]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0d6      	b.n	80032a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f8:	4b28      	ldr	r3, [pc, #160]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f023 0207 	bic.w	r2, r3, #7
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4925      	ldr	r1, [pc, #148]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8003106:	4313      	orrs	r3, r2
 8003108:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310a:	f7fe f88d 	bl	8001228 <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003110:	e00a      	b.n	8003128 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003112:	f7fe f889 	bl	8001228 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003120:	4293      	cmp	r3, r2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0be      	b.n	80032a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003128:	4b1c      	ldr	r3, [pc, #112]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	429a      	cmp	r2, r3
 8003138:	d1eb      	bne.n	8003112 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	4b14      	ldr	r3, [pc, #80]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	429a      	cmp	r2, r3
 8003154:	d208      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003156:	4b11      	ldr	r3, [pc, #68]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f023 020f 	bic.w	r2, r3, #15
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	490e      	ldr	r1, [pc, #56]	@ (800319c <HAL_RCC_ClockConfig+0x244>)
 8003164:	4313      	orrs	r3, r2
 8003166:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003168:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <HAL_RCC_ClockConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d214      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <HAL_RCC_ClockConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 020f 	bic.w	r2, r3, #15
 800317e:	4906      	ldr	r1, [pc, #24]	@ (8003198 <HAL_RCC_ClockConfig+0x240>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b04      	ldr	r3, [pc, #16]	@ (8003198 <HAL_RCC_ClockConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e086      	b.n	80032a6 <HAL_RCC_ClockConfig+0x34e>
 8003198:	52002000 	.word	0x52002000
 800319c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d010      	beq.n	80031ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	4b3f      	ldr	r3, [pc, #252]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d208      	bcs.n	80031ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031bc:	4b3c      	ldr	r3, [pc, #240]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	4939      	ldr	r1, [pc, #228]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d010      	beq.n	80031fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	4b34      	ldr	r3, [pc, #208]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d208      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ea:	4b31      	ldr	r3, [pc, #196]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	492e      	ldr	r1, [pc, #184]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b00      	cmp	r3, #0
 8003206:	d010      	beq.n	800322a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	4b28      	ldr	r3, [pc, #160]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003214:	429a      	cmp	r2, r3
 8003216:	d208      	bcs.n	800322a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003218:	4b25      	ldr	r3, [pc, #148]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	4922      	ldr	r1, [pc, #136]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 8003226:	4313      	orrs	r3, r2
 8003228:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	4b1d      	ldr	r3, [pc, #116]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003242:	429a      	cmp	r2, r3
 8003244:	d208      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003246:	4b1a      	ldr	r3, [pc, #104]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4917      	ldr	r1, [pc, #92]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 8003254:	4313      	orrs	r3, r2
 8003256:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003258:	f000 f834 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b14      	ldr	r3, [pc, #80]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	4912      	ldr	r1, [pc, #72]	@ (80032b4 <HAL_RCC_ClockConfig+0x35c>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
 8003274:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003276:	4b0e      	ldr	r3, [pc, #56]	@ (80032b0 <HAL_RCC_ClockConfig+0x358>)
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	4a0d      	ldr	r2, [pc, #52]	@ (80032b4 <HAL_RCC_ClockConfig+0x35c>)
 8003280:	5cd3      	ldrb	r3, [r2, r3]
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
 800328c:	4a0a      	ldr	r2, [pc, #40]	@ (80032b8 <HAL_RCC_ClockConfig+0x360>)
 800328e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003290:	4a0a      	ldr	r2, [pc, #40]	@ (80032bc <HAL_RCC_ClockConfig+0x364>)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <HAL_RCC_ClockConfig+0x368>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd ff7a 	bl	8001194 <HAL_InitTick>
 80032a0:	4603      	mov	r3, r0
 80032a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	58024400 	.word	0x58024400
 80032b4:	080064c0 	.word	0x080064c0
 80032b8:	24000004 	.word	0x24000004
 80032bc:	24000000 	.word	0x24000000
 80032c0:	24000008 	.word	0x24000008

080032c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	@ 0x24
 80032c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ca:	4bb3      	ldr	r3, [pc, #716]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032d2:	2b18      	cmp	r3, #24
 80032d4:	f200 8155 	bhi.w	8003582 <HAL_RCC_GetSysClockFreq+0x2be>
 80032d8:	a201      	add	r2, pc, #4	@ (adr r2, 80032e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	08003345 	.word	0x08003345
 80032e4:	08003583 	.word	0x08003583
 80032e8:	08003583 	.word	0x08003583
 80032ec:	08003583 	.word	0x08003583
 80032f0:	08003583 	.word	0x08003583
 80032f4:	08003583 	.word	0x08003583
 80032f8:	08003583 	.word	0x08003583
 80032fc:	08003583 	.word	0x08003583
 8003300:	0800336b 	.word	0x0800336b
 8003304:	08003583 	.word	0x08003583
 8003308:	08003583 	.word	0x08003583
 800330c:	08003583 	.word	0x08003583
 8003310:	08003583 	.word	0x08003583
 8003314:	08003583 	.word	0x08003583
 8003318:	08003583 	.word	0x08003583
 800331c:	08003583 	.word	0x08003583
 8003320:	08003371 	.word	0x08003371
 8003324:	08003583 	.word	0x08003583
 8003328:	08003583 	.word	0x08003583
 800332c:	08003583 	.word	0x08003583
 8003330:	08003583 	.word	0x08003583
 8003334:	08003583 	.word	0x08003583
 8003338:	08003583 	.word	0x08003583
 800333c:	08003583 	.word	0x08003583
 8003340:	08003377 	.word	0x08003377
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003344:	4b94      	ldr	r3, [pc, #592]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d009      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003350:	4b91      	ldr	r3, [pc, #580]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	08db      	lsrs	r3, r3, #3
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	4a90      	ldr	r2, [pc, #576]	@ (800359c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
 8003360:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003362:	e111      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003364:	4b8d      	ldr	r3, [pc, #564]	@ (800359c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003366:	61bb      	str	r3, [r7, #24]
      break;
 8003368:	e10e      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800336a:	4b8d      	ldr	r3, [pc, #564]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800336c:	61bb      	str	r3, [r7, #24]
      break;
 800336e:	e10b      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003370:	4b8c      	ldr	r3, [pc, #560]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003372:	61bb      	str	r3, [r7, #24]
      break;
 8003374:	e108      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003376:	4b88      	ldr	r3, [pc, #544]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003380:	4b85      	ldr	r3, [pc, #532]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800338a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800338c:	4b82      	ldr	r3, [pc, #520]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003396:	4b80      	ldr	r3, [pc, #512]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339a:	08db      	lsrs	r3, r3, #3
 800339c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80e1 	beq.w	800357c <HAL_RCC_GetSysClockFreq+0x2b8>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	f000 8083 	beq.w	80034c8 <HAL_RCC_GetSysClockFreq+0x204>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	f200 80a1 	bhi.w	800350c <HAL_RCC_GetSysClockFreq+0x248>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x114>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d056      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033d6:	e099      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d02d      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	08db      	lsrs	r3, r3, #3
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	4a6b      	ldr	r2, [pc, #428]	@ (800359c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
 80033f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	ee07 3a90 	vmov	s15, r3
 80033fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340e:	4b62      	ldr	r3, [pc, #392]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003422:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80035a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800342a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800343e:	e087      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80035ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800344e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003452:	4b51      	ldr	r3, [pc, #324]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003462:	ed97 6a02 	vldr	s12, [r7, #8]
 8003466:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80035a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800346a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003482:	e065      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80035b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003496:	4b40      	ldr	r3, [pc, #256]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349e:	ee07 3a90 	vmov	s15, r3
 80034a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80035a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034c6:	e043      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80035b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034da:	4b2f      	ldr	r3, [pc, #188]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80035a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800350a:	e021      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003516:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80035b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800351a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351e:	4b1e      	ldr	r3, [pc, #120]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003532:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80035a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800354e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003550:	4b11      	ldr	r3, [pc, #68]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003554:	0a5b      	lsrs	r3, r3, #9
 8003556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800355a:	3301      	adds	r3, #1
 800355c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	ee07 3a90 	vmov	s15, r3
 8003564:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003568:	edd7 6a07 	vldr	s13, [r7, #28]
 800356c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003574:	ee17 3a90 	vmov	r3, s15
 8003578:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800357a:	e005      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	61bb      	str	r3, [r7, #24]
      break;
 8003580:	e002      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003582:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003584:	61bb      	str	r3, [r7, #24]
      break;
 8003586:	bf00      	nop
  }

  return sysclockfreq;
 8003588:	69bb      	ldr	r3, [r7, #24]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3724      	adds	r7, #36	@ 0x24
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	58024400 	.word	0x58024400
 800359c:	03d09000 	.word	0x03d09000
 80035a0:	003d0900 	.word	0x003d0900
 80035a4:	017d7840 	.word	0x017d7840
 80035a8:	46000000 	.word	0x46000000
 80035ac:	4c742400 	.word	0x4c742400
 80035b0:	4a742400 	.word	0x4a742400
 80035b4:	4bbebc20 	.word	0x4bbebc20

080035b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035bc:	b0ca      	sub	sp, #296	@ 0x128
 80035be:	af00      	add	r7, sp, #0
 80035c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80035dc:	2500      	movs	r5, #0
 80035de:	ea54 0305 	orrs.w	r3, r4, r5
 80035e2:	d049      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035ee:	d02f      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035f4:	d828      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035fa:	d01a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003600:	d822      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800360a:	d007      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800360c:	e01c      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360e:	4bb8      	ldr	r3, [pc, #736]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	4ab7      	ldr	r2, [pc, #732]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003618:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800361a:	e01a      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003620:	3308      	adds	r3, #8
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f001 f9d1 	bl	80049cc <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003630:	e00f      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	3328      	adds	r3, #40	@ 0x28
 8003638:	2102      	movs	r1, #2
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fa78 	bl	8004b30 <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003646:	e004      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800365a:	4ba5      	ldr	r3, [pc, #660]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800365c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800365e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003668:	4aa1      	ldr	r2, [pc, #644]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366a:	430b      	orrs	r3, r1
 800366c:	6513      	str	r3, [r2, #80]	@ 0x50
 800366e:	e003      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003684:	f04f 0900 	mov.w	r9, #0
 8003688:	ea58 0309 	orrs.w	r3, r8, r9
 800368c:	d047      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003694:	2b04      	cmp	r3, #4
 8003696:	d82a      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003698:	a201      	add	r2, pc, #4	@ (adr r2, 80036a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036b5 	.word	0x080036b5
 80036a4:	080036c3 	.word	0x080036c3
 80036a8:	080036d9 	.word	0x080036d9
 80036ac:	080036f7 	.word	0x080036f7
 80036b0:	080036f7 	.word	0x080036f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b4:	4b8e      	ldr	r3, [pc, #568]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	4a8d      	ldr	r2, [pc, #564]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036c0:	e01a      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c6:	3308      	adds	r3, #8
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 f97e 	bl	80049cc <RCCEx_PLL2_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036d6:	e00f      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036dc:	3328      	adds	r3, #40	@ 0x28
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 fa25 	bl	8004b30 <RCCEx_PLL3_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ec:	e004      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036f4:	e000      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003700:	4b7b      	ldr	r3, [pc, #492]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003704:	f023 0107 	bic.w	r1, r3, #7
 8003708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	4a78      	ldr	r2, [pc, #480]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003710:	430b      	orrs	r3, r1
 8003712:	6513      	str	r3, [r2, #80]	@ 0x50
 8003714:	e003      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800372a:	f04f 0b00 	mov.w	fp, #0
 800372e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003732:	d04c      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800373e:	d030      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003744:	d829      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003746:	2bc0      	cmp	r3, #192	@ 0xc0
 8003748:	d02d      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800374a:	2bc0      	cmp	r3, #192	@ 0xc0
 800374c:	d825      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800374e:	2b80      	cmp	r3, #128	@ 0x80
 8003750:	d018      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003752:	2b80      	cmp	r3, #128	@ 0x80
 8003754:	d821      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800375a:	2b40      	cmp	r3, #64	@ 0x40
 800375c:	d007      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800375e:	e01c      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003760:	4b63      	ldr	r3, [pc, #396]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	4a62      	ldr	r2, [pc, #392]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800376a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800376c:	e01c      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	3308      	adds	r3, #8
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f001 f928 	bl	80049cc <RCCEx_PLL2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003782:	e011      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003788:	3328      	adds	r3, #40	@ 0x28
 800378a:	2100      	movs	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f001 f9cf 	bl	8004b30 <RCCEx_PLL3_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003798:	e006      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037a0:	e002      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037b0:	4b4f      	ldr	r3, [pc, #316]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	4a4c      	ldr	r2, [pc, #304]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80037c4:	e003      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80037da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80037e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80037e8:	460b      	mov	r3, r1
 80037ea:	4313      	orrs	r3, r2
 80037ec:	d053      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037fa:	d035      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80037fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003800:	d82e      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003802:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003806:	d031      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003808:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800380c:	d828      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800380e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003812:	d01a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003814:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003818:	d822      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800381e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003822:	d007      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003824:	e01c      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003826:	4b32      	ldr	r3, [pc, #200]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382a:	4a31      	ldr	r2, [pc, #196]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800382c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003830:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003832:	e01c      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	3308      	adds	r3, #8
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f001 f8c5 	bl	80049cc <RCCEx_PLL2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003848:	e011      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	3328      	adds	r3, #40	@ 0x28
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f001 f96c 	bl	8004b30 <RCCEx_PLL3_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800385e:	e006      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003866:	e002      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800386c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003876:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003882:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003886:	4a1a      	ldr	r2, [pc, #104]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003888:	430b      	orrs	r3, r1
 800388a:	6593      	str	r3, [r2, #88]	@ 0x58
 800388c:	e003      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80038ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80038b0:	460b      	mov	r3, r1
 80038b2:	4313      	orrs	r3, r2
 80038b4:	d056      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038c2:	d038      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038c8:	d831      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038ce:	d034      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80038d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038d4:	d82b      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038da:	d01d      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038e0:	d825      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038ec:	e01f      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ee:	bf00      	nop
 80038f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f4:	4ba2      	ldr	r3, [pc, #648]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	4aa1      	ldr	r2, [pc, #644]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003900:	e01c      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003906:	3308      	adds	r3, #8
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f001 f85e 	bl	80049cc <RCCEx_PLL2_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003916:	e011      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391c:	3328      	adds	r3, #40	@ 0x28
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f001 f905 	bl	8004b30 <RCCEx_PLL3_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800392c:	e006      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003934:	e002      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800393a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003944:	4b8e      	ldr	r3, [pc, #568]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003948:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003950:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003954:	4a8a      	ldr	r2, [pc, #552]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003956:	430b      	orrs	r3, r1
 8003958:	6593      	str	r3, [r2, #88]	@ 0x58
 800395a:	e003      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003970:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800397a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d03a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	2b30      	cmp	r3, #48	@ 0x30
 800398c:	d01f      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800398e:	2b30      	cmp	r3, #48	@ 0x30
 8003990:	d819      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003992:	2b20      	cmp	r3, #32
 8003994:	d00c      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003996:	2b20      	cmp	r3, #32
 8003998:	d815      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d019      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800399e:	2b10      	cmp	r3, #16
 80039a0:	d111      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a2:	4b77      	ldr	r3, [pc, #476]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a6:	4a76      	ldr	r2, [pc, #472]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039ae:	e011      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	3308      	adds	r3, #8
 80039b6:	2102      	movs	r1, #2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 f807 	bl	80049cc <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039c4:	e006      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039cc:	e002      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039dc:	4b68      	ldr	r3, [pc, #416]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ea:	4a65      	ldr	r2, [pc, #404]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ec:	430b      	orrs	r3, r1
 80039ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039f0:	e003      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a10:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4313      	orrs	r3, r2
 8003a18:	d051      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a24:	d035      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a2a:	d82e      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a30:	d031      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a36:	d828      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a3c:	d01a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a42:	d822      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4c:	d007      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a4e:	e01c      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a50:	4b4b      	ldr	r3, [pc, #300]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	4a4a      	ldr	r2, [pc, #296]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	3308      	adds	r3, #8
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 ffb0 	bl	80049cc <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a72:	e011      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	3328      	adds	r3, #40	@ 0x28
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 f857 	bl	8004b30 <RCCEx_PLL3_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a88:	e006      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a90:	e002      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003aa0:	4b37      	ldr	r3, [pc, #220]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aae:	4a34      	ldr	r2, [pc, #208]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ab4:	e003      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003aca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ad4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4313      	orrs	r3, r2
 8003adc:	d056      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae8:	d033      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003aea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aee:	d82c      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003af0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003af4:	d02f      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003af6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003afa:	d826      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003afc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b00:	d02b      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b06:	d820      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b0c:	d012      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b12:	d81a      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d022      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b1c:	d115      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b22:	3308      	adds	r3, #8
 8003b24:	2101      	movs	r1, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 ff50 	bl	80049cc <RCCEx_PLL2_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b32:	e015      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	3328      	adds	r3, #40	@ 0x28
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fff7 	bl	8004b30 <RCCEx_PLL3_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b48:	e00a      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b50:	e006      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b52:	bf00      	nop
 8003b54:	e004      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b56:	bf00      	nop
 8003b58:	e002      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b5a:	bf00      	nop
 8003b5c:	e000      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10d      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b68:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b76:	4a02      	ldr	r2, [pc, #8]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b7c:	e006      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b7e:	bf00      	nop
 8003b80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ba2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	d055      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bb8:	d033      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bbe:	d82c      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc4:	d02f      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bca:	d826      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bd0:	d02b      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003bd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bd6:	d820      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bdc:	d012      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003be2:	d81a      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d022      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003be8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bec:	d115      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fee8 	bl	80049cc <RCCEx_PLL2_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c02:	e015      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	3328      	adds	r3, #40	@ 0x28
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 ff8f 	bl	8004b30 <RCCEx_PLL3_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c18:	e00a      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c20:	e006      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c22:	bf00      	nop
 8003c24:	e004      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c26:	bf00      	nop
 8003c28:	e002      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c2a:	bf00      	nop
 8003c2c:	e000      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c38:	4ba3      	ldr	r3, [pc, #652]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c48:	4a9f      	ldr	r2, [pc, #636]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c4e:	e003      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	d037      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c82:	d00e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c88:	d816      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d018      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c92:	d111      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c94:	4b8c      	ldr	r3, [pc, #560]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	4a8b      	ldr	r2, [pc, #556]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ca0:	e00f      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fe8e 	bl	80049cc <RCCEx_PLL2_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cb6:	e004      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cca:	4b7f      	ldr	r3, [pc, #508]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd8:	4a7b      	ldr	r2, [pc, #492]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cde:	e003      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003cfe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d039      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d81c      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d12:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d55 	.word	0x08003d55
 8003d1c:	08003d29 	.word	0x08003d29
 8003d20:	08003d37 	.word	0x08003d37
 8003d24:	08003d55 	.word	0x08003d55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d28:	4b67      	ldr	r3, [pc, #412]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	4a66      	ldr	r2, [pc, #408]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d34:	e00f      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fe44 	bl	80049cc <RCCEx_PLL2_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d4a:	e004      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d5e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	f023 0103 	bic.w	r1, r3, #3
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6c:	4a56      	ldr	r2, [pc, #344]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d72:	e003      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d96:	460b      	mov	r3, r1
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f000 809f 	beq.w	8003edc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003daa:	f7fd fa3d 	bl	8001228 <HAL_GetTick>
 8003dae:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db2:	e00b      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db4:	f7fd fa38 	bl	8001228 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b64      	cmp	r3, #100	@ 0x64
 8003dc2:	d903      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dca:	e005      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ed      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d179      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003de0:	4b39      	ldr	r3, [pc, #228]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dec:	4053      	eors	r3, r2
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d015      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df6:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e02:	4b31      	ldr	r3, [pc, #196]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	4a30      	ldr	r2, [pc, #192]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e18:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e20:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e2e:	d118      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fd f9fa 	bl	8001228 <HAL_GetTick>
 8003e34:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e38:	e00d      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fd f9f5 	bl	8001228 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e44:	1ad2      	subs	r2, r2, r3
 8003e46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d903      	bls.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003e54:	e005      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e56:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0eb      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d129      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e7a:	d10e      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e7c:	4b12      	ldr	r3, [pc, #72]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e8c:	091a      	lsrs	r2, r3, #4
 8003e8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6113      	str	r3, [r2, #16]
 8003e98:	e005      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ea4:	6113      	str	r3, [r2, #16]
 8003ea6:	4b08      	ldr	r3, [pc, #32]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb6:	4a04      	ldr	r2, [pc, #16]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ebc:	e00e      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003ec6:	e009      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ec8:	58024400 	.word	0x58024400
 8003ecc:	58024800 	.word	0x58024800
 8003ed0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f002 0301 	and.w	r3, r2, #1
 8003ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ef2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f000 8089 	beq.w	8004010 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f04:	2b28      	cmp	r3, #40	@ 0x28
 8003f06:	d86b      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f08:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003fe9 	.word	0x08003fe9
 8003f14:	08003fe1 	.word	0x08003fe1
 8003f18:	08003fe1 	.word	0x08003fe1
 8003f1c:	08003fe1 	.word	0x08003fe1
 8003f20:	08003fe1 	.word	0x08003fe1
 8003f24:	08003fe1 	.word	0x08003fe1
 8003f28:	08003fe1 	.word	0x08003fe1
 8003f2c:	08003fe1 	.word	0x08003fe1
 8003f30:	08003fb5 	.word	0x08003fb5
 8003f34:	08003fe1 	.word	0x08003fe1
 8003f38:	08003fe1 	.word	0x08003fe1
 8003f3c:	08003fe1 	.word	0x08003fe1
 8003f40:	08003fe1 	.word	0x08003fe1
 8003f44:	08003fe1 	.word	0x08003fe1
 8003f48:	08003fe1 	.word	0x08003fe1
 8003f4c:	08003fe1 	.word	0x08003fe1
 8003f50:	08003fcb 	.word	0x08003fcb
 8003f54:	08003fe1 	.word	0x08003fe1
 8003f58:	08003fe1 	.word	0x08003fe1
 8003f5c:	08003fe1 	.word	0x08003fe1
 8003f60:	08003fe1 	.word	0x08003fe1
 8003f64:	08003fe1 	.word	0x08003fe1
 8003f68:	08003fe1 	.word	0x08003fe1
 8003f6c:	08003fe1 	.word	0x08003fe1
 8003f70:	08003fe9 	.word	0x08003fe9
 8003f74:	08003fe1 	.word	0x08003fe1
 8003f78:	08003fe1 	.word	0x08003fe1
 8003f7c:	08003fe1 	.word	0x08003fe1
 8003f80:	08003fe1 	.word	0x08003fe1
 8003f84:	08003fe1 	.word	0x08003fe1
 8003f88:	08003fe1 	.word	0x08003fe1
 8003f8c:	08003fe1 	.word	0x08003fe1
 8003f90:	08003fe9 	.word	0x08003fe9
 8003f94:	08003fe1 	.word	0x08003fe1
 8003f98:	08003fe1 	.word	0x08003fe1
 8003f9c:	08003fe1 	.word	0x08003fe1
 8003fa0:	08003fe1 	.word	0x08003fe1
 8003fa4:	08003fe1 	.word	0x08003fe1
 8003fa8:	08003fe1 	.word	0x08003fe1
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	08003fe9 	.word	0x08003fe9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb8:	3308      	adds	r3, #8
 8003fba:	2101      	movs	r1, #1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fd05 	bl	80049cc <RCCEx_PLL2_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fc8:	e00f      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fce:	3328      	adds	r3, #40	@ 0x28
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fdac 	bl	8004b30 <RCCEx_PLL3_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ff2:	4bbf      	ldr	r3, [pc, #764]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004000:	4abb      	ldr	r2, [pc, #748]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004002:	430b      	orrs	r3, r1
 8004004:	6553      	str	r3, [r2, #84]	@ 0x54
 8004006:	e003      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f002 0302 	and.w	r3, r2, #2
 800401c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004026:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800402a:	460b      	mov	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	d041      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004036:	2b05      	cmp	r3, #5
 8004038:	d824      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800403a:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	0800408d 	.word	0x0800408d
 8004044:	08004059 	.word	0x08004059
 8004048:	0800406f 	.word	0x0800406f
 800404c:	0800408d 	.word	0x0800408d
 8004050:	0800408d 	.word	0x0800408d
 8004054:	0800408d 	.word	0x0800408d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	3308      	adds	r3, #8
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fcb3 	bl	80049cc <RCCEx_PLL2_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800406c:	e00f      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	3328      	adds	r3, #40	@ 0x28
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fd5a 	bl	8004b30 <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004082:	e004      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800408a:	e000      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800408c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004096:	4b96      	ldr	r3, [pc, #600]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409a:	f023 0107 	bic.w	r1, r3, #7
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a4:	4a92      	ldr	r2, [pc, #584]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040a6:	430b      	orrs	r3, r1
 80040a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80040aa:	e003      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f002 0304 	and.w	r3, r2, #4
 80040c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	d044      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040dc:	2b05      	cmp	r3, #5
 80040de:	d825      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80040e0:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	08004135 	.word	0x08004135
 80040ec:	08004101 	.word	0x08004101
 80040f0:	08004117 	.word	0x08004117
 80040f4:	08004135 	.word	0x08004135
 80040f8:	08004135 	.word	0x08004135
 80040fc:	08004135 	.word	0x08004135
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004104:	3308      	adds	r3, #8
 8004106:	2101      	movs	r1, #1
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fc5f 	bl	80049cc <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004114:	e00f      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411a:	3328      	adds	r3, #40	@ 0x28
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fd06 	bl	8004b30 <RCCEx_PLL3_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800412a:	e004      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004132:	e000      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800413e:	4b6c      	ldr	r3, [pc, #432]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	f023 0107 	bic.w	r1, r3, #7
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800414e:	4a68      	ldr	r2, [pc, #416]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004150:	430b      	orrs	r3, r1
 8004152:	6593      	str	r3, [r2, #88]	@ 0x58
 8004154:	e003      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800415a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f002 0320 	and.w	r3, r2, #32
 800416a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004174:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004178:	460b      	mov	r3, r1
 800417a:	4313      	orrs	r3, r2
 800417c:	d055      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800418a:	d033      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800418c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004190:	d82c      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004196:	d02f      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419c:	d826      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800419e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041a2:	d02b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80041a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041a8:	d820      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ae:	d012      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041b4:	d81a      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d022      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80041ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041be:	d115      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c4:	3308      	adds	r3, #8
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fbff 	bl	80049cc <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041d4:	e015      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041da:	3328      	adds	r3, #40	@ 0x28
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fca6 	bl	8004b30 <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041ea:	e00a      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041f2:	e006      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041f4:	bf00      	nop
 80041f6:	e004      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041f8:	bf00      	nop
 80041fa:	e002      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041fc:	bf00      	nop
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420a:	4b39      	ldr	r3, [pc, #228]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421a:	4a35      	ldr	r2, [pc, #212]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800421c:	430b      	orrs	r3, r1
 800421e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004220:	e003      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004236:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800423a:	2300      	movs	r3, #0
 800423c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004240:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004244:	460b      	mov	r3, r1
 8004246:	4313      	orrs	r3, r2
 8004248:	d058      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004252:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004256:	d033      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004258:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800425c:	d82c      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004262:	d02f      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004268:	d826      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800426a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800426e:	d02b      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004270:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004274:	d820      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800427a:	d012      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800427c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004280:	d81a      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d022      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428a:	d115      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800428c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004290:	3308      	adds	r3, #8
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fb99 	bl	80049cc <RCCEx_PLL2_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042a0:	e015      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	3328      	adds	r3, #40	@ 0x28
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fc40 	bl	8004b30 <RCCEx_PLL3_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042b6:	e00a      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042be:	e006      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c0:	bf00      	nop
 80042c2:	e004      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c4:	bf00      	nop
 80042c6:	e002      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c8:	bf00      	nop
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10e      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042d6:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042e6:	4a02      	ldr	r2, [pc, #8]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042e8:	430b      	orrs	r3, r1
 80042ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ec:	e006      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80042ee:	bf00      	nop
 80042f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800430c:	2300      	movs	r3, #0
 800430e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004312:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004316:	460b      	mov	r3, r1
 8004318:	4313      	orrs	r3, r2
 800431a:	d055      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004324:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004328:	d033      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800432a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800432e:	d82c      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004334:	d02f      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800433a:	d826      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800433c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004340:	d02b      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004342:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004346:	d820      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800434c:	d012      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800434e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004352:	d81a      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d022      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800435c:	d115      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	3308      	adds	r3, #8
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fb30 	bl	80049cc <RCCEx_PLL2_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004372:	e015      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004378:	3328      	adds	r3, #40	@ 0x28
 800437a:	2102      	movs	r1, #2
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fbd7 	bl	8004b30 <RCCEx_PLL3_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004388:	e00a      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004390:	e006      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004392:	bf00      	nop
 8004394:	e004      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004396:	bf00      	nop
 8004398:	e002      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800439e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043b8:	4a9d      	ldr	r2, [pc, #628]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80043be:	e003      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f002 0308 	and.w	r3, r2, #8
 80043d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d01e      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fa:	3328      	adds	r3, #40	@ 0x28
 80043fc:	2102      	movs	r1, #2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fb96 	bl	8004b30 <RCCEx_PLL3_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004410:	4b87      	ldr	r3, [pc, #540]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004420:	4a83      	ldr	r2, [pc, #524]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004422:	430b      	orrs	r3, r1
 8004424:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f002 0310 	and.w	r3, r2, #16
 8004432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800443c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004440:	460b      	mov	r3, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	d01e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800444e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004452:	d10c      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004458:	3328      	adds	r3, #40	@ 0x28
 800445a:	2102      	movs	r1, #2
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fb67 	bl	8004b30 <RCCEx_PLL3_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800446e:	4b70      	ldr	r3, [pc, #448]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004472:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800447e:	4a6c      	ldr	r2, [pc, #432]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004480:	430b      	orrs	r3, r1
 8004482:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004490:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800449a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800449e:	460b      	mov	r3, r1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	d03e      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044b0:	d022      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80044b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044b6:	d81b      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c0:	d00b      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80044c2:	e015      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	3308      	adds	r3, #8
 80044ca:	2100      	movs	r1, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fa7d 	bl	80049cc <RCCEx_PLL2_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044d8:	e00f      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044de:	3328      	adds	r3, #40	@ 0x28
 80044e0:	2102      	movs	r1, #2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fb24 	bl	8004b30 <RCCEx_PLL3_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044ee:	e004      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044f6:	e000      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80044f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004502:	4b4b      	ldr	r3, [pc, #300]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004506:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004512:	4a47      	ldr	r2, [pc, #284]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004514:	430b      	orrs	r3, r1
 8004516:	6593      	str	r3, [r2, #88]	@ 0x58
 8004518:	e003      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800452e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004530:	2300      	movs	r3, #0
 8004532:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004534:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004538:	460b      	mov	r3, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	d03b      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004546:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800454a:	d01f      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800454c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004550:	d818      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004556:	d003      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004558:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800455c:	d007      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800455e:	e011      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004560:	4b33      	ldr	r3, [pc, #204]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004564:	4a32      	ldr	r2, [pc, #200]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800456a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800456c:	e00f      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004572:	3328      	adds	r3, #40	@ 0x28
 8004574:	2101      	movs	r1, #1
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fada 	bl	8004b30 <RCCEx_PLL3_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004582:	e004      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800458a:	e000      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800458c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004596:	4b26      	ldr	r3, [pc, #152]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a6:	4a22      	ldr	r2, [pc, #136]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80045ac:	e003      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80045c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80045c4:	2300      	movs	r3, #0
 80045c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80045c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80045cc:	460b      	mov	r3, r1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	d034      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80045dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e0:	d007      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80045e2:	e011      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e4:	4b12      	ldr	r3, [pc, #72]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	4a11      	ldr	r2, [pc, #68]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045f0:	e00e      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	3308      	adds	r3, #8
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 f9e6 	bl	80049cc <RCCEx_PLL2_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004606:	e003      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800460e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10d      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800461a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004626:	4a02      	ldr	r2, [pc, #8]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004628:	430b      	orrs	r3, r1
 800462a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800462c:	e006      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800462e:	bf00      	nop
 8004630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800464a:	2300      	movs	r3, #0
 800464c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800464e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d00c      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465c:	3328      	adds	r3, #40	@ 0x28
 800465e:	2102      	movs	r1, #2
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fa65 	bl	8004b30 <RCCEx_PLL3_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800467e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004680:	2300      	movs	r3, #0
 8004682:	667b      	str	r3, [r7, #100]	@ 0x64
 8004684:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004688:	460b      	mov	r3, r1
 800468a:	4313      	orrs	r3, r2
 800468c:	d038      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800469a:	d018      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800469c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046a0:	d811      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a6:	d014      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80046a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ac:	d80b      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d011      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80046b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b6:	d106      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b8:	4bc3      	ldr	r3, [pc, #780]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	4ac2      	ldr	r2, [pc, #776]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046c4:	e008      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046cc:	e004      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046ce:	bf00      	nop
 80046d0:	e002      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046d2:	bf00      	nop
 80046d4:	e000      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10b      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e0:	4bb9      	ldr	r3, [pc, #740]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046f0:	4ab5      	ldr	r2, [pc, #724]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80046f6:	e003      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800470c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800470e:	2300      	movs	r3, #0
 8004710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004712:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004716:	460b      	mov	r3, r1
 8004718:	4313      	orrs	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800471c:	4baa      	ldr	r3, [pc, #680]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004720:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472a:	4aa7      	ldr	r2, [pc, #668]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472c:	430b      	orrs	r3, r1
 800472e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800473c:	653b      	str	r3, [r7, #80]	@ 0x50
 800473e:	2300      	movs	r3, #0
 8004740:	657b      	str	r3, [r7, #84]	@ 0x54
 8004742:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004746:	460b      	mov	r3, r1
 8004748:	4313      	orrs	r3, r2
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800474c:	4b9e      	ldr	r3, [pc, #632]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004758:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800475c:	4a9a      	ldr	r2, [pc, #616]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800475e:	430b      	orrs	r3, r1
 8004760:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800476e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004770:	2300      	movs	r3, #0
 8004772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004774:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004778:	460b      	mov	r3, r1
 800477a:	4313      	orrs	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800477e:	4b92      	ldr	r3, [pc, #584]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004782:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800478c:	4a8e      	ldr	r2, [pc, #568]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478e:	430b      	orrs	r3, r1
 8004790:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800479e:	643b      	str	r3, [r7, #64]	@ 0x40
 80047a0:	2300      	movs	r3, #0
 80047a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80047a8:	460b      	mov	r3, r1
 80047aa:	4313      	orrs	r3, r2
 80047ac:	d00e      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047ae:	4b86      	ldr	r3, [pc, #536]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	4a85      	ldr	r2, [pc, #532]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047b8:	6113      	str	r3, [r2, #16]
 80047ba:	4b83      	ldr	r3, [pc, #524]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047bc:	6919      	ldr	r1, [r3, #16]
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047c6:	4a80      	ldr	r2, [pc, #512]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80047d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047da:	2300      	movs	r3, #0
 80047dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047e2:	460b      	mov	r3, r1
 80047e4:	4313      	orrs	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047e8:	4b77      	ldr	r3, [pc, #476]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f6:	4a74      	ldr	r2, [pc, #464]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f8:	430b      	orrs	r3, r1
 80047fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004808:	633b      	str	r3, [r7, #48]	@ 0x30
 800480a:	2300      	movs	r3, #0
 800480c:	637b      	str	r3, [r7, #52]	@ 0x34
 800480e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004812:	460b      	mov	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004818:	4b6b      	ldr	r3, [pc, #428]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800481a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004828:	4a67      	ldr	r2, [pc, #412]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800482a:	430b      	orrs	r3, r1
 800482c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800482e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	2100      	movs	r1, #0
 8004838:	62b9      	str	r1, [r7, #40]	@ 0x28
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004840:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004844:	460b      	mov	r3, r1
 8004846:	4313      	orrs	r3, r2
 8004848:	d011      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	3308      	adds	r3, #8
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f8ba 	bl	80049cc <RCCEx_PLL2_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800485e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	2100      	movs	r1, #0
 8004878:	6239      	str	r1, [r7, #32]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004880:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004884:	460b      	mov	r3, r1
 8004886:	4313      	orrs	r3, r2
 8004888:	d011      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	3308      	adds	r3, #8
 8004890:	2101      	movs	r1, #1
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f89a 	bl	80049cc <RCCEx_PLL2_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800489e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	2100      	movs	r1, #0
 80048b8:	61b9      	str	r1, [r7, #24]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	61fb      	str	r3, [r7, #28]
 80048c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048c4:	460b      	mov	r3, r1
 80048c6:	4313      	orrs	r3, r2
 80048c8:	d011      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	3308      	adds	r3, #8
 80048d0:	2102      	movs	r1, #2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f87a 	bl	80049cc <RCCEx_PLL2_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	2100      	movs	r1, #0
 80048f8:	6139      	str	r1, [r7, #16]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004904:	460b      	mov	r3, r1
 8004906:	4313      	orrs	r3, r2
 8004908:	d011      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490e:	3328      	adds	r3, #40	@ 0x28
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f90c 	bl	8004b30 <RCCEx_PLL3_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800492a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800492e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	2100      	movs	r1, #0
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004944:	460b      	mov	r3, r1
 8004946:	4313      	orrs	r3, r2
 8004948:	d011      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	3328      	adds	r3, #40	@ 0x28
 8004950:	2101      	movs	r1, #1
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f8ec 	bl	8004b30 <RCCEx_PLL3_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800495e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800496a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	2100      	movs	r1, #0
 8004978:	6039      	str	r1, [r7, #0]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	607b      	str	r3, [r7, #4]
 8004980:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004984:	460b      	mov	r3, r1
 8004986:	4313      	orrs	r3, r2
 8004988:	d011      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	3328      	adds	r3, #40	@ 0x28
 8004990:	2102      	movs	r1, #2
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f8cc 	bl	8004b30 <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800499e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80049ae:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
}
 80049bc:	4618      	mov	r0, r3
 80049be:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80049c2:	46bd      	mov	sp, r7
 80049c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c8:	58024400 	.word	0x58024400

080049cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049da:	4b53      	ldr	r3, [pc, #332]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 80049dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d101      	bne.n	80049ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e099      	b.n	8004b1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a4e      	ldr	r2, [pc, #312]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 80049f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f6:	f7fc fc17 	bl	8001228 <HAL_GetTick>
 80049fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049fc:	e008      	b.n	8004a10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049fe:	f7fc fc13 	bl	8001228 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e086      	b.n	8004b1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a10:	4b45      	ldr	r3, [pc, #276]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f0      	bne.n	80049fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a1c:	4b42      	ldr	r3, [pc, #264]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	031b      	lsls	r3, r3, #12
 8004a2a:	493f      	ldr	r1, [pc, #252]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	025b      	lsls	r3, r3, #9
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	041b      	lsls	r3, r3, #16
 8004a4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	061b      	lsls	r3, r3, #24
 8004a5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a60:	4931      	ldr	r1, [pc, #196]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a66:	4b30      	ldr	r3, [pc, #192]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	492d      	ldr	r1, [pc, #180]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a78:	4b2b      	ldr	r3, [pc, #172]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	f023 0220 	bic.w	r2, r3, #32
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	4928      	ldr	r1, [pc, #160]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a8a:	4b27      	ldr	r3, [pc, #156]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	4a26      	ldr	r2, [pc, #152]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004a90:	f023 0310 	bic.w	r3, r3, #16
 8004a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a96:	4b24      	ldr	r3, [pc, #144]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a9a:	4b24      	ldr	r3, [pc, #144]	@ (8004b2c <RCCEx_PLL2_Config+0x160>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	69d2      	ldr	r2, [r2, #28]
 8004aa2:	00d2      	lsls	r2, r2, #3
 8004aa4:	4920      	ldr	r1, [pc, #128]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004ab0:	f043 0310 	orr.w	r3, r3, #16
 8004ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004abc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	4a19      	ldr	r2, [pc, #100]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004ac2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ac8:	e00f      	b.n	8004aea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d106      	bne.n	8004ade <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ad0:	4b15      	ldr	r3, [pc, #84]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad4:	4a14      	ldr	r2, [pc, #80]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ada:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004adc:	e005      	b.n	8004aea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ade:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	4a11      	ldr	r2, [pc, #68]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004ae4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004aea:	4b0f      	ldr	r3, [pc, #60]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a0e      	ldr	r2, [pc, #56]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004af0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af6:	f7fc fb97 	bl	8001228 <HAL_GetTick>
 8004afa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004afc:	e008      	b.n	8004b10 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004afe:	f7fc fb93 	bl	8001228 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e006      	b.n	8004b1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <RCCEx_PLL2_Config+0x15c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	58024400 	.word	0x58024400
 8004b2c:	ffff0007 	.word	0xffff0007

08004b30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b3e:	4b53      	ldr	r3, [pc, #332]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d101      	bne.n	8004b4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e099      	b.n	8004c82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a4e      	ldr	r2, [pc, #312]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004b54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5a:	f7fc fb65 	bl	8001228 <HAL_GetTick>
 8004b5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b60:	e008      	b.n	8004b74 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b62:	f7fc fb61 	bl	8001228 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e086      	b.n	8004c82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b74:	4b45      	ldr	r3, [pc, #276]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f0      	bne.n	8004b62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b80:	4b42      	ldr	r3, [pc, #264]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b84:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	051b      	lsls	r3, r3, #20
 8004b8e:	493f      	ldr	r1, [pc, #252]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	025b      	lsls	r3, r3, #9
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	061b      	lsls	r3, r3, #24
 8004bc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bc4:	4931      	ldr	r1, [pc, #196]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bca:	4b30      	ldr	r3, [pc, #192]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	492d      	ldr	r1, [pc, #180]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	4928      	ldr	r1, [pc, #160]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bee:	4b27      	ldr	r3, [pc, #156]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf2:	4a26      	ldr	r2, [pc, #152]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bfa:	4b24      	ldr	r3, [pc, #144]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bfe:	4b24      	ldr	r3, [pc, #144]	@ (8004c90 <RCCEx_PLL3_Config+0x160>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	69d2      	ldr	r2, [r2, #28]
 8004c06:	00d2      	lsls	r2, r2, #3
 8004c08:	4920      	ldr	r1, [pc, #128]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c12:	4a1e      	ldr	r2, [pc, #120]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c20:	4b1a      	ldr	r3, [pc, #104]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c24:	4a19      	ldr	r2, [pc, #100]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c2c:	e00f      	b.n	8004c4e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d106      	bne.n	8004c42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c34:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c38:	4a14      	ldr	r2, [pc, #80]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c40:	e005      	b.n	8004c4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c42:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c46:	4a11      	ldr	r2, [pc, #68]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a0e      	ldr	r2, [pc, #56]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5a:	f7fc fae5 	bl	8001228 <HAL_GetTick>
 8004c5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c60:	e008      	b.n	8004c74 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c62:	f7fc fae1 	bl	8001228 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e006      	b.n	8004c82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <RCCEx_PLL3_Config+0x15c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	58024400 	.word	0x58024400
 8004c90:	ffff0007 	.word	0xffff0007

08004c94 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e10f      	b.n	8004ec6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a87      	ldr	r2, [pc, #540]	@ (8004ed0 <HAL_SPI_Init+0x23c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00f      	beq.n	8004cd6 <HAL_SPI_Init+0x42>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a86      	ldr	r2, [pc, #536]	@ (8004ed4 <HAL_SPI_Init+0x240>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_SPI_Init+0x42>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a84      	ldr	r2, [pc, #528]	@ (8004ed8 <HAL_SPI_Init+0x244>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d005      	beq.n	8004cd6 <HAL_SPI_Init+0x42>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	d901      	bls.n	8004cd6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e0f7      	b.n	8004ec6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f900 	bl	8004edc <SPI_GetPacketSize>
 8004cdc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a7b      	ldr	r2, [pc, #492]	@ (8004ed0 <HAL_SPI_Init+0x23c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00c      	beq.n	8004d02 <HAL_SPI_Init+0x6e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a79      	ldr	r2, [pc, #484]	@ (8004ed4 <HAL_SPI_Init+0x240>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <HAL_SPI_Init+0x6e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a78      	ldr	r2, [pc, #480]	@ (8004ed8 <HAL_SPI_Init+0x244>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_Init+0x6e>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d811      	bhi.n	8004d26 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d06:	4a72      	ldr	r2, [pc, #456]	@ (8004ed0 <HAL_SPI_Init+0x23c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d009      	beq.n	8004d20 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a70      	ldr	r2, [pc, #448]	@ (8004ed4 <HAL_SPI_Init+0x240>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d004      	beq.n	8004d20 <HAL_SPI_Init+0x8c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ed8 <HAL_SPI_Init+0x244>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d104      	bne.n	8004d2a <HAL_SPI_Init+0x96>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	d901      	bls.n	8004d2a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e0cd      	b.n	8004ec6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc f860 	bl	8000e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0201 	bic.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004d66:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d70:	d119      	bne.n	8004da6 <HAL_SPI_Init+0x112>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d7a:	d103      	bne.n	8004d84 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10c      	bne.n	8004da6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d94:	d107      	bne.n	8004da6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004da4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00f      	beq.n	8004dd2 <HAL_SPI_Init+0x13e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b06      	cmp	r3, #6
 8004db8:	d90b      	bls.n	8004dd2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e007      	b.n	8004de2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004de0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69da      	ldr	r2, [r3, #28]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df4:	ea42 0103 	orr.w	r1, r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e42:	ea42 0103 	orr.w	r1, r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d113      	bne.n	8004e82 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e6c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e80:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40013000 	.word	0x40013000
 8004ed4:	40003800 	.word	0x40003800
 8004ed8:	40003c00 	.word	0x40003c00

08004edc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	3307      	adds	r3, #7
 8004efa:	08db      	lsrs	r3, r3, #3
 8004efc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004f18:	4904      	ldr	r1, [pc, #16]	@ (8004f2c <MX_FATFS_Init+0x18>)
 8004f1a:	4805      	ldr	r0, [pc, #20]	@ (8004f30 <MX_FATFS_Init+0x1c>)
 8004f1c:	f000 f924 	bl	8005168 <FATFS_LinkDriver>
 8004f20:	4603      	mov	r3, r0
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b03      	ldr	r3, [pc, #12]	@ (8004f34 <MX_FATFS_Init+0x20>)
 8004f26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004f28:	bf00      	nop
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	24000980 	.word	0x24000980
 8004f30:	24000010 	.word	0x24000010
 8004f34:	2400097c 	.word	0x2400097c

08004f38 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	if (pdrv == 0)
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10c      	bne.n	8004f62 <USER_initialize+0x2a>
	{
		if (W25N01_Init(&hqspi) == HAL_OK)
 8004f48:	4808      	ldr	r0, [pc, #32]	@ (8004f6c <USER_initialize+0x34>)
 8004f4a:	f7fb fadf 	bl	800050c <W25N01_Init>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <USER_initialize+0x26>
		{
			Stat = ~STA_NOINIT;
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <USER_initialize+0x38>)
 8004f56:	22fe      	movs	r2, #254	@ 0xfe
 8004f58:	701a      	strb	r2, [r3, #0]
			return 0;  // Initialization successful
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e002      	b.n	8004f64 <USER_initialize+0x2c>
		}
		return STA_NOINIT;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <USER_initialize+0x2c>
	}
	return STA_NOINIT;
 8004f62:	2301      	movs	r3, #1
  /* USER CODE END INIT */
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	240008a0 	.word	0x240008a0
 8004f70:	2400000d 	.word	0x2400000d

08004f74 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = ~STA_NOINIT;
 8004f7e:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <USER_status+0x24>)
 8004f80:	22fe      	movs	r2, #254	@ 0xfe
 8004f82:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004f84:	4b04      	ldr	r3, [pc, #16]	@ (8004f98 <USER_status+0x24>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	2400000d 	.word	0x2400000d

08004f9c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	4603      	mov	r3, r0
 8004faa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	if (pdrv == 0)
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d113      	bne.n	8004fda <USER_read+0x3e>
	{
		while (count--)
 8004fb2:	e00b      	b.n	8004fcc <USER_read+0x30>
		{
			if (W25N01_ReadPage(&hqspi, sector, buff, W25N01_PAGE_SIZE) != HAL_OK)
 8004fb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	4809      	ldr	r0, [pc, #36]	@ (8004fe4 <USER_read+0x48>)
 8004fbe:	f7fb fafd 	bl	80005bc <W25N01_ReadPage>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <USER_read+0x30>
			{
				return RES_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e007      	b.n	8004fdc <USER_read+0x40>
		while (count--)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	1e5a      	subs	r2, r3, #1
 8004fd0:	603a      	str	r2, [r7, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1ee      	bne.n	8004fb4 <USER_read+0x18>
			}
//			sector++;
//			buff += W25N01_PAGE_SIZE;
		}
		return RES_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e000      	b.n	8004fdc <USER_read+0x40>
	}
	return RES_PARERR;
 8004fda:	2304      	movs	r3, #4
  /* USER CODE END READ */
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	240008a0 	.word	0x240008a0

08004fe8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	if (pdrv == 0)
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d128      	bne.n	8005050 <USER_write+0x68>
	{
		if (count > 1)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d91e      	bls.n	8005042 <USER_write+0x5a>
		{
			return RES_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e024      	b.n	8005052 <USER_write+0x6a>
		}
		while (count--)
		{
			if (W25N01_WritePage(&hqspi, sector, buff, W25N01_PAGE_SIZE) != HAL_OK)
 8005008:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4812      	ldr	r0, [pc, #72]	@ (800505c <USER_write+0x74>)
 8005012:	f7fb fb3f 	bl	8000694 <W25N01_WritePage>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <USER_write+0x38>
			{
				return RES_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e018      	b.n	8005052 <USER_write+0x6a>
			}
			memset((uint8_t *)buff, 0, sizeof(buff));
 8005020:	2204      	movs	r2, #4
 8005022:	2100      	movs	r1, #0
 8005024:	68b8      	ldr	r0, [r7, #8]
 8005026:	f000 fa01 	bl	800542c <memset>
			if (W25N01_ReadPage(&hqspi, sector, buff, W25N01_PAGE_SIZE) != HAL_OK)
 800502a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	480a      	ldr	r0, [pc, #40]	@ (800505c <USER_write+0x74>)
 8005034:	f7fb fac2 	bl	80005bc <W25N01_ReadPage>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <USER_write+0x5a>
			{
				return RES_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e007      	b.n	8005052 <USER_write+0x6a>
		while (count--)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	1e5a      	subs	r2, r3, #1
 8005046:	603a      	str	r2, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1dd      	bne.n	8005008 <USER_write+0x20>
			}
//			sector++;
//			buff += W25N01_PAGE_SIZE;
		}
		return RES_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	e000      	b.n	8005052 <USER_write+0x6a>
	}
	return RES_PARERR;
 8005050:	2304      	movs	r3, #4
  /* USER CODE END WRITE */
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	240008a0 	.word	0x240008a0

08005060 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	603a      	str	r2, [r7, #0]
 800506a:	71fb      	strb	r3, [r7, #7]
 800506c:	460b      	mov	r3, r1
 800506e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	if (pdrv == 0)
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d124      	bne.n	80050c0 <USER_ioctl+0x60>
	{
		switch (cmd)
 8005076:	79bb      	ldrb	r3, [r7, #6]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d81f      	bhi.n	80050bc <USER_ioctl+0x5c>
 800507c:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <USER_ioctl+0x24>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005095 	.word	0x08005095
 8005088:	08005099 	.word	0x08005099
 800508c:	080050a5 	.word	0x080050a5
 8005090:	080050b1 	.word	0x080050b1
		{
		case CTRL_SYNC:
			return RES_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	e014      	b.n	80050c2 <USER_ioctl+0x62>
		case GET_SECTOR_COUNT:
			*(DWORD *)buff = 65536;  // Total size in sectors
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800509e:	601a      	str	r2, [r3, #0]
			return RES_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	e00e      	b.n	80050c2 <USER_ioctl+0x62>
		case GET_SECTOR_SIZE:
			*(WORD *)buff = W25N01_PAGE_SIZE;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050aa:	801a      	strh	r2, [r3, #0]
			return RES_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e008      	b.n	80050c2 <USER_ioctl+0x62>
		case GET_BLOCK_SIZE:
			*(DWORD *)buff = W25N01_BLOCK_SIZE;  // 64 pages per block
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80050b6:	601a      	str	r2, [r3, #0]
			return RES_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e002      	b.n	80050c2 <USER_ioctl+0x62>
		default:
			return RES_PARERR;
 80050bc:	2304      	movs	r3, #4
 80050be:	e000      	b.n	80050c2 <USER_ioctl+0x62>
		}
	}
	return RES_PARERR;
 80050c0:	2304      	movs	r3, #4
  /* USER CODE END IOCTL */
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop

080050d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	4613      	mov	r3, r2
 80050dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80050de:	2301      	movs	r3, #1
 80050e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80050e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005164 <FATFS_LinkDriverEx+0x94>)
 80050e8:	7b9b      	ldrb	r3, [r3, #14]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d831      	bhi.n	8005154 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80050f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005164 <FATFS_LinkDriverEx+0x94>)
 80050f2:	7b9b      	ldrb	r3, [r3, #14]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005164 <FATFS_LinkDriverEx+0x94>)
 80050fa:	2100      	movs	r1, #0
 80050fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80050fe:	4b19      	ldr	r3, [pc, #100]	@ (8005164 <FATFS_LinkDriverEx+0x94>)
 8005100:	7b9b      	ldrb	r3, [r3, #14]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	4a17      	ldr	r2, [pc, #92]	@ (8005164 <FATFS_LinkDriverEx+0x94>)
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800510e:	4b15      	ldr	r3, [pc, #84]	@ (8005164 <FATFS_LinkDriverEx+0x94>)
 8005110:	7b9b      	ldrb	r3, [r3, #14]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	4b13      	ldr	r3, [pc, #76]	@ (8005164 <FATFS_LinkDriverEx+0x94>)
 8005118:	4413      	add	r3, r2
 800511a:	79fa      	ldrb	r2, [r7, #7]
 800511c:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800511e:	4b11      	ldr	r3, [pc, #68]	@ (8005164 <FATFS_LinkDriverEx+0x94>)
 8005120:	7b9b      	ldrb	r3, [r3, #14]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	b2d1      	uxtb	r1, r2
 8005128:	4a0e      	ldr	r2, [pc, #56]	@ (8005164 <FATFS_LinkDriverEx+0x94>)
 800512a:	7391      	strb	r1, [r2, #14]
 800512c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800512e:	7dbb      	ldrb	r3, [r7, #22]
 8005130:	3330      	adds	r3, #48	@ 0x30
 8005132:	b2da      	uxtb	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	3301      	adds	r3, #1
 800513c:	223a      	movs	r2, #58	@ 0x3a
 800513e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	3302      	adds	r3, #2
 8005144:	222f      	movs	r2, #47	@ 0x2f
 8005146:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	3303      	adds	r3, #3
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005154:	7dfb      	ldrb	r3, [r7, #23]
}
 8005156:	4618      	mov	r0, r3
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	24000984 	.word	0x24000984

08005168 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005172:	2200      	movs	r2, #0
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff ffaa 	bl	80050d0 <FATFS_LinkDriverEx>
 800517c:	4603      	mov	r3, r0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <siprintf>:
 8005188:	b40e      	push	{r1, r2, r3}
 800518a:	b500      	push	{lr}
 800518c:	b09c      	sub	sp, #112	@ 0x70
 800518e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005190:	9002      	str	r0, [sp, #8]
 8005192:	9006      	str	r0, [sp, #24]
 8005194:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005198:	4809      	ldr	r0, [pc, #36]	@ (80051c0 <siprintf+0x38>)
 800519a:	9107      	str	r1, [sp, #28]
 800519c:	9104      	str	r1, [sp, #16]
 800519e:	4909      	ldr	r1, [pc, #36]	@ (80051c4 <siprintf+0x3c>)
 80051a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051a4:	9105      	str	r1, [sp, #20]
 80051a6:	6800      	ldr	r0, [r0, #0]
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	a902      	add	r1, sp, #8
 80051ac:	f000 f9ce 	bl	800554c <_svfiprintf_r>
 80051b0:	9b02      	ldr	r3, [sp, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	b01c      	add	sp, #112	@ 0x70
 80051b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051bc:	b003      	add	sp, #12
 80051be:	4770      	bx	lr
 80051c0:	24000030 	.word	0x24000030
 80051c4:	ffff0208 	.word	0xffff0208

080051c8 <std>:
 80051c8:	2300      	movs	r3, #0
 80051ca:	b510      	push	{r4, lr}
 80051cc:	4604      	mov	r4, r0
 80051ce:	e9c0 3300 	strd	r3, r3, [r0]
 80051d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051d6:	6083      	str	r3, [r0, #8]
 80051d8:	8181      	strh	r1, [r0, #12]
 80051da:	6643      	str	r3, [r0, #100]	@ 0x64
 80051dc:	81c2      	strh	r2, [r0, #14]
 80051de:	6183      	str	r3, [r0, #24]
 80051e0:	4619      	mov	r1, r3
 80051e2:	2208      	movs	r2, #8
 80051e4:	305c      	adds	r0, #92	@ 0x5c
 80051e6:	f000 f921 	bl	800542c <memset>
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <std+0x58>)
 80051ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <std+0x5c>)
 80051f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <std+0x60>)
 80051f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051f6:	4b0d      	ldr	r3, [pc, #52]	@ (800522c <std+0x64>)
 80051f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80051fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005230 <std+0x68>)
 80051fc:	6224      	str	r4, [r4, #32]
 80051fe:	429c      	cmp	r4, r3
 8005200:	d006      	beq.n	8005210 <std+0x48>
 8005202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005206:	4294      	cmp	r4, r2
 8005208:	d002      	beq.n	8005210 <std+0x48>
 800520a:	33d0      	adds	r3, #208	@ 0xd0
 800520c:	429c      	cmp	r4, r3
 800520e:	d105      	bne.n	800521c <std+0x54>
 8005210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005218:	f000 b93a 	b.w	8005490 <__retarget_lock_init_recursive>
 800521c:	bd10      	pop	{r4, pc}
 800521e:	bf00      	nop
 8005220:	08005f99 	.word	0x08005f99
 8005224:	08005fbb 	.word	0x08005fbb
 8005228:	08005ff3 	.word	0x08005ff3
 800522c:	08006017 	.word	0x08006017
 8005230:	24000994 	.word	0x24000994

08005234 <stdio_exit_handler>:
 8005234:	4a02      	ldr	r2, [pc, #8]	@ (8005240 <stdio_exit_handler+0xc>)
 8005236:	4903      	ldr	r1, [pc, #12]	@ (8005244 <stdio_exit_handler+0x10>)
 8005238:	4803      	ldr	r0, [pc, #12]	@ (8005248 <stdio_exit_handler+0x14>)
 800523a:	f000 b869 	b.w	8005310 <_fwalk_sglue>
 800523e:	bf00      	nop
 8005240:	24000024 	.word	0x24000024
 8005244:	08005f31 	.word	0x08005f31
 8005248:	24000034 	.word	0x24000034

0800524c <cleanup_stdio>:
 800524c:	6841      	ldr	r1, [r0, #4]
 800524e:	4b0c      	ldr	r3, [pc, #48]	@ (8005280 <cleanup_stdio+0x34>)
 8005250:	4299      	cmp	r1, r3
 8005252:	b510      	push	{r4, lr}
 8005254:	4604      	mov	r4, r0
 8005256:	d001      	beq.n	800525c <cleanup_stdio+0x10>
 8005258:	f000 fe6a 	bl	8005f30 <_fflush_r>
 800525c:	68a1      	ldr	r1, [r4, #8]
 800525e:	4b09      	ldr	r3, [pc, #36]	@ (8005284 <cleanup_stdio+0x38>)
 8005260:	4299      	cmp	r1, r3
 8005262:	d002      	beq.n	800526a <cleanup_stdio+0x1e>
 8005264:	4620      	mov	r0, r4
 8005266:	f000 fe63 	bl	8005f30 <_fflush_r>
 800526a:	68e1      	ldr	r1, [r4, #12]
 800526c:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <cleanup_stdio+0x3c>)
 800526e:	4299      	cmp	r1, r3
 8005270:	d004      	beq.n	800527c <cleanup_stdio+0x30>
 8005272:	4620      	mov	r0, r4
 8005274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005278:	f000 be5a 	b.w	8005f30 <_fflush_r>
 800527c:	bd10      	pop	{r4, pc}
 800527e:	bf00      	nop
 8005280:	24000994 	.word	0x24000994
 8005284:	240009fc 	.word	0x240009fc
 8005288:	24000a64 	.word	0x24000a64

0800528c <global_stdio_init.part.0>:
 800528c:	b510      	push	{r4, lr}
 800528e:	4b0b      	ldr	r3, [pc, #44]	@ (80052bc <global_stdio_init.part.0+0x30>)
 8005290:	4c0b      	ldr	r4, [pc, #44]	@ (80052c0 <global_stdio_init.part.0+0x34>)
 8005292:	4a0c      	ldr	r2, [pc, #48]	@ (80052c4 <global_stdio_init.part.0+0x38>)
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	4620      	mov	r0, r4
 8005298:	2200      	movs	r2, #0
 800529a:	2104      	movs	r1, #4
 800529c:	f7ff ff94 	bl	80051c8 <std>
 80052a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052a4:	2201      	movs	r2, #1
 80052a6:	2109      	movs	r1, #9
 80052a8:	f7ff ff8e 	bl	80051c8 <std>
 80052ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052b0:	2202      	movs	r2, #2
 80052b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b6:	2112      	movs	r1, #18
 80052b8:	f7ff bf86 	b.w	80051c8 <std>
 80052bc:	24000acc 	.word	0x24000acc
 80052c0:	24000994 	.word	0x24000994
 80052c4:	08005235 	.word	0x08005235

080052c8 <__sfp_lock_acquire>:
 80052c8:	4801      	ldr	r0, [pc, #4]	@ (80052d0 <__sfp_lock_acquire+0x8>)
 80052ca:	f000 b8e2 	b.w	8005492 <__retarget_lock_acquire_recursive>
 80052ce:	bf00      	nop
 80052d0:	24000ad1 	.word	0x24000ad1

080052d4 <__sfp_lock_release>:
 80052d4:	4801      	ldr	r0, [pc, #4]	@ (80052dc <__sfp_lock_release+0x8>)
 80052d6:	f000 b8dd 	b.w	8005494 <__retarget_lock_release_recursive>
 80052da:	bf00      	nop
 80052dc:	24000ad1 	.word	0x24000ad1

080052e0 <__sinit>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4604      	mov	r4, r0
 80052e4:	f7ff fff0 	bl	80052c8 <__sfp_lock_acquire>
 80052e8:	6a23      	ldr	r3, [r4, #32]
 80052ea:	b11b      	cbz	r3, 80052f4 <__sinit+0x14>
 80052ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f0:	f7ff bff0 	b.w	80052d4 <__sfp_lock_release>
 80052f4:	4b04      	ldr	r3, [pc, #16]	@ (8005308 <__sinit+0x28>)
 80052f6:	6223      	str	r3, [r4, #32]
 80052f8:	4b04      	ldr	r3, [pc, #16]	@ (800530c <__sinit+0x2c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f5      	bne.n	80052ec <__sinit+0xc>
 8005300:	f7ff ffc4 	bl	800528c <global_stdio_init.part.0>
 8005304:	e7f2      	b.n	80052ec <__sinit+0xc>
 8005306:	bf00      	nop
 8005308:	0800524d 	.word	0x0800524d
 800530c:	24000acc 	.word	0x24000acc

08005310 <_fwalk_sglue>:
 8005310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005314:	4607      	mov	r7, r0
 8005316:	4688      	mov	r8, r1
 8005318:	4614      	mov	r4, r2
 800531a:	2600      	movs	r6, #0
 800531c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005320:	f1b9 0901 	subs.w	r9, r9, #1
 8005324:	d505      	bpl.n	8005332 <_fwalk_sglue+0x22>
 8005326:	6824      	ldr	r4, [r4, #0]
 8005328:	2c00      	cmp	r4, #0
 800532a:	d1f7      	bne.n	800531c <_fwalk_sglue+0xc>
 800532c:	4630      	mov	r0, r6
 800532e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005332:	89ab      	ldrh	r3, [r5, #12]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d907      	bls.n	8005348 <_fwalk_sglue+0x38>
 8005338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800533c:	3301      	adds	r3, #1
 800533e:	d003      	beq.n	8005348 <_fwalk_sglue+0x38>
 8005340:	4629      	mov	r1, r5
 8005342:	4638      	mov	r0, r7
 8005344:	47c0      	blx	r8
 8005346:	4306      	orrs	r6, r0
 8005348:	3568      	adds	r5, #104	@ 0x68
 800534a:	e7e9      	b.n	8005320 <_fwalk_sglue+0x10>

0800534c <iprintf>:
 800534c:	b40f      	push	{r0, r1, r2, r3}
 800534e:	b507      	push	{r0, r1, r2, lr}
 8005350:	4906      	ldr	r1, [pc, #24]	@ (800536c <iprintf+0x20>)
 8005352:	ab04      	add	r3, sp, #16
 8005354:	6808      	ldr	r0, [r1, #0]
 8005356:	f853 2b04 	ldr.w	r2, [r3], #4
 800535a:	6881      	ldr	r1, [r0, #8]
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	f000 fa1b 	bl	8005798 <_vfiprintf_r>
 8005362:	b003      	add	sp, #12
 8005364:	f85d eb04 	ldr.w	lr, [sp], #4
 8005368:	b004      	add	sp, #16
 800536a:	4770      	bx	lr
 800536c:	24000030 	.word	0x24000030

08005370 <_puts_r>:
 8005370:	6a03      	ldr	r3, [r0, #32]
 8005372:	b570      	push	{r4, r5, r6, lr}
 8005374:	6884      	ldr	r4, [r0, #8]
 8005376:	4605      	mov	r5, r0
 8005378:	460e      	mov	r6, r1
 800537a:	b90b      	cbnz	r3, 8005380 <_puts_r+0x10>
 800537c:	f7ff ffb0 	bl	80052e0 <__sinit>
 8005380:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005382:	07db      	lsls	r3, r3, #31
 8005384:	d405      	bmi.n	8005392 <_puts_r+0x22>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	0598      	lsls	r0, r3, #22
 800538a:	d402      	bmi.n	8005392 <_puts_r+0x22>
 800538c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800538e:	f000 f880 	bl	8005492 <__retarget_lock_acquire_recursive>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	0719      	lsls	r1, r3, #28
 8005396:	d502      	bpl.n	800539e <_puts_r+0x2e>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d135      	bne.n	800540a <_puts_r+0x9a>
 800539e:	4621      	mov	r1, r4
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 fea9 	bl	80060f8 <__swsetup_r>
 80053a6:	b380      	cbz	r0, 800540a <_puts_r+0x9a>
 80053a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80053ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053ae:	07da      	lsls	r2, r3, #31
 80053b0:	d405      	bmi.n	80053be <_puts_r+0x4e>
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	059b      	lsls	r3, r3, #22
 80053b6:	d402      	bmi.n	80053be <_puts_r+0x4e>
 80053b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ba:	f000 f86b 	bl	8005494 <__retarget_lock_release_recursive>
 80053be:	4628      	mov	r0, r5
 80053c0:	bd70      	pop	{r4, r5, r6, pc}
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da04      	bge.n	80053d0 <_puts_r+0x60>
 80053c6:	69a2      	ldr	r2, [r4, #24]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	dc17      	bgt.n	80053fc <_puts_r+0x8c>
 80053cc:	290a      	cmp	r1, #10
 80053ce:	d015      	beq.n	80053fc <_puts_r+0x8c>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	6022      	str	r2, [r4, #0]
 80053d6:	7019      	strb	r1, [r3, #0]
 80053d8:	68a3      	ldr	r3, [r4, #8]
 80053da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053de:	3b01      	subs	r3, #1
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	2900      	cmp	r1, #0
 80053e4:	d1ed      	bne.n	80053c2 <_puts_r+0x52>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da11      	bge.n	800540e <_puts_r+0x9e>
 80053ea:	4622      	mov	r2, r4
 80053ec:	210a      	movs	r1, #10
 80053ee:	4628      	mov	r0, r5
 80053f0:	f000 fe43 	bl	800607a <__swbuf_r>
 80053f4:	3001      	adds	r0, #1
 80053f6:	d0d7      	beq.n	80053a8 <_puts_r+0x38>
 80053f8:	250a      	movs	r5, #10
 80053fa:	e7d7      	b.n	80053ac <_puts_r+0x3c>
 80053fc:	4622      	mov	r2, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 fe3b 	bl	800607a <__swbuf_r>
 8005404:	3001      	adds	r0, #1
 8005406:	d1e7      	bne.n	80053d8 <_puts_r+0x68>
 8005408:	e7ce      	b.n	80053a8 <_puts_r+0x38>
 800540a:	3e01      	subs	r6, #1
 800540c:	e7e4      	b.n	80053d8 <_puts_r+0x68>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	6022      	str	r2, [r4, #0]
 8005414:	220a      	movs	r2, #10
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	e7ee      	b.n	80053f8 <_puts_r+0x88>
	...

0800541c <puts>:
 800541c:	4b02      	ldr	r3, [pc, #8]	@ (8005428 <puts+0xc>)
 800541e:	4601      	mov	r1, r0
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	f7ff bfa5 	b.w	8005370 <_puts_r>
 8005426:	bf00      	nop
 8005428:	24000030 	.word	0x24000030

0800542c <memset>:
 800542c:	4402      	add	r2, r0
 800542e:	4603      	mov	r3, r0
 8005430:	4293      	cmp	r3, r2
 8005432:	d100      	bne.n	8005436 <memset+0xa>
 8005434:	4770      	bx	lr
 8005436:	f803 1b01 	strb.w	r1, [r3], #1
 800543a:	e7f9      	b.n	8005430 <memset+0x4>

0800543c <__errno>:
 800543c:	4b01      	ldr	r3, [pc, #4]	@ (8005444 <__errno+0x8>)
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	24000030 	.word	0x24000030

08005448 <__libc_init_array>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4d0d      	ldr	r5, [pc, #52]	@ (8005480 <__libc_init_array+0x38>)
 800544c:	4c0d      	ldr	r4, [pc, #52]	@ (8005484 <__libc_init_array+0x3c>)
 800544e:	1b64      	subs	r4, r4, r5
 8005450:	10a4      	asrs	r4, r4, #2
 8005452:	2600      	movs	r6, #0
 8005454:	42a6      	cmp	r6, r4
 8005456:	d109      	bne.n	800546c <__libc_init_array+0x24>
 8005458:	4d0b      	ldr	r5, [pc, #44]	@ (8005488 <__libc_init_array+0x40>)
 800545a:	4c0c      	ldr	r4, [pc, #48]	@ (800548c <__libc_init_array+0x44>)
 800545c:	f000 fff6 	bl	800644c <_init>
 8005460:	1b64      	subs	r4, r4, r5
 8005462:	10a4      	asrs	r4, r4, #2
 8005464:	2600      	movs	r6, #0
 8005466:	42a6      	cmp	r6, r4
 8005468:	d105      	bne.n	8005476 <__libc_init_array+0x2e>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005470:	4798      	blx	r3
 8005472:	3601      	adds	r6, #1
 8005474:	e7ee      	b.n	8005454 <__libc_init_array+0xc>
 8005476:	f855 3b04 	ldr.w	r3, [r5], #4
 800547a:	4798      	blx	r3
 800547c:	3601      	adds	r6, #1
 800547e:	e7f2      	b.n	8005466 <__libc_init_array+0x1e>
 8005480:	0800650c 	.word	0x0800650c
 8005484:	0800650c 	.word	0x0800650c
 8005488:	0800650c 	.word	0x0800650c
 800548c:	08006510 	.word	0x08006510

08005490 <__retarget_lock_init_recursive>:
 8005490:	4770      	bx	lr

08005492 <__retarget_lock_acquire_recursive>:
 8005492:	4770      	bx	lr

08005494 <__retarget_lock_release_recursive>:
 8005494:	4770      	bx	lr

08005496 <__ssputs_r>:
 8005496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800549a:	688e      	ldr	r6, [r1, #8]
 800549c:	461f      	mov	r7, r3
 800549e:	42be      	cmp	r6, r7
 80054a0:	680b      	ldr	r3, [r1, #0]
 80054a2:	4682      	mov	sl, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	4690      	mov	r8, r2
 80054a8:	d82d      	bhi.n	8005506 <__ssputs_r+0x70>
 80054aa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054ae:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054b2:	d026      	beq.n	8005502 <__ssputs_r+0x6c>
 80054b4:	6965      	ldr	r5, [r4, #20]
 80054b6:	6909      	ldr	r1, [r1, #16]
 80054b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054bc:	eba3 0901 	sub.w	r9, r3, r1
 80054c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054c4:	1c7b      	adds	r3, r7, #1
 80054c6:	444b      	add	r3, r9
 80054c8:	106d      	asrs	r5, r5, #1
 80054ca:	429d      	cmp	r5, r3
 80054cc:	bf38      	it	cc
 80054ce:	461d      	movcc	r5, r3
 80054d0:	0553      	lsls	r3, r2, #21
 80054d2:	d527      	bpl.n	8005524 <__ssputs_r+0x8e>
 80054d4:	4629      	mov	r1, r5
 80054d6:	f000 fa99 	bl	8005a0c <_malloc_r>
 80054da:	4606      	mov	r6, r0
 80054dc:	b360      	cbz	r0, 8005538 <__ssputs_r+0xa2>
 80054de:	6921      	ldr	r1, [r4, #16]
 80054e0:	464a      	mov	r2, r9
 80054e2:	f000 ff53 	bl	800638c <memcpy>
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f0:	81a3      	strh	r3, [r4, #12]
 80054f2:	6126      	str	r6, [r4, #16]
 80054f4:	6165      	str	r5, [r4, #20]
 80054f6:	444e      	add	r6, r9
 80054f8:	eba5 0509 	sub.w	r5, r5, r9
 80054fc:	6026      	str	r6, [r4, #0]
 80054fe:	60a5      	str	r5, [r4, #8]
 8005500:	463e      	mov	r6, r7
 8005502:	42be      	cmp	r6, r7
 8005504:	d900      	bls.n	8005508 <__ssputs_r+0x72>
 8005506:	463e      	mov	r6, r7
 8005508:	6820      	ldr	r0, [r4, #0]
 800550a:	4632      	mov	r2, r6
 800550c:	4641      	mov	r1, r8
 800550e:	f000 feab 	bl	8006268 <memmove>
 8005512:	68a3      	ldr	r3, [r4, #8]
 8005514:	1b9b      	subs	r3, r3, r6
 8005516:	60a3      	str	r3, [r4, #8]
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	4433      	add	r3, r6
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	2000      	movs	r0, #0
 8005520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005524:	462a      	mov	r2, r5
 8005526:	f000 fd7a 	bl	800601e <_realloc_r>
 800552a:	4606      	mov	r6, r0
 800552c:	2800      	cmp	r0, #0
 800552e:	d1e0      	bne.n	80054f2 <__ssputs_r+0x5c>
 8005530:	6921      	ldr	r1, [r4, #16]
 8005532:	4650      	mov	r0, sl
 8005534:	f000 ff38 	bl	80063a8 <_free_r>
 8005538:	230c      	movs	r3, #12
 800553a:	f8ca 3000 	str.w	r3, [sl]
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800554a:	e7e9      	b.n	8005520 <__ssputs_r+0x8a>

0800554c <_svfiprintf_r>:
 800554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	4698      	mov	r8, r3
 8005552:	898b      	ldrh	r3, [r1, #12]
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	b09d      	sub	sp, #116	@ 0x74
 8005558:	4607      	mov	r7, r0
 800555a:	460d      	mov	r5, r1
 800555c:	4614      	mov	r4, r2
 800555e:	d510      	bpl.n	8005582 <_svfiprintf_r+0x36>
 8005560:	690b      	ldr	r3, [r1, #16]
 8005562:	b973      	cbnz	r3, 8005582 <_svfiprintf_r+0x36>
 8005564:	2140      	movs	r1, #64	@ 0x40
 8005566:	f000 fa51 	bl	8005a0c <_malloc_r>
 800556a:	6028      	str	r0, [r5, #0]
 800556c:	6128      	str	r0, [r5, #16]
 800556e:	b930      	cbnz	r0, 800557e <_svfiprintf_r+0x32>
 8005570:	230c      	movs	r3, #12
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005578:	b01d      	add	sp, #116	@ 0x74
 800557a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557e:	2340      	movs	r3, #64	@ 0x40
 8005580:	616b      	str	r3, [r5, #20]
 8005582:	2300      	movs	r3, #0
 8005584:	9309      	str	r3, [sp, #36]	@ 0x24
 8005586:	2320      	movs	r3, #32
 8005588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800558c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005590:	2330      	movs	r3, #48	@ 0x30
 8005592:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005730 <_svfiprintf_r+0x1e4>
 8005596:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800559a:	f04f 0901 	mov.w	r9, #1
 800559e:	4623      	mov	r3, r4
 80055a0:	469a      	mov	sl, r3
 80055a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055a6:	b10a      	cbz	r2, 80055ac <_svfiprintf_r+0x60>
 80055a8:	2a25      	cmp	r2, #37	@ 0x25
 80055aa:	d1f9      	bne.n	80055a0 <_svfiprintf_r+0x54>
 80055ac:	ebba 0b04 	subs.w	fp, sl, r4
 80055b0:	d00b      	beq.n	80055ca <_svfiprintf_r+0x7e>
 80055b2:	465b      	mov	r3, fp
 80055b4:	4622      	mov	r2, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	4638      	mov	r0, r7
 80055ba:	f7ff ff6c 	bl	8005496 <__ssputs_r>
 80055be:	3001      	adds	r0, #1
 80055c0:	f000 80a7 	beq.w	8005712 <_svfiprintf_r+0x1c6>
 80055c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055c6:	445a      	add	r2, fp
 80055c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80055ca:	f89a 3000 	ldrb.w	r3, [sl]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 809f 	beq.w	8005712 <_svfiprintf_r+0x1c6>
 80055d4:	2300      	movs	r3, #0
 80055d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055de:	f10a 0a01 	add.w	sl, sl, #1
 80055e2:	9304      	str	r3, [sp, #16]
 80055e4:	9307      	str	r3, [sp, #28]
 80055e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80055ec:	4654      	mov	r4, sl
 80055ee:	2205      	movs	r2, #5
 80055f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f4:	484e      	ldr	r0, [pc, #312]	@ (8005730 <_svfiprintf_r+0x1e4>)
 80055f6:	f7fa fe73 	bl	80002e0 <memchr>
 80055fa:	9a04      	ldr	r2, [sp, #16]
 80055fc:	b9d8      	cbnz	r0, 8005636 <_svfiprintf_r+0xea>
 80055fe:	06d0      	lsls	r0, r2, #27
 8005600:	bf44      	itt	mi
 8005602:	2320      	movmi	r3, #32
 8005604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005608:	0711      	lsls	r1, r2, #28
 800560a:	bf44      	itt	mi
 800560c:	232b      	movmi	r3, #43	@ 0x2b
 800560e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005612:	f89a 3000 	ldrb.w	r3, [sl]
 8005616:	2b2a      	cmp	r3, #42	@ 0x2a
 8005618:	d015      	beq.n	8005646 <_svfiprintf_r+0xfa>
 800561a:	9a07      	ldr	r2, [sp, #28]
 800561c:	4654      	mov	r4, sl
 800561e:	2000      	movs	r0, #0
 8005620:	f04f 0c0a 	mov.w	ip, #10
 8005624:	4621      	mov	r1, r4
 8005626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800562a:	3b30      	subs	r3, #48	@ 0x30
 800562c:	2b09      	cmp	r3, #9
 800562e:	d94b      	bls.n	80056c8 <_svfiprintf_r+0x17c>
 8005630:	b1b0      	cbz	r0, 8005660 <_svfiprintf_r+0x114>
 8005632:	9207      	str	r2, [sp, #28]
 8005634:	e014      	b.n	8005660 <_svfiprintf_r+0x114>
 8005636:	eba0 0308 	sub.w	r3, r0, r8
 800563a:	fa09 f303 	lsl.w	r3, r9, r3
 800563e:	4313      	orrs	r3, r2
 8005640:	9304      	str	r3, [sp, #16]
 8005642:	46a2      	mov	sl, r4
 8005644:	e7d2      	b.n	80055ec <_svfiprintf_r+0xa0>
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	1d19      	adds	r1, r3, #4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	9103      	str	r1, [sp, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	bfbb      	ittet	lt
 8005652:	425b      	neglt	r3, r3
 8005654:	f042 0202 	orrlt.w	r2, r2, #2
 8005658:	9307      	strge	r3, [sp, #28]
 800565a:	9307      	strlt	r3, [sp, #28]
 800565c:	bfb8      	it	lt
 800565e:	9204      	strlt	r2, [sp, #16]
 8005660:	7823      	ldrb	r3, [r4, #0]
 8005662:	2b2e      	cmp	r3, #46	@ 0x2e
 8005664:	d10a      	bne.n	800567c <_svfiprintf_r+0x130>
 8005666:	7863      	ldrb	r3, [r4, #1]
 8005668:	2b2a      	cmp	r3, #42	@ 0x2a
 800566a:	d132      	bne.n	80056d2 <_svfiprintf_r+0x186>
 800566c:	9b03      	ldr	r3, [sp, #12]
 800566e:	1d1a      	adds	r2, r3, #4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	9203      	str	r2, [sp, #12]
 8005674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005678:	3402      	adds	r4, #2
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005740 <_svfiprintf_r+0x1f4>
 8005680:	7821      	ldrb	r1, [r4, #0]
 8005682:	2203      	movs	r2, #3
 8005684:	4650      	mov	r0, sl
 8005686:	f7fa fe2b 	bl	80002e0 <memchr>
 800568a:	b138      	cbz	r0, 800569c <_svfiprintf_r+0x150>
 800568c:	9b04      	ldr	r3, [sp, #16]
 800568e:	eba0 000a 	sub.w	r0, r0, sl
 8005692:	2240      	movs	r2, #64	@ 0x40
 8005694:	4082      	lsls	r2, r0
 8005696:	4313      	orrs	r3, r2
 8005698:	3401      	adds	r4, #1
 800569a:	9304      	str	r3, [sp, #16]
 800569c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a0:	4824      	ldr	r0, [pc, #144]	@ (8005734 <_svfiprintf_r+0x1e8>)
 80056a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056a6:	2206      	movs	r2, #6
 80056a8:	f7fa fe1a 	bl	80002e0 <memchr>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d036      	beq.n	800571e <_svfiprintf_r+0x1d2>
 80056b0:	4b21      	ldr	r3, [pc, #132]	@ (8005738 <_svfiprintf_r+0x1ec>)
 80056b2:	bb1b      	cbnz	r3, 80056fc <_svfiprintf_r+0x1b0>
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	3307      	adds	r3, #7
 80056b8:	f023 0307 	bic.w	r3, r3, #7
 80056bc:	3308      	adds	r3, #8
 80056be:	9303      	str	r3, [sp, #12]
 80056c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056c2:	4433      	add	r3, r6
 80056c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c6:	e76a      	b.n	800559e <_svfiprintf_r+0x52>
 80056c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80056cc:	460c      	mov	r4, r1
 80056ce:	2001      	movs	r0, #1
 80056d0:	e7a8      	b.n	8005624 <_svfiprintf_r+0xd8>
 80056d2:	2300      	movs	r3, #0
 80056d4:	3401      	adds	r4, #1
 80056d6:	9305      	str	r3, [sp, #20]
 80056d8:	4619      	mov	r1, r3
 80056da:	f04f 0c0a 	mov.w	ip, #10
 80056de:	4620      	mov	r0, r4
 80056e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e4:	3a30      	subs	r2, #48	@ 0x30
 80056e6:	2a09      	cmp	r2, #9
 80056e8:	d903      	bls.n	80056f2 <_svfiprintf_r+0x1a6>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0c6      	beq.n	800567c <_svfiprintf_r+0x130>
 80056ee:	9105      	str	r1, [sp, #20]
 80056f0:	e7c4      	b.n	800567c <_svfiprintf_r+0x130>
 80056f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80056f6:	4604      	mov	r4, r0
 80056f8:	2301      	movs	r3, #1
 80056fa:	e7f0      	b.n	80056de <_svfiprintf_r+0x192>
 80056fc:	ab03      	add	r3, sp, #12
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	462a      	mov	r2, r5
 8005702:	4b0e      	ldr	r3, [pc, #56]	@ (800573c <_svfiprintf_r+0x1f0>)
 8005704:	a904      	add	r1, sp, #16
 8005706:	4638      	mov	r0, r7
 8005708:	f3af 8000 	nop.w
 800570c:	1c42      	adds	r2, r0, #1
 800570e:	4606      	mov	r6, r0
 8005710:	d1d6      	bne.n	80056c0 <_svfiprintf_r+0x174>
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	065b      	lsls	r3, r3, #25
 8005716:	f53f af2d 	bmi.w	8005574 <_svfiprintf_r+0x28>
 800571a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800571c:	e72c      	b.n	8005578 <_svfiprintf_r+0x2c>
 800571e:	ab03      	add	r3, sp, #12
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	462a      	mov	r2, r5
 8005724:	4b05      	ldr	r3, [pc, #20]	@ (800573c <_svfiprintf_r+0x1f0>)
 8005726:	a904      	add	r1, sp, #16
 8005728:	4638      	mov	r0, r7
 800572a:	f000 fa5d 	bl	8005be8 <_printf_i>
 800572e:	e7ed      	b.n	800570c <_svfiprintf_r+0x1c0>
 8005730:	080064d0 	.word	0x080064d0
 8005734:	080064da 	.word	0x080064da
 8005738:	00000000 	.word	0x00000000
 800573c:	08005497 	.word	0x08005497
 8005740:	080064d6 	.word	0x080064d6

08005744 <__sfputc_r>:
 8005744:	6893      	ldr	r3, [r2, #8]
 8005746:	3b01      	subs	r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	b410      	push	{r4}
 800574c:	6093      	str	r3, [r2, #8]
 800574e:	da08      	bge.n	8005762 <__sfputc_r+0x1e>
 8005750:	6994      	ldr	r4, [r2, #24]
 8005752:	42a3      	cmp	r3, r4
 8005754:	db01      	blt.n	800575a <__sfputc_r+0x16>
 8005756:	290a      	cmp	r1, #10
 8005758:	d103      	bne.n	8005762 <__sfputc_r+0x1e>
 800575a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800575e:	f000 bc8c 	b.w	800607a <__swbuf_r>
 8005762:	6813      	ldr	r3, [r2, #0]
 8005764:	1c58      	adds	r0, r3, #1
 8005766:	6010      	str	r0, [r2, #0]
 8005768:	7019      	strb	r1, [r3, #0]
 800576a:	4608      	mov	r0, r1
 800576c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005770:	4770      	bx	lr

08005772 <__sfputs_r>:
 8005772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005774:	4606      	mov	r6, r0
 8005776:	460f      	mov	r7, r1
 8005778:	4614      	mov	r4, r2
 800577a:	18d5      	adds	r5, r2, r3
 800577c:	42ac      	cmp	r4, r5
 800577e:	d101      	bne.n	8005784 <__sfputs_r+0x12>
 8005780:	2000      	movs	r0, #0
 8005782:	e007      	b.n	8005794 <__sfputs_r+0x22>
 8005784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005788:	463a      	mov	r2, r7
 800578a:	4630      	mov	r0, r6
 800578c:	f7ff ffda 	bl	8005744 <__sfputc_r>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d1f3      	bne.n	800577c <__sfputs_r+0xa>
 8005794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005798 <_vfiprintf_r>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	460d      	mov	r5, r1
 800579e:	b09d      	sub	sp, #116	@ 0x74
 80057a0:	4614      	mov	r4, r2
 80057a2:	4698      	mov	r8, r3
 80057a4:	4606      	mov	r6, r0
 80057a6:	b118      	cbz	r0, 80057b0 <_vfiprintf_r+0x18>
 80057a8:	6a03      	ldr	r3, [r0, #32]
 80057aa:	b90b      	cbnz	r3, 80057b0 <_vfiprintf_r+0x18>
 80057ac:	f7ff fd98 	bl	80052e0 <__sinit>
 80057b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057b2:	07d9      	lsls	r1, r3, #31
 80057b4:	d405      	bmi.n	80057c2 <_vfiprintf_r+0x2a>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	059a      	lsls	r2, r3, #22
 80057ba:	d402      	bmi.n	80057c2 <_vfiprintf_r+0x2a>
 80057bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057be:	f7ff fe68 	bl	8005492 <__retarget_lock_acquire_recursive>
 80057c2:	89ab      	ldrh	r3, [r5, #12]
 80057c4:	071b      	lsls	r3, r3, #28
 80057c6:	d501      	bpl.n	80057cc <_vfiprintf_r+0x34>
 80057c8:	692b      	ldr	r3, [r5, #16]
 80057ca:	b99b      	cbnz	r3, 80057f4 <_vfiprintf_r+0x5c>
 80057cc:	4629      	mov	r1, r5
 80057ce:	4630      	mov	r0, r6
 80057d0:	f000 fc92 	bl	80060f8 <__swsetup_r>
 80057d4:	b170      	cbz	r0, 80057f4 <_vfiprintf_r+0x5c>
 80057d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057d8:	07dc      	lsls	r4, r3, #31
 80057da:	d504      	bpl.n	80057e6 <_vfiprintf_r+0x4e>
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057e0:	b01d      	add	sp, #116	@ 0x74
 80057e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e6:	89ab      	ldrh	r3, [r5, #12]
 80057e8:	0598      	lsls	r0, r3, #22
 80057ea:	d4f7      	bmi.n	80057dc <_vfiprintf_r+0x44>
 80057ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057ee:	f7ff fe51 	bl	8005494 <__retarget_lock_release_recursive>
 80057f2:	e7f3      	b.n	80057dc <_vfiprintf_r+0x44>
 80057f4:	2300      	movs	r3, #0
 80057f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f8:	2320      	movs	r3, #32
 80057fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005802:	2330      	movs	r3, #48	@ 0x30
 8005804:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80059b4 <_vfiprintf_r+0x21c>
 8005808:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800580c:	f04f 0901 	mov.w	r9, #1
 8005810:	4623      	mov	r3, r4
 8005812:	469a      	mov	sl, r3
 8005814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005818:	b10a      	cbz	r2, 800581e <_vfiprintf_r+0x86>
 800581a:	2a25      	cmp	r2, #37	@ 0x25
 800581c:	d1f9      	bne.n	8005812 <_vfiprintf_r+0x7a>
 800581e:	ebba 0b04 	subs.w	fp, sl, r4
 8005822:	d00b      	beq.n	800583c <_vfiprintf_r+0xa4>
 8005824:	465b      	mov	r3, fp
 8005826:	4622      	mov	r2, r4
 8005828:	4629      	mov	r1, r5
 800582a:	4630      	mov	r0, r6
 800582c:	f7ff ffa1 	bl	8005772 <__sfputs_r>
 8005830:	3001      	adds	r0, #1
 8005832:	f000 80a7 	beq.w	8005984 <_vfiprintf_r+0x1ec>
 8005836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005838:	445a      	add	r2, fp
 800583a:	9209      	str	r2, [sp, #36]	@ 0x24
 800583c:	f89a 3000 	ldrb.w	r3, [sl]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 809f 	beq.w	8005984 <_vfiprintf_r+0x1ec>
 8005846:	2300      	movs	r3, #0
 8005848:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800584c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005850:	f10a 0a01 	add.w	sl, sl, #1
 8005854:	9304      	str	r3, [sp, #16]
 8005856:	9307      	str	r3, [sp, #28]
 8005858:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800585c:	931a      	str	r3, [sp, #104]	@ 0x68
 800585e:	4654      	mov	r4, sl
 8005860:	2205      	movs	r2, #5
 8005862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005866:	4853      	ldr	r0, [pc, #332]	@ (80059b4 <_vfiprintf_r+0x21c>)
 8005868:	f7fa fd3a 	bl	80002e0 <memchr>
 800586c:	9a04      	ldr	r2, [sp, #16]
 800586e:	b9d8      	cbnz	r0, 80058a8 <_vfiprintf_r+0x110>
 8005870:	06d1      	lsls	r1, r2, #27
 8005872:	bf44      	itt	mi
 8005874:	2320      	movmi	r3, #32
 8005876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800587a:	0713      	lsls	r3, r2, #28
 800587c:	bf44      	itt	mi
 800587e:	232b      	movmi	r3, #43	@ 0x2b
 8005880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005884:	f89a 3000 	ldrb.w	r3, [sl]
 8005888:	2b2a      	cmp	r3, #42	@ 0x2a
 800588a:	d015      	beq.n	80058b8 <_vfiprintf_r+0x120>
 800588c:	9a07      	ldr	r2, [sp, #28]
 800588e:	4654      	mov	r4, sl
 8005890:	2000      	movs	r0, #0
 8005892:	f04f 0c0a 	mov.w	ip, #10
 8005896:	4621      	mov	r1, r4
 8005898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800589c:	3b30      	subs	r3, #48	@ 0x30
 800589e:	2b09      	cmp	r3, #9
 80058a0:	d94b      	bls.n	800593a <_vfiprintf_r+0x1a2>
 80058a2:	b1b0      	cbz	r0, 80058d2 <_vfiprintf_r+0x13a>
 80058a4:	9207      	str	r2, [sp, #28]
 80058a6:	e014      	b.n	80058d2 <_vfiprintf_r+0x13a>
 80058a8:	eba0 0308 	sub.w	r3, r0, r8
 80058ac:	fa09 f303 	lsl.w	r3, r9, r3
 80058b0:	4313      	orrs	r3, r2
 80058b2:	9304      	str	r3, [sp, #16]
 80058b4:	46a2      	mov	sl, r4
 80058b6:	e7d2      	b.n	800585e <_vfiprintf_r+0xc6>
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	1d19      	adds	r1, r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	9103      	str	r1, [sp, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bfbb      	ittet	lt
 80058c4:	425b      	neglt	r3, r3
 80058c6:	f042 0202 	orrlt.w	r2, r2, #2
 80058ca:	9307      	strge	r3, [sp, #28]
 80058cc:	9307      	strlt	r3, [sp, #28]
 80058ce:	bfb8      	it	lt
 80058d0:	9204      	strlt	r2, [sp, #16]
 80058d2:	7823      	ldrb	r3, [r4, #0]
 80058d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80058d6:	d10a      	bne.n	80058ee <_vfiprintf_r+0x156>
 80058d8:	7863      	ldrb	r3, [r4, #1]
 80058da:	2b2a      	cmp	r3, #42	@ 0x2a
 80058dc:	d132      	bne.n	8005944 <_vfiprintf_r+0x1ac>
 80058de:	9b03      	ldr	r3, [sp, #12]
 80058e0:	1d1a      	adds	r2, r3, #4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	9203      	str	r2, [sp, #12]
 80058e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058ea:	3402      	adds	r4, #2
 80058ec:	9305      	str	r3, [sp, #20]
 80058ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80059c4 <_vfiprintf_r+0x22c>
 80058f2:	7821      	ldrb	r1, [r4, #0]
 80058f4:	2203      	movs	r2, #3
 80058f6:	4650      	mov	r0, sl
 80058f8:	f7fa fcf2 	bl	80002e0 <memchr>
 80058fc:	b138      	cbz	r0, 800590e <_vfiprintf_r+0x176>
 80058fe:	9b04      	ldr	r3, [sp, #16]
 8005900:	eba0 000a 	sub.w	r0, r0, sl
 8005904:	2240      	movs	r2, #64	@ 0x40
 8005906:	4082      	lsls	r2, r0
 8005908:	4313      	orrs	r3, r2
 800590a:	3401      	adds	r4, #1
 800590c:	9304      	str	r3, [sp, #16]
 800590e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005912:	4829      	ldr	r0, [pc, #164]	@ (80059b8 <_vfiprintf_r+0x220>)
 8005914:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005918:	2206      	movs	r2, #6
 800591a:	f7fa fce1 	bl	80002e0 <memchr>
 800591e:	2800      	cmp	r0, #0
 8005920:	d03f      	beq.n	80059a2 <_vfiprintf_r+0x20a>
 8005922:	4b26      	ldr	r3, [pc, #152]	@ (80059bc <_vfiprintf_r+0x224>)
 8005924:	bb1b      	cbnz	r3, 800596e <_vfiprintf_r+0x1d6>
 8005926:	9b03      	ldr	r3, [sp, #12]
 8005928:	3307      	adds	r3, #7
 800592a:	f023 0307 	bic.w	r3, r3, #7
 800592e:	3308      	adds	r3, #8
 8005930:	9303      	str	r3, [sp, #12]
 8005932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005934:	443b      	add	r3, r7
 8005936:	9309      	str	r3, [sp, #36]	@ 0x24
 8005938:	e76a      	b.n	8005810 <_vfiprintf_r+0x78>
 800593a:	fb0c 3202 	mla	r2, ip, r2, r3
 800593e:	460c      	mov	r4, r1
 8005940:	2001      	movs	r0, #1
 8005942:	e7a8      	b.n	8005896 <_vfiprintf_r+0xfe>
 8005944:	2300      	movs	r3, #0
 8005946:	3401      	adds	r4, #1
 8005948:	9305      	str	r3, [sp, #20]
 800594a:	4619      	mov	r1, r3
 800594c:	f04f 0c0a 	mov.w	ip, #10
 8005950:	4620      	mov	r0, r4
 8005952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005956:	3a30      	subs	r2, #48	@ 0x30
 8005958:	2a09      	cmp	r2, #9
 800595a:	d903      	bls.n	8005964 <_vfiprintf_r+0x1cc>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0c6      	beq.n	80058ee <_vfiprintf_r+0x156>
 8005960:	9105      	str	r1, [sp, #20]
 8005962:	e7c4      	b.n	80058ee <_vfiprintf_r+0x156>
 8005964:	fb0c 2101 	mla	r1, ip, r1, r2
 8005968:	4604      	mov	r4, r0
 800596a:	2301      	movs	r3, #1
 800596c:	e7f0      	b.n	8005950 <_vfiprintf_r+0x1b8>
 800596e:	ab03      	add	r3, sp, #12
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	462a      	mov	r2, r5
 8005974:	4b12      	ldr	r3, [pc, #72]	@ (80059c0 <_vfiprintf_r+0x228>)
 8005976:	a904      	add	r1, sp, #16
 8005978:	4630      	mov	r0, r6
 800597a:	f3af 8000 	nop.w
 800597e:	4607      	mov	r7, r0
 8005980:	1c78      	adds	r0, r7, #1
 8005982:	d1d6      	bne.n	8005932 <_vfiprintf_r+0x19a>
 8005984:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005986:	07d9      	lsls	r1, r3, #31
 8005988:	d405      	bmi.n	8005996 <_vfiprintf_r+0x1fe>
 800598a:	89ab      	ldrh	r3, [r5, #12]
 800598c:	059a      	lsls	r2, r3, #22
 800598e:	d402      	bmi.n	8005996 <_vfiprintf_r+0x1fe>
 8005990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005992:	f7ff fd7f 	bl	8005494 <__retarget_lock_release_recursive>
 8005996:	89ab      	ldrh	r3, [r5, #12]
 8005998:	065b      	lsls	r3, r3, #25
 800599a:	f53f af1f 	bmi.w	80057dc <_vfiprintf_r+0x44>
 800599e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059a0:	e71e      	b.n	80057e0 <_vfiprintf_r+0x48>
 80059a2:	ab03      	add	r3, sp, #12
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	462a      	mov	r2, r5
 80059a8:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <_vfiprintf_r+0x228>)
 80059aa:	a904      	add	r1, sp, #16
 80059ac:	4630      	mov	r0, r6
 80059ae:	f000 f91b 	bl	8005be8 <_printf_i>
 80059b2:	e7e4      	b.n	800597e <_vfiprintf_r+0x1e6>
 80059b4:	080064d0 	.word	0x080064d0
 80059b8:	080064da 	.word	0x080064da
 80059bc:	00000000 	.word	0x00000000
 80059c0:	08005773 	.word	0x08005773
 80059c4:	080064d6 	.word	0x080064d6

080059c8 <sbrk_aligned>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005a08 <sbrk_aligned+0x40>)
 80059cc:	460c      	mov	r4, r1
 80059ce:	6831      	ldr	r1, [r6, #0]
 80059d0:	4605      	mov	r5, r0
 80059d2:	b911      	cbnz	r1, 80059da <sbrk_aligned+0x12>
 80059d4:	f000 fcb8 	bl	8006348 <_sbrk_r>
 80059d8:	6030      	str	r0, [r6, #0]
 80059da:	4621      	mov	r1, r4
 80059dc:	4628      	mov	r0, r5
 80059de:	f000 fcb3 	bl	8006348 <_sbrk_r>
 80059e2:	1c43      	adds	r3, r0, #1
 80059e4:	d103      	bne.n	80059ee <sbrk_aligned+0x26>
 80059e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80059ea:	4620      	mov	r0, r4
 80059ec:	bd70      	pop	{r4, r5, r6, pc}
 80059ee:	1cc4      	adds	r4, r0, #3
 80059f0:	f024 0403 	bic.w	r4, r4, #3
 80059f4:	42a0      	cmp	r0, r4
 80059f6:	d0f8      	beq.n	80059ea <sbrk_aligned+0x22>
 80059f8:	1a21      	subs	r1, r4, r0
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 fca4 	bl	8006348 <_sbrk_r>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d1f2      	bne.n	80059ea <sbrk_aligned+0x22>
 8005a04:	e7ef      	b.n	80059e6 <sbrk_aligned+0x1e>
 8005a06:	bf00      	nop
 8005a08:	24000ad4 	.word	0x24000ad4

08005a0c <_malloc_r>:
 8005a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a10:	1ccd      	adds	r5, r1, #3
 8005a12:	f025 0503 	bic.w	r5, r5, #3
 8005a16:	3508      	adds	r5, #8
 8005a18:	2d0c      	cmp	r5, #12
 8005a1a:	bf38      	it	cc
 8005a1c:	250c      	movcc	r5, #12
 8005a1e:	2d00      	cmp	r5, #0
 8005a20:	4606      	mov	r6, r0
 8005a22:	db01      	blt.n	8005a28 <_malloc_r+0x1c>
 8005a24:	42a9      	cmp	r1, r5
 8005a26:	d904      	bls.n	8005a32 <_malloc_r+0x26>
 8005a28:	230c      	movs	r3, #12
 8005a2a:	6033      	str	r3, [r6, #0]
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b08 <_malloc_r+0xfc>
 8005a36:	f000 faa3 	bl	8005f80 <__malloc_lock>
 8005a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a3e:	461c      	mov	r4, r3
 8005a40:	bb44      	cbnz	r4, 8005a94 <_malloc_r+0x88>
 8005a42:	4629      	mov	r1, r5
 8005a44:	4630      	mov	r0, r6
 8005a46:	f7ff ffbf 	bl	80059c8 <sbrk_aligned>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	d158      	bne.n	8005b02 <_malloc_r+0xf6>
 8005a50:	f8d8 4000 	ldr.w	r4, [r8]
 8005a54:	4627      	mov	r7, r4
 8005a56:	2f00      	cmp	r7, #0
 8005a58:	d143      	bne.n	8005ae2 <_malloc_r+0xd6>
 8005a5a:	2c00      	cmp	r4, #0
 8005a5c:	d04b      	beq.n	8005af6 <_malloc_r+0xea>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	4639      	mov	r1, r7
 8005a62:	4630      	mov	r0, r6
 8005a64:	eb04 0903 	add.w	r9, r4, r3
 8005a68:	f000 fc6e 	bl	8006348 <_sbrk_r>
 8005a6c:	4581      	cmp	r9, r0
 8005a6e:	d142      	bne.n	8005af6 <_malloc_r+0xea>
 8005a70:	6821      	ldr	r1, [r4, #0]
 8005a72:	1a6d      	subs	r5, r5, r1
 8005a74:	4629      	mov	r1, r5
 8005a76:	4630      	mov	r0, r6
 8005a78:	f7ff ffa6 	bl	80059c8 <sbrk_aligned>
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d03a      	beq.n	8005af6 <_malloc_r+0xea>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	442b      	add	r3, r5
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	f8d8 3000 	ldr.w	r3, [r8]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	bb62      	cbnz	r2, 8005ae8 <_malloc_r+0xdc>
 8005a8e:	f8c8 7000 	str.w	r7, [r8]
 8005a92:	e00f      	b.n	8005ab4 <_malloc_r+0xa8>
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	1b52      	subs	r2, r2, r5
 8005a98:	d420      	bmi.n	8005adc <_malloc_r+0xd0>
 8005a9a:	2a0b      	cmp	r2, #11
 8005a9c:	d917      	bls.n	8005ace <_malloc_r+0xc2>
 8005a9e:	1961      	adds	r1, r4, r5
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	6025      	str	r5, [r4, #0]
 8005aa4:	bf18      	it	ne
 8005aa6:	6059      	strne	r1, [r3, #4]
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	bf08      	it	eq
 8005aac:	f8c8 1000 	streq.w	r1, [r8]
 8005ab0:	5162      	str	r2, [r4, r5]
 8005ab2:	604b      	str	r3, [r1, #4]
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f000 fa69 	bl	8005f8c <__malloc_unlock>
 8005aba:	f104 000b 	add.w	r0, r4, #11
 8005abe:	1d23      	adds	r3, r4, #4
 8005ac0:	f020 0007 	bic.w	r0, r0, #7
 8005ac4:	1ac2      	subs	r2, r0, r3
 8005ac6:	bf1c      	itt	ne
 8005ac8:	1a1b      	subne	r3, r3, r0
 8005aca:	50a3      	strne	r3, [r4, r2]
 8005acc:	e7af      	b.n	8005a2e <_malloc_r+0x22>
 8005ace:	6862      	ldr	r2, [r4, #4]
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	bf0c      	ite	eq
 8005ad4:	f8c8 2000 	streq.w	r2, [r8]
 8005ad8:	605a      	strne	r2, [r3, #4]
 8005ada:	e7eb      	b.n	8005ab4 <_malloc_r+0xa8>
 8005adc:	4623      	mov	r3, r4
 8005ade:	6864      	ldr	r4, [r4, #4]
 8005ae0:	e7ae      	b.n	8005a40 <_malloc_r+0x34>
 8005ae2:	463c      	mov	r4, r7
 8005ae4:	687f      	ldr	r7, [r7, #4]
 8005ae6:	e7b6      	b.n	8005a56 <_malloc_r+0x4a>
 8005ae8:	461a      	mov	r2, r3
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	d1fb      	bne.n	8005ae8 <_malloc_r+0xdc>
 8005af0:	2300      	movs	r3, #0
 8005af2:	6053      	str	r3, [r2, #4]
 8005af4:	e7de      	b.n	8005ab4 <_malloc_r+0xa8>
 8005af6:	230c      	movs	r3, #12
 8005af8:	6033      	str	r3, [r6, #0]
 8005afa:	4630      	mov	r0, r6
 8005afc:	f000 fa46 	bl	8005f8c <__malloc_unlock>
 8005b00:	e794      	b.n	8005a2c <_malloc_r+0x20>
 8005b02:	6005      	str	r5, [r0, #0]
 8005b04:	e7d6      	b.n	8005ab4 <_malloc_r+0xa8>
 8005b06:	bf00      	nop
 8005b08:	24000ad8 	.word	0x24000ad8

08005b0c <_printf_common>:
 8005b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b10:	4616      	mov	r6, r2
 8005b12:	4698      	mov	r8, r3
 8005b14:	688a      	ldr	r2, [r1, #8]
 8005b16:	690b      	ldr	r3, [r1, #16]
 8005b18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	bfb8      	it	lt
 8005b20:	4613      	movlt	r3, r2
 8005b22:	6033      	str	r3, [r6, #0]
 8005b24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b28:	4607      	mov	r7, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	b10a      	cbz	r2, 8005b32 <_printf_common+0x26>
 8005b2e:	3301      	adds	r3, #1
 8005b30:	6033      	str	r3, [r6, #0]
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	0699      	lsls	r1, r3, #26
 8005b36:	bf42      	ittt	mi
 8005b38:	6833      	ldrmi	r3, [r6, #0]
 8005b3a:	3302      	addmi	r3, #2
 8005b3c:	6033      	strmi	r3, [r6, #0]
 8005b3e:	6825      	ldr	r5, [r4, #0]
 8005b40:	f015 0506 	ands.w	r5, r5, #6
 8005b44:	d106      	bne.n	8005b54 <_printf_common+0x48>
 8005b46:	f104 0a19 	add.w	sl, r4, #25
 8005b4a:	68e3      	ldr	r3, [r4, #12]
 8005b4c:	6832      	ldr	r2, [r6, #0]
 8005b4e:	1a9b      	subs	r3, r3, r2
 8005b50:	42ab      	cmp	r3, r5
 8005b52:	dc26      	bgt.n	8005ba2 <_printf_common+0x96>
 8005b54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b58:	6822      	ldr	r2, [r4, #0]
 8005b5a:	3b00      	subs	r3, #0
 8005b5c:	bf18      	it	ne
 8005b5e:	2301      	movne	r3, #1
 8005b60:	0692      	lsls	r2, r2, #26
 8005b62:	d42b      	bmi.n	8005bbc <_printf_common+0xb0>
 8005b64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b68:	4641      	mov	r1, r8
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	47c8      	blx	r9
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d01e      	beq.n	8005bb0 <_printf_common+0xa4>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	6922      	ldr	r2, [r4, #16]
 8005b76:	f003 0306 	and.w	r3, r3, #6
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	bf02      	ittt	eq
 8005b7e:	68e5      	ldreq	r5, [r4, #12]
 8005b80:	6833      	ldreq	r3, [r6, #0]
 8005b82:	1aed      	subeq	r5, r5, r3
 8005b84:	68a3      	ldr	r3, [r4, #8]
 8005b86:	bf0c      	ite	eq
 8005b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b8c:	2500      	movne	r5, #0
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	bfc4      	itt	gt
 8005b92:	1a9b      	subgt	r3, r3, r2
 8005b94:	18ed      	addgt	r5, r5, r3
 8005b96:	2600      	movs	r6, #0
 8005b98:	341a      	adds	r4, #26
 8005b9a:	42b5      	cmp	r5, r6
 8005b9c:	d11a      	bne.n	8005bd4 <_printf_common+0xc8>
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	e008      	b.n	8005bb4 <_printf_common+0xa8>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4652      	mov	r2, sl
 8005ba6:	4641      	mov	r1, r8
 8005ba8:	4638      	mov	r0, r7
 8005baa:	47c8      	blx	r9
 8005bac:	3001      	adds	r0, #1
 8005bae:	d103      	bne.n	8005bb8 <_printf_common+0xac>
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb8:	3501      	adds	r5, #1
 8005bba:	e7c6      	b.n	8005b4a <_printf_common+0x3e>
 8005bbc:	18e1      	adds	r1, r4, r3
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	2030      	movs	r0, #48	@ 0x30
 8005bc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bc6:	4422      	add	r2, r4
 8005bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bd0:	3302      	adds	r3, #2
 8005bd2:	e7c7      	b.n	8005b64 <_printf_common+0x58>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	4641      	mov	r1, r8
 8005bda:	4638      	mov	r0, r7
 8005bdc:	47c8      	blx	r9
 8005bde:	3001      	adds	r0, #1
 8005be0:	d0e6      	beq.n	8005bb0 <_printf_common+0xa4>
 8005be2:	3601      	adds	r6, #1
 8005be4:	e7d9      	b.n	8005b9a <_printf_common+0x8e>
	...

08005be8 <_printf_i>:
 8005be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bec:	7e0f      	ldrb	r7, [r1, #24]
 8005bee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bf0:	2f78      	cmp	r7, #120	@ 0x78
 8005bf2:	4691      	mov	r9, r2
 8005bf4:	4680      	mov	r8, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	469a      	mov	sl, r3
 8005bfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bfe:	d807      	bhi.n	8005c10 <_printf_i+0x28>
 8005c00:	2f62      	cmp	r7, #98	@ 0x62
 8005c02:	d80a      	bhi.n	8005c1a <_printf_i+0x32>
 8005c04:	2f00      	cmp	r7, #0
 8005c06:	f000 80d2 	beq.w	8005dae <_printf_i+0x1c6>
 8005c0a:	2f58      	cmp	r7, #88	@ 0x58
 8005c0c:	f000 80b9 	beq.w	8005d82 <_printf_i+0x19a>
 8005c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c18:	e03a      	b.n	8005c90 <_printf_i+0xa8>
 8005c1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c1e:	2b15      	cmp	r3, #21
 8005c20:	d8f6      	bhi.n	8005c10 <_printf_i+0x28>
 8005c22:	a101      	add	r1, pc, #4	@ (adr r1, 8005c28 <_printf_i+0x40>)
 8005c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c28:	08005c81 	.word	0x08005c81
 8005c2c:	08005c95 	.word	0x08005c95
 8005c30:	08005c11 	.word	0x08005c11
 8005c34:	08005c11 	.word	0x08005c11
 8005c38:	08005c11 	.word	0x08005c11
 8005c3c:	08005c11 	.word	0x08005c11
 8005c40:	08005c95 	.word	0x08005c95
 8005c44:	08005c11 	.word	0x08005c11
 8005c48:	08005c11 	.word	0x08005c11
 8005c4c:	08005c11 	.word	0x08005c11
 8005c50:	08005c11 	.word	0x08005c11
 8005c54:	08005d95 	.word	0x08005d95
 8005c58:	08005cbf 	.word	0x08005cbf
 8005c5c:	08005d4f 	.word	0x08005d4f
 8005c60:	08005c11 	.word	0x08005c11
 8005c64:	08005c11 	.word	0x08005c11
 8005c68:	08005db7 	.word	0x08005db7
 8005c6c:	08005c11 	.word	0x08005c11
 8005c70:	08005cbf 	.word	0x08005cbf
 8005c74:	08005c11 	.word	0x08005c11
 8005c78:	08005c11 	.word	0x08005c11
 8005c7c:	08005d57 	.word	0x08005d57
 8005c80:	6833      	ldr	r3, [r6, #0]
 8005c82:	1d1a      	adds	r2, r3, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6032      	str	r2, [r6, #0]
 8005c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c90:	2301      	movs	r3, #1
 8005c92:	e09d      	b.n	8005dd0 <_printf_i+0x1e8>
 8005c94:	6833      	ldr	r3, [r6, #0]
 8005c96:	6820      	ldr	r0, [r4, #0]
 8005c98:	1d19      	adds	r1, r3, #4
 8005c9a:	6031      	str	r1, [r6, #0]
 8005c9c:	0606      	lsls	r6, r0, #24
 8005c9e:	d501      	bpl.n	8005ca4 <_printf_i+0xbc>
 8005ca0:	681d      	ldr	r5, [r3, #0]
 8005ca2:	e003      	b.n	8005cac <_printf_i+0xc4>
 8005ca4:	0645      	lsls	r5, r0, #25
 8005ca6:	d5fb      	bpl.n	8005ca0 <_printf_i+0xb8>
 8005ca8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005cac:	2d00      	cmp	r5, #0
 8005cae:	da03      	bge.n	8005cb8 <_printf_i+0xd0>
 8005cb0:	232d      	movs	r3, #45	@ 0x2d
 8005cb2:	426d      	negs	r5, r5
 8005cb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cb8:	4859      	ldr	r0, [pc, #356]	@ (8005e20 <_printf_i+0x238>)
 8005cba:	230a      	movs	r3, #10
 8005cbc:	e011      	b.n	8005ce2 <_printf_i+0xfa>
 8005cbe:	6821      	ldr	r1, [r4, #0]
 8005cc0:	6833      	ldr	r3, [r6, #0]
 8005cc2:	0608      	lsls	r0, r1, #24
 8005cc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cc8:	d402      	bmi.n	8005cd0 <_printf_i+0xe8>
 8005cca:	0649      	lsls	r1, r1, #25
 8005ccc:	bf48      	it	mi
 8005cce:	b2ad      	uxthmi	r5, r5
 8005cd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cd2:	4853      	ldr	r0, [pc, #332]	@ (8005e20 <_printf_i+0x238>)
 8005cd4:	6033      	str	r3, [r6, #0]
 8005cd6:	bf14      	ite	ne
 8005cd8:	230a      	movne	r3, #10
 8005cda:	2308      	moveq	r3, #8
 8005cdc:	2100      	movs	r1, #0
 8005cde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ce2:	6866      	ldr	r6, [r4, #4]
 8005ce4:	60a6      	str	r6, [r4, #8]
 8005ce6:	2e00      	cmp	r6, #0
 8005ce8:	bfa2      	ittt	ge
 8005cea:	6821      	ldrge	r1, [r4, #0]
 8005cec:	f021 0104 	bicge.w	r1, r1, #4
 8005cf0:	6021      	strge	r1, [r4, #0]
 8005cf2:	b90d      	cbnz	r5, 8005cf8 <_printf_i+0x110>
 8005cf4:	2e00      	cmp	r6, #0
 8005cf6:	d04b      	beq.n	8005d90 <_printf_i+0x1a8>
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cfe:	fb03 5711 	mls	r7, r3, r1, r5
 8005d02:	5dc7      	ldrb	r7, [r0, r7]
 8005d04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d08:	462f      	mov	r7, r5
 8005d0a:	42bb      	cmp	r3, r7
 8005d0c:	460d      	mov	r5, r1
 8005d0e:	d9f4      	bls.n	8005cfa <_printf_i+0x112>
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d10b      	bne.n	8005d2c <_printf_i+0x144>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	07df      	lsls	r7, r3, #31
 8005d18:	d508      	bpl.n	8005d2c <_printf_i+0x144>
 8005d1a:	6923      	ldr	r3, [r4, #16]
 8005d1c:	6861      	ldr	r1, [r4, #4]
 8005d1e:	4299      	cmp	r1, r3
 8005d20:	bfde      	ittt	le
 8005d22:	2330      	movle	r3, #48	@ 0x30
 8005d24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d28:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005d2c:	1b92      	subs	r2, r2, r6
 8005d2e:	6122      	str	r2, [r4, #16]
 8005d30:	f8cd a000 	str.w	sl, [sp]
 8005d34:	464b      	mov	r3, r9
 8005d36:	aa03      	add	r2, sp, #12
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	f7ff fee6 	bl	8005b0c <_printf_common>
 8005d40:	3001      	adds	r0, #1
 8005d42:	d14a      	bne.n	8005dda <_printf_i+0x1f2>
 8005d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d48:	b004      	add	sp, #16
 8005d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	f043 0320 	orr.w	r3, r3, #32
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	4833      	ldr	r0, [pc, #204]	@ (8005e24 <_printf_i+0x23c>)
 8005d58:	2778      	movs	r7, #120	@ 0x78
 8005d5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	6831      	ldr	r1, [r6, #0]
 8005d62:	061f      	lsls	r7, r3, #24
 8005d64:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d68:	d402      	bmi.n	8005d70 <_printf_i+0x188>
 8005d6a:	065f      	lsls	r7, r3, #25
 8005d6c:	bf48      	it	mi
 8005d6e:	b2ad      	uxthmi	r5, r5
 8005d70:	6031      	str	r1, [r6, #0]
 8005d72:	07d9      	lsls	r1, r3, #31
 8005d74:	bf44      	itt	mi
 8005d76:	f043 0320 	orrmi.w	r3, r3, #32
 8005d7a:	6023      	strmi	r3, [r4, #0]
 8005d7c:	b11d      	cbz	r5, 8005d86 <_printf_i+0x19e>
 8005d7e:	2310      	movs	r3, #16
 8005d80:	e7ac      	b.n	8005cdc <_printf_i+0xf4>
 8005d82:	4827      	ldr	r0, [pc, #156]	@ (8005e20 <_printf_i+0x238>)
 8005d84:	e7e9      	b.n	8005d5a <_printf_i+0x172>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	f023 0320 	bic.w	r3, r3, #32
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	e7f6      	b.n	8005d7e <_printf_i+0x196>
 8005d90:	4616      	mov	r6, r2
 8005d92:	e7bd      	b.n	8005d10 <_printf_i+0x128>
 8005d94:	6833      	ldr	r3, [r6, #0]
 8005d96:	6825      	ldr	r5, [r4, #0]
 8005d98:	6961      	ldr	r1, [r4, #20]
 8005d9a:	1d18      	adds	r0, r3, #4
 8005d9c:	6030      	str	r0, [r6, #0]
 8005d9e:	062e      	lsls	r6, r5, #24
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	d501      	bpl.n	8005da8 <_printf_i+0x1c0>
 8005da4:	6019      	str	r1, [r3, #0]
 8005da6:	e002      	b.n	8005dae <_printf_i+0x1c6>
 8005da8:	0668      	lsls	r0, r5, #25
 8005daa:	d5fb      	bpl.n	8005da4 <_printf_i+0x1bc>
 8005dac:	8019      	strh	r1, [r3, #0]
 8005dae:	2300      	movs	r3, #0
 8005db0:	6123      	str	r3, [r4, #16]
 8005db2:	4616      	mov	r6, r2
 8005db4:	e7bc      	b.n	8005d30 <_printf_i+0x148>
 8005db6:	6833      	ldr	r3, [r6, #0]
 8005db8:	1d1a      	adds	r2, r3, #4
 8005dba:	6032      	str	r2, [r6, #0]
 8005dbc:	681e      	ldr	r6, [r3, #0]
 8005dbe:	6862      	ldr	r2, [r4, #4]
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7fa fa8c 	bl	80002e0 <memchr>
 8005dc8:	b108      	cbz	r0, 8005dce <_printf_i+0x1e6>
 8005dca:	1b80      	subs	r0, r0, r6
 8005dcc:	6060      	str	r0, [r4, #4]
 8005dce:	6863      	ldr	r3, [r4, #4]
 8005dd0:	6123      	str	r3, [r4, #16]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dd8:	e7aa      	b.n	8005d30 <_printf_i+0x148>
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	4632      	mov	r2, r6
 8005dde:	4649      	mov	r1, r9
 8005de0:	4640      	mov	r0, r8
 8005de2:	47d0      	blx	sl
 8005de4:	3001      	adds	r0, #1
 8005de6:	d0ad      	beq.n	8005d44 <_printf_i+0x15c>
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	079b      	lsls	r3, r3, #30
 8005dec:	d413      	bmi.n	8005e16 <_printf_i+0x22e>
 8005dee:	68e0      	ldr	r0, [r4, #12]
 8005df0:	9b03      	ldr	r3, [sp, #12]
 8005df2:	4298      	cmp	r0, r3
 8005df4:	bfb8      	it	lt
 8005df6:	4618      	movlt	r0, r3
 8005df8:	e7a6      	b.n	8005d48 <_printf_i+0x160>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	4649      	mov	r1, r9
 8005e00:	4640      	mov	r0, r8
 8005e02:	47d0      	blx	sl
 8005e04:	3001      	adds	r0, #1
 8005e06:	d09d      	beq.n	8005d44 <_printf_i+0x15c>
 8005e08:	3501      	adds	r5, #1
 8005e0a:	68e3      	ldr	r3, [r4, #12]
 8005e0c:	9903      	ldr	r1, [sp, #12]
 8005e0e:	1a5b      	subs	r3, r3, r1
 8005e10:	42ab      	cmp	r3, r5
 8005e12:	dcf2      	bgt.n	8005dfa <_printf_i+0x212>
 8005e14:	e7eb      	b.n	8005dee <_printf_i+0x206>
 8005e16:	2500      	movs	r5, #0
 8005e18:	f104 0619 	add.w	r6, r4, #25
 8005e1c:	e7f5      	b.n	8005e0a <_printf_i+0x222>
 8005e1e:	bf00      	nop
 8005e20:	080064e1 	.word	0x080064e1
 8005e24:	080064f2 	.word	0x080064f2

08005e28 <__sflush_r>:
 8005e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e30:	0716      	lsls	r6, r2, #28
 8005e32:	4605      	mov	r5, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	d454      	bmi.n	8005ee2 <__sflush_r+0xba>
 8005e38:	684b      	ldr	r3, [r1, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dc02      	bgt.n	8005e44 <__sflush_r+0x1c>
 8005e3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	dd48      	ble.n	8005ed6 <__sflush_r+0xae>
 8005e44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	d045      	beq.n	8005ed6 <__sflush_r+0xae>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e50:	682f      	ldr	r7, [r5, #0]
 8005e52:	6a21      	ldr	r1, [r4, #32]
 8005e54:	602b      	str	r3, [r5, #0]
 8005e56:	d030      	beq.n	8005eba <__sflush_r+0x92>
 8005e58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	0759      	lsls	r1, r3, #29
 8005e5e:	d505      	bpl.n	8005e6c <__sflush_r+0x44>
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	1ad2      	subs	r2, r2, r3
 8005e64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e66:	b10b      	cbz	r3, 8005e6c <__sflush_r+0x44>
 8005e68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e6a:	1ad2      	subs	r2, r2, r3
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e70:	6a21      	ldr	r1, [r4, #32]
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b0      	blx	r6
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	d106      	bne.n	8005e8a <__sflush_r+0x62>
 8005e7c:	6829      	ldr	r1, [r5, #0]
 8005e7e:	291d      	cmp	r1, #29
 8005e80:	d82b      	bhi.n	8005eda <__sflush_r+0xb2>
 8005e82:	4a2a      	ldr	r2, [pc, #168]	@ (8005f2c <__sflush_r+0x104>)
 8005e84:	410a      	asrs	r2, r1
 8005e86:	07d6      	lsls	r6, r2, #31
 8005e88:	d427      	bmi.n	8005eda <__sflush_r+0xb2>
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	6062      	str	r2, [r4, #4]
 8005e8e:	04d9      	lsls	r1, r3, #19
 8005e90:	6922      	ldr	r2, [r4, #16]
 8005e92:	6022      	str	r2, [r4, #0]
 8005e94:	d504      	bpl.n	8005ea0 <__sflush_r+0x78>
 8005e96:	1c42      	adds	r2, r0, #1
 8005e98:	d101      	bne.n	8005e9e <__sflush_r+0x76>
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	b903      	cbnz	r3, 8005ea0 <__sflush_r+0x78>
 8005e9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ea2:	602f      	str	r7, [r5, #0]
 8005ea4:	b1b9      	cbz	r1, 8005ed6 <__sflush_r+0xae>
 8005ea6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005eaa:	4299      	cmp	r1, r3
 8005eac:	d002      	beq.n	8005eb4 <__sflush_r+0x8c>
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f000 fa7a 	bl	80063a8 <_free_r>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005eb8:	e00d      	b.n	8005ed6 <__sflush_r+0xae>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	47b0      	blx	r6
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	1c50      	adds	r0, r2, #1
 8005ec4:	d1c9      	bne.n	8005e5a <__sflush_r+0x32>
 8005ec6:	682b      	ldr	r3, [r5, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0c6      	beq.n	8005e5a <__sflush_r+0x32>
 8005ecc:	2b1d      	cmp	r3, #29
 8005ece:	d001      	beq.n	8005ed4 <__sflush_r+0xac>
 8005ed0:	2b16      	cmp	r3, #22
 8005ed2:	d11e      	bne.n	8005f12 <__sflush_r+0xea>
 8005ed4:	602f      	str	r7, [r5, #0]
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	e022      	b.n	8005f20 <__sflush_r+0xf8>
 8005eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ede:	b21b      	sxth	r3, r3
 8005ee0:	e01b      	b.n	8005f1a <__sflush_r+0xf2>
 8005ee2:	690f      	ldr	r7, [r1, #16]
 8005ee4:	2f00      	cmp	r7, #0
 8005ee6:	d0f6      	beq.n	8005ed6 <__sflush_r+0xae>
 8005ee8:	0793      	lsls	r3, r2, #30
 8005eea:	680e      	ldr	r6, [r1, #0]
 8005eec:	bf08      	it	eq
 8005eee:	694b      	ldreq	r3, [r1, #20]
 8005ef0:	600f      	str	r7, [r1, #0]
 8005ef2:	bf18      	it	ne
 8005ef4:	2300      	movne	r3, #0
 8005ef6:	eba6 0807 	sub.w	r8, r6, r7
 8005efa:	608b      	str	r3, [r1, #8]
 8005efc:	f1b8 0f00 	cmp.w	r8, #0
 8005f00:	dde9      	ble.n	8005ed6 <__sflush_r+0xae>
 8005f02:	6a21      	ldr	r1, [r4, #32]
 8005f04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f06:	4643      	mov	r3, r8
 8005f08:	463a      	mov	r2, r7
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b0      	blx	r6
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	dc08      	bgt.n	8005f24 <__sflush_r+0xfc>
 8005f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f1a:	81a3      	strh	r3, [r4, #12]
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f24:	4407      	add	r7, r0
 8005f26:	eba8 0800 	sub.w	r8, r8, r0
 8005f2a:	e7e7      	b.n	8005efc <__sflush_r+0xd4>
 8005f2c:	dfbffffe 	.word	0xdfbffffe

08005f30 <_fflush_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	690b      	ldr	r3, [r1, #16]
 8005f34:	4605      	mov	r5, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	b913      	cbnz	r3, 8005f40 <_fflush_r+0x10>
 8005f3a:	2500      	movs	r5, #0
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	b118      	cbz	r0, 8005f4a <_fflush_r+0x1a>
 8005f42:	6a03      	ldr	r3, [r0, #32]
 8005f44:	b90b      	cbnz	r3, 8005f4a <_fflush_r+0x1a>
 8005f46:	f7ff f9cb 	bl	80052e0 <__sinit>
 8005f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f3      	beq.n	8005f3a <_fflush_r+0xa>
 8005f52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f54:	07d0      	lsls	r0, r2, #31
 8005f56:	d404      	bmi.n	8005f62 <_fflush_r+0x32>
 8005f58:	0599      	lsls	r1, r3, #22
 8005f5a:	d402      	bmi.n	8005f62 <_fflush_r+0x32>
 8005f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f5e:	f7ff fa98 	bl	8005492 <__retarget_lock_acquire_recursive>
 8005f62:	4628      	mov	r0, r5
 8005f64:	4621      	mov	r1, r4
 8005f66:	f7ff ff5f 	bl	8005e28 <__sflush_r>
 8005f6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f6c:	07da      	lsls	r2, r3, #31
 8005f6e:	4605      	mov	r5, r0
 8005f70:	d4e4      	bmi.n	8005f3c <_fflush_r+0xc>
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	059b      	lsls	r3, r3, #22
 8005f76:	d4e1      	bmi.n	8005f3c <_fflush_r+0xc>
 8005f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f7a:	f7ff fa8b 	bl	8005494 <__retarget_lock_release_recursive>
 8005f7e:	e7dd      	b.n	8005f3c <_fflush_r+0xc>

08005f80 <__malloc_lock>:
 8005f80:	4801      	ldr	r0, [pc, #4]	@ (8005f88 <__malloc_lock+0x8>)
 8005f82:	f7ff ba86 	b.w	8005492 <__retarget_lock_acquire_recursive>
 8005f86:	bf00      	nop
 8005f88:	24000ad0 	.word	0x24000ad0

08005f8c <__malloc_unlock>:
 8005f8c:	4801      	ldr	r0, [pc, #4]	@ (8005f94 <__malloc_unlock+0x8>)
 8005f8e:	f7ff ba81 	b.w	8005494 <__retarget_lock_release_recursive>
 8005f92:	bf00      	nop
 8005f94:	24000ad0 	.word	0x24000ad0

08005f98 <__sread>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa0:	f000 f9c0 	bl	8006324 <_read_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	bfab      	itete	ge
 8005fa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005faa:	89a3      	ldrhlt	r3, [r4, #12]
 8005fac:	181b      	addge	r3, r3, r0
 8005fae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fb2:	bfac      	ite	ge
 8005fb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fb6:	81a3      	strhlt	r3, [r4, #12]
 8005fb8:	bd10      	pop	{r4, pc}

08005fba <__swrite>:
 8005fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbe:	461f      	mov	r7, r3
 8005fc0:	898b      	ldrh	r3, [r1, #12]
 8005fc2:	05db      	lsls	r3, r3, #23
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	4616      	mov	r6, r2
 8005fca:	d505      	bpl.n	8005fd8 <__swrite+0x1e>
 8005fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f000 f994 	bl	8006300 <_lseek_r>
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	4628      	mov	r0, r5
 8005fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fee:	f000 b9bb 	b.w	8006368 <_write_r>

08005ff2 <__sseek>:
 8005ff2:	b510      	push	{r4, lr}
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffa:	f000 f981 	bl	8006300 <_lseek_r>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	bf15      	itete	ne
 8006004:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006006:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800600a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800600e:	81a3      	strheq	r3, [r4, #12]
 8006010:	bf18      	it	ne
 8006012:	81a3      	strhne	r3, [r4, #12]
 8006014:	bd10      	pop	{r4, pc}

08006016 <__sclose>:
 8006016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601a:	f000 b93f 	b.w	800629c <_close_r>

0800601e <_realloc_r>:
 800601e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006022:	4680      	mov	r8, r0
 8006024:	4615      	mov	r5, r2
 8006026:	460c      	mov	r4, r1
 8006028:	b921      	cbnz	r1, 8006034 <_realloc_r+0x16>
 800602a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800602e:	4611      	mov	r1, r2
 8006030:	f7ff bcec 	b.w	8005a0c <_malloc_r>
 8006034:	b92a      	cbnz	r2, 8006042 <_realloc_r+0x24>
 8006036:	f000 f9b7 	bl	80063a8 <_free_r>
 800603a:	2400      	movs	r4, #0
 800603c:	4620      	mov	r0, r4
 800603e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006042:	f000 f9fb 	bl	800643c <_malloc_usable_size_r>
 8006046:	4285      	cmp	r5, r0
 8006048:	4606      	mov	r6, r0
 800604a:	d802      	bhi.n	8006052 <_realloc_r+0x34>
 800604c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006050:	d8f4      	bhi.n	800603c <_realloc_r+0x1e>
 8006052:	4629      	mov	r1, r5
 8006054:	4640      	mov	r0, r8
 8006056:	f7ff fcd9 	bl	8005a0c <_malloc_r>
 800605a:	4607      	mov	r7, r0
 800605c:	2800      	cmp	r0, #0
 800605e:	d0ec      	beq.n	800603a <_realloc_r+0x1c>
 8006060:	42b5      	cmp	r5, r6
 8006062:	462a      	mov	r2, r5
 8006064:	4621      	mov	r1, r4
 8006066:	bf28      	it	cs
 8006068:	4632      	movcs	r2, r6
 800606a:	f000 f98f 	bl	800638c <memcpy>
 800606e:	4621      	mov	r1, r4
 8006070:	4640      	mov	r0, r8
 8006072:	f000 f999 	bl	80063a8 <_free_r>
 8006076:	463c      	mov	r4, r7
 8006078:	e7e0      	b.n	800603c <_realloc_r+0x1e>

0800607a <__swbuf_r>:
 800607a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607c:	460e      	mov	r6, r1
 800607e:	4614      	mov	r4, r2
 8006080:	4605      	mov	r5, r0
 8006082:	b118      	cbz	r0, 800608c <__swbuf_r+0x12>
 8006084:	6a03      	ldr	r3, [r0, #32]
 8006086:	b90b      	cbnz	r3, 800608c <__swbuf_r+0x12>
 8006088:	f7ff f92a 	bl	80052e0 <__sinit>
 800608c:	69a3      	ldr	r3, [r4, #24]
 800608e:	60a3      	str	r3, [r4, #8]
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	071a      	lsls	r2, r3, #28
 8006094:	d501      	bpl.n	800609a <__swbuf_r+0x20>
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	b943      	cbnz	r3, 80060ac <__swbuf_r+0x32>
 800609a:	4621      	mov	r1, r4
 800609c:	4628      	mov	r0, r5
 800609e:	f000 f82b 	bl	80060f8 <__swsetup_r>
 80060a2:	b118      	cbz	r0, 80060ac <__swbuf_r+0x32>
 80060a4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80060a8:	4638      	mov	r0, r7
 80060aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	6922      	ldr	r2, [r4, #16]
 80060b0:	1a98      	subs	r0, r3, r2
 80060b2:	6963      	ldr	r3, [r4, #20]
 80060b4:	b2f6      	uxtb	r6, r6
 80060b6:	4283      	cmp	r3, r0
 80060b8:	4637      	mov	r7, r6
 80060ba:	dc05      	bgt.n	80060c8 <__swbuf_r+0x4e>
 80060bc:	4621      	mov	r1, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	f7ff ff36 	bl	8005f30 <_fflush_r>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d1ed      	bne.n	80060a4 <__swbuf_r+0x2a>
 80060c8:	68a3      	ldr	r3, [r4, #8]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	60a3      	str	r3, [r4, #8]
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	6022      	str	r2, [r4, #0]
 80060d4:	701e      	strb	r6, [r3, #0]
 80060d6:	6962      	ldr	r2, [r4, #20]
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	429a      	cmp	r2, r3
 80060dc:	d004      	beq.n	80060e8 <__swbuf_r+0x6e>
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	07db      	lsls	r3, r3, #31
 80060e2:	d5e1      	bpl.n	80060a8 <__swbuf_r+0x2e>
 80060e4:	2e0a      	cmp	r6, #10
 80060e6:	d1df      	bne.n	80060a8 <__swbuf_r+0x2e>
 80060e8:	4621      	mov	r1, r4
 80060ea:	4628      	mov	r0, r5
 80060ec:	f7ff ff20 	bl	8005f30 <_fflush_r>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d0d9      	beq.n	80060a8 <__swbuf_r+0x2e>
 80060f4:	e7d6      	b.n	80060a4 <__swbuf_r+0x2a>
	...

080060f8 <__swsetup_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4b29      	ldr	r3, [pc, #164]	@ (80061a0 <__swsetup_r+0xa8>)
 80060fc:	4605      	mov	r5, r0
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	460c      	mov	r4, r1
 8006102:	b118      	cbz	r0, 800610c <__swsetup_r+0x14>
 8006104:	6a03      	ldr	r3, [r0, #32]
 8006106:	b90b      	cbnz	r3, 800610c <__swsetup_r+0x14>
 8006108:	f7ff f8ea 	bl	80052e0 <__sinit>
 800610c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006110:	0719      	lsls	r1, r3, #28
 8006112:	d422      	bmi.n	800615a <__swsetup_r+0x62>
 8006114:	06da      	lsls	r2, r3, #27
 8006116:	d407      	bmi.n	8006128 <__swsetup_r+0x30>
 8006118:	2209      	movs	r2, #9
 800611a:	602a      	str	r2, [r5, #0]
 800611c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006120:	81a3      	strh	r3, [r4, #12]
 8006122:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006126:	e033      	b.n	8006190 <__swsetup_r+0x98>
 8006128:	0758      	lsls	r0, r3, #29
 800612a:	d512      	bpl.n	8006152 <__swsetup_r+0x5a>
 800612c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800612e:	b141      	cbz	r1, 8006142 <__swsetup_r+0x4a>
 8006130:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006134:	4299      	cmp	r1, r3
 8006136:	d002      	beq.n	800613e <__swsetup_r+0x46>
 8006138:	4628      	mov	r0, r5
 800613a:	f000 f935 	bl	80063a8 <_free_r>
 800613e:	2300      	movs	r3, #0
 8006140:	6363      	str	r3, [r4, #52]	@ 0x34
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006148:	81a3      	strh	r3, [r4, #12]
 800614a:	2300      	movs	r3, #0
 800614c:	6063      	str	r3, [r4, #4]
 800614e:	6923      	ldr	r3, [r4, #16]
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	f043 0308 	orr.w	r3, r3, #8
 8006158:	81a3      	strh	r3, [r4, #12]
 800615a:	6923      	ldr	r3, [r4, #16]
 800615c:	b94b      	cbnz	r3, 8006172 <__swsetup_r+0x7a>
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006168:	d003      	beq.n	8006172 <__swsetup_r+0x7a>
 800616a:	4621      	mov	r1, r4
 800616c:	4628      	mov	r0, r5
 800616e:	f000 f83f 	bl	80061f0 <__smakebuf_r>
 8006172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006176:	f013 0201 	ands.w	r2, r3, #1
 800617a:	d00a      	beq.n	8006192 <__swsetup_r+0x9a>
 800617c:	2200      	movs	r2, #0
 800617e:	60a2      	str	r2, [r4, #8]
 8006180:	6962      	ldr	r2, [r4, #20]
 8006182:	4252      	negs	r2, r2
 8006184:	61a2      	str	r2, [r4, #24]
 8006186:	6922      	ldr	r2, [r4, #16]
 8006188:	b942      	cbnz	r2, 800619c <__swsetup_r+0xa4>
 800618a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800618e:	d1c5      	bne.n	800611c <__swsetup_r+0x24>
 8006190:	bd38      	pop	{r3, r4, r5, pc}
 8006192:	0799      	lsls	r1, r3, #30
 8006194:	bf58      	it	pl
 8006196:	6962      	ldrpl	r2, [r4, #20]
 8006198:	60a2      	str	r2, [r4, #8]
 800619a:	e7f4      	b.n	8006186 <__swsetup_r+0x8e>
 800619c:	2000      	movs	r0, #0
 800619e:	e7f7      	b.n	8006190 <__swsetup_r+0x98>
 80061a0:	24000030 	.word	0x24000030

080061a4 <__swhatbuf_r>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	460c      	mov	r4, r1
 80061a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ac:	2900      	cmp	r1, #0
 80061ae:	b096      	sub	sp, #88	@ 0x58
 80061b0:	4615      	mov	r5, r2
 80061b2:	461e      	mov	r6, r3
 80061b4:	da0d      	bge.n	80061d2 <__swhatbuf_r+0x2e>
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80061bc:	f04f 0100 	mov.w	r1, #0
 80061c0:	bf14      	ite	ne
 80061c2:	2340      	movne	r3, #64	@ 0x40
 80061c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80061c8:	2000      	movs	r0, #0
 80061ca:	6031      	str	r1, [r6, #0]
 80061cc:	602b      	str	r3, [r5, #0]
 80061ce:	b016      	add	sp, #88	@ 0x58
 80061d0:	bd70      	pop	{r4, r5, r6, pc}
 80061d2:	466a      	mov	r2, sp
 80061d4:	f000 f872 	bl	80062bc <_fstat_r>
 80061d8:	2800      	cmp	r0, #0
 80061da:	dbec      	blt.n	80061b6 <__swhatbuf_r+0x12>
 80061dc:	9901      	ldr	r1, [sp, #4]
 80061de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80061e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80061e6:	4259      	negs	r1, r3
 80061e8:	4159      	adcs	r1, r3
 80061ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061ee:	e7eb      	b.n	80061c8 <__swhatbuf_r+0x24>

080061f0 <__smakebuf_r>:
 80061f0:	898b      	ldrh	r3, [r1, #12]
 80061f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f4:	079d      	lsls	r5, r3, #30
 80061f6:	4606      	mov	r6, r0
 80061f8:	460c      	mov	r4, r1
 80061fa:	d507      	bpl.n	800620c <__smakebuf_r+0x1c>
 80061fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	6123      	str	r3, [r4, #16]
 8006204:	2301      	movs	r3, #1
 8006206:	6163      	str	r3, [r4, #20]
 8006208:	b003      	add	sp, #12
 800620a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800620c:	ab01      	add	r3, sp, #4
 800620e:	466a      	mov	r2, sp
 8006210:	f7ff ffc8 	bl	80061a4 <__swhatbuf_r>
 8006214:	9f00      	ldr	r7, [sp, #0]
 8006216:	4605      	mov	r5, r0
 8006218:	4639      	mov	r1, r7
 800621a:	4630      	mov	r0, r6
 800621c:	f7ff fbf6 	bl	8005a0c <_malloc_r>
 8006220:	b948      	cbnz	r0, 8006236 <__smakebuf_r+0x46>
 8006222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006226:	059a      	lsls	r2, r3, #22
 8006228:	d4ee      	bmi.n	8006208 <__smakebuf_r+0x18>
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	f043 0302 	orr.w	r3, r3, #2
 8006232:	81a3      	strh	r3, [r4, #12]
 8006234:	e7e2      	b.n	80061fc <__smakebuf_r+0xc>
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	6020      	str	r0, [r4, #0]
 800623a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800623e:	81a3      	strh	r3, [r4, #12]
 8006240:	9b01      	ldr	r3, [sp, #4]
 8006242:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006246:	b15b      	cbz	r3, 8006260 <__smakebuf_r+0x70>
 8006248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800624c:	4630      	mov	r0, r6
 800624e:	f000 f847 	bl	80062e0 <_isatty_r>
 8006252:	b128      	cbz	r0, 8006260 <__smakebuf_r+0x70>
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	f023 0303 	bic.w	r3, r3, #3
 800625a:	f043 0301 	orr.w	r3, r3, #1
 800625e:	81a3      	strh	r3, [r4, #12]
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	431d      	orrs	r5, r3
 8006264:	81a5      	strh	r5, [r4, #12]
 8006266:	e7cf      	b.n	8006208 <__smakebuf_r+0x18>

08006268 <memmove>:
 8006268:	4288      	cmp	r0, r1
 800626a:	b510      	push	{r4, lr}
 800626c:	eb01 0402 	add.w	r4, r1, r2
 8006270:	d902      	bls.n	8006278 <memmove+0x10>
 8006272:	4284      	cmp	r4, r0
 8006274:	4623      	mov	r3, r4
 8006276:	d807      	bhi.n	8006288 <memmove+0x20>
 8006278:	1e43      	subs	r3, r0, #1
 800627a:	42a1      	cmp	r1, r4
 800627c:	d008      	beq.n	8006290 <memmove+0x28>
 800627e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006282:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006286:	e7f8      	b.n	800627a <memmove+0x12>
 8006288:	4402      	add	r2, r0
 800628a:	4601      	mov	r1, r0
 800628c:	428a      	cmp	r2, r1
 800628e:	d100      	bne.n	8006292 <memmove+0x2a>
 8006290:	bd10      	pop	{r4, pc}
 8006292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800629a:	e7f7      	b.n	800628c <memmove+0x24>

0800629c <_close_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d06      	ldr	r5, [pc, #24]	@ (80062b8 <_close_r+0x1c>)
 80062a0:	2300      	movs	r3, #0
 80062a2:	4604      	mov	r4, r0
 80062a4:	4608      	mov	r0, r1
 80062a6:	602b      	str	r3, [r5, #0]
 80062a8:	f7fa fea1 	bl	8000fee <_close>
 80062ac:	1c43      	adds	r3, r0, #1
 80062ae:	d102      	bne.n	80062b6 <_close_r+0x1a>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	b103      	cbz	r3, 80062b6 <_close_r+0x1a>
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	24000adc 	.word	0x24000adc

080062bc <_fstat_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4d07      	ldr	r5, [pc, #28]	@ (80062dc <_fstat_r+0x20>)
 80062c0:	2300      	movs	r3, #0
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	f7fa fe9c 	bl	8001006 <_fstat>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	d102      	bne.n	80062d8 <_fstat_r+0x1c>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	b103      	cbz	r3, 80062d8 <_fstat_r+0x1c>
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	bd38      	pop	{r3, r4, r5, pc}
 80062da:	bf00      	nop
 80062dc:	24000adc 	.word	0x24000adc

080062e0 <_isatty_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4d06      	ldr	r5, [pc, #24]	@ (80062fc <_isatty_r+0x1c>)
 80062e4:	2300      	movs	r3, #0
 80062e6:	4604      	mov	r4, r0
 80062e8:	4608      	mov	r0, r1
 80062ea:	602b      	str	r3, [r5, #0]
 80062ec:	f7fa fe9b 	bl	8001026 <_isatty>
 80062f0:	1c43      	adds	r3, r0, #1
 80062f2:	d102      	bne.n	80062fa <_isatty_r+0x1a>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	b103      	cbz	r3, 80062fa <_isatty_r+0x1a>
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	24000adc 	.word	0x24000adc

08006300 <_lseek_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	4d07      	ldr	r5, [pc, #28]	@ (8006320 <_lseek_r+0x20>)
 8006304:	4604      	mov	r4, r0
 8006306:	4608      	mov	r0, r1
 8006308:	4611      	mov	r1, r2
 800630a:	2200      	movs	r2, #0
 800630c:	602a      	str	r2, [r5, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	f7fa fe94 	bl	800103c <_lseek>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_lseek_r+0x1e>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_lseek_r+0x1e>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	24000adc 	.word	0x24000adc

08006324 <_read_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4d07      	ldr	r5, [pc, #28]	@ (8006344 <_read_r+0x20>)
 8006328:	4604      	mov	r4, r0
 800632a:	4608      	mov	r0, r1
 800632c:	4611      	mov	r1, r2
 800632e:	2200      	movs	r2, #0
 8006330:	602a      	str	r2, [r5, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	f7fa fe22 	bl	8000f7c <_read>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_read_r+0x1e>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	b103      	cbz	r3, 8006342 <_read_r+0x1e>
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	24000adc 	.word	0x24000adc

08006348 <_sbrk_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4d06      	ldr	r5, [pc, #24]	@ (8006364 <_sbrk_r+0x1c>)
 800634c:	2300      	movs	r3, #0
 800634e:	4604      	mov	r4, r0
 8006350:	4608      	mov	r0, r1
 8006352:	602b      	str	r3, [r5, #0]
 8006354:	f7fa fe80 	bl	8001058 <_sbrk>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d102      	bne.n	8006362 <_sbrk_r+0x1a>
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	b103      	cbz	r3, 8006362 <_sbrk_r+0x1a>
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	24000adc 	.word	0x24000adc

08006368 <_write_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4d07      	ldr	r5, [pc, #28]	@ (8006388 <_write_r+0x20>)
 800636c:	4604      	mov	r4, r0
 800636e:	4608      	mov	r0, r1
 8006370:	4611      	mov	r1, r2
 8006372:	2200      	movs	r2, #0
 8006374:	602a      	str	r2, [r5, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	f7fa fe1d 	bl	8000fb6 <_write>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	d102      	bne.n	8006386 <_write_r+0x1e>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b103      	cbz	r3, 8006386 <_write_r+0x1e>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	24000adc 	.word	0x24000adc

0800638c <memcpy>:
 800638c:	440a      	add	r2, r1
 800638e:	4291      	cmp	r1, r2
 8006390:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006394:	d100      	bne.n	8006398 <memcpy+0xc>
 8006396:	4770      	bx	lr
 8006398:	b510      	push	{r4, lr}
 800639a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a2:	4291      	cmp	r1, r2
 80063a4:	d1f9      	bne.n	800639a <memcpy+0xe>
 80063a6:	bd10      	pop	{r4, pc}

080063a8 <_free_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4605      	mov	r5, r0
 80063ac:	2900      	cmp	r1, #0
 80063ae:	d041      	beq.n	8006434 <_free_r+0x8c>
 80063b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b4:	1f0c      	subs	r4, r1, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfb8      	it	lt
 80063ba:	18e4      	addlt	r4, r4, r3
 80063bc:	f7ff fde0 	bl	8005f80 <__malloc_lock>
 80063c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006438 <_free_r+0x90>)
 80063c2:	6813      	ldr	r3, [r2, #0]
 80063c4:	b933      	cbnz	r3, 80063d4 <_free_r+0x2c>
 80063c6:	6063      	str	r3, [r4, #4]
 80063c8:	6014      	str	r4, [r2, #0]
 80063ca:	4628      	mov	r0, r5
 80063cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063d0:	f7ff bddc 	b.w	8005f8c <__malloc_unlock>
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	d908      	bls.n	80063ea <_free_r+0x42>
 80063d8:	6820      	ldr	r0, [r4, #0]
 80063da:	1821      	adds	r1, r4, r0
 80063dc:	428b      	cmp	r3, r1
 80063de:	bf01      	itttt	eq
 80063e0:	6819      	ldreq	r1, [r3, #0]
 80063e2:	685b      	ldreq	r3, [r3, #4]
 80063e4:	1809      	addeq	r1, r1, r0
 80063e6:	6021      	streq	r1, [r4, #0]
 80063e8:	e7ed      	b.n	80063c6 <_free_r+0x1e>
 80063ea:	461a      	mov	r2, r3
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	b10b      	cbz	r3, 80063f4 <_free_r+0x4c>
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	d9fa      	bls.n	80063ea <_free_r+0x42>
 80063f4:	6811      	ldr	r1, [r2, #0]
 80063f6:	1850      	adds	r0, r2, r1
 80063f8:	42a0      	cmp	r0, r4
 80063fa:	d10b      	bne.n	8006414 <_free_r+0x6c>
 80063fc:	6820      	ldr	r0, [r4, #0]
 80063fe:	4401      	add	r1, r0
 8006400:	1850      	adds	r0, r2, r1
 8006402:	4283      	cmp	r3, r0
 8006404:	6011      	str	r1, [r2, #0]
 8006406:	d1e0      	bne.n	80063ca <_free_r+0x22>
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	6053      	str	r3, [r2, #4]
 800640e:	4408      	add	r0, r1
 8006410:	6010      	str	r0, [r2, #0]
 8006412:	e7da      	b.n	80063ca <_free_r+0x22>
 8006414:	d902      	bls.n	800641c <_free_r+0x74>
 8006416:	230c      	movs	r3, #12
 8006418:	602b      	str	r3, [r5, #0]
 800641a:	e7d6      	b.n	80063ca <_free_r+0x22>
 800641c:	6820      	ldr	r0, [r4, #0]
 800641e:	1821      	adds	r1, r4, r0
 8006420:	428b      	cmp	r3, r1
 8006422:	bf04      	itt	eq
 8006424:	6819      	ldreq	r1, [r3, #0]
 8006426:	685b      	ldreq	r3, [r3, #4]
 8006428:	6063      	str	r3, [r4, #4]
 800642a:	bf04      	itt	eq
 800642c:	1809      	addeq	r1, r1, r0
 800642e:	6021      	streq	r1, [r4, #0]
 8006430:	6054      	str	r4, [r2, #4]
 8006432:	e7ca      	b.n	80063ca <_free_r+0x22>
 8006434:	bd38      	pop	{r3, r4, r5, pc}
 8006436:	bf00      	nop
 8006438:	24000ad8 	.word	0x24000ad8

0800643c <_malloc_usable_size_r>:
 800643c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006440:	1f18      	subs	r0, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	bfbc      	itt	lt
 8006446:	580b      	ldrlt	r3, [r1, r0]
 8006448:	18c0      	addlt	r0, r0, r3
 800644a:	4770      	bx	lr

0800644c <_init>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	bf00      	nop
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr

08006458 <_fini>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr
