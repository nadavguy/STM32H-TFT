
STM32H-TFT_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000477c  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08104a14  08104a14  00005a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08104a48  08104a48  00005a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08104a50  08104a50  00005a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08104a54  08104a54  00005a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  10000000  08104a58  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000154  1000002c  08104a84  0000602c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000180  08104a84  00006180  2**0
                  ALLOC
  9 .shared_ram   00000004  38000000  38000000  00007000  2**2
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011baf  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000025e7  00000000  00000000  00017c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000d70  00000000  00000000  0001a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a3a  00000000  00000000  0001af68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a195  00000000  00000000  0001b9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001392d  00000000  00000000  00055b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017bffd  00000000  00000000  00069464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001e5461  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000036a4  00000000  00000000  001e54a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006b  00000000  00000000  001e8b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000002c 	.word	0x1000002c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081049fc 	.word	0x081049fc

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000030 	.word	0x10000030
 81002d4:	081049fc 	.word	0x081049fc

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 81002ec:	f000 b96a 	b.w	81005c4 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	460c      	mov	r4, r1
 8100310:	2b00      	cmp	r3, #0
 8100312:	d14e      	bne.n	81003b2 <__udivmoddi4+0xaa>
 8100314:	4694      	mov	ip, r2
 8100316:	458c      	cmp	ip, r1
 8100318:	4686      	mov	lr, r0
 810031a:	fab2 f282 	clz	r2, r2
 810031e:	d962      	bls.n	81003e6 <__udivmoddi4+0xde>
 8100320:	b14a      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100322:	f1c2 0320 	rsb	r3, r2, #32
 8100326:	4091      	lsls	r1, r2
 8100328:	fa20 f303 	lsr.w	r3, r0, r3
 810032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8100330:	4319      	orrs	r1, r3
 8100332:	fa00 fe02 	lsl.w	lr, r0, r2
 8100336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810033a:	fa1f f68c 	uxth.w	r6, ip
 810033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8100342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100346:	fb07 1114 	mls	r1, r7, r4, r1
 810034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034e:	fb04 f106 	mul.w	r1, r4, r6
 8100352:	4299      	cmp	r1, r3
 8100354:	d90a      	bls.n	810036c <__udivmoddi4+0x64>
 8100356:	eb1c 0303 	adds.w	r3, ip, r3
 810035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 810035e:	f080 8112 	bcs.w	8100586 <__udivmoddi4+0x27e>
 8100362:	4299      	cmp	r1, r3
 8100364:	f240 810f 	bls.w	8100586 <__udivmoddi4+0x27e>
 8100368:	3c02      	subs	r4, #2
 810036a:	4463      	add	r3, ip
 810036c:	1a59      	subs	r1, r3, r1
 810036e:	fa1f f38e 	uxth.w	r3, lr
 8100372:	fbb1 f0f7 	udiv	r0, r1, r7
 8100376:	fb07 1110 	mls	r1, r7, r0, r1
 810037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810037e:	fb00 f606 	mul.w	r6, r0, r6
 8100382:	429e      	cmp	r6, r3
 8100384:	d90a      	bls.n	810039c <__udivmoddi4+0x94>
 8100386:	eb1c 0303 	adds.w	r3, ip, r3
 810038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 810038e:	f080 80fc 	bcs.w	810058a <__udivmoddi4+0x282>
 8100392:	429e      	cmp	r6, r3
 8100394:	f240 80f9 	bls.w	810058a <__udivmoddi4+0x282>
 8100398:	4463      	add	r3, ip
 810039a:	3802      	subs	r0, #2
 810039c:	1b9b      	subs	r3, r3, r6
 810039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 81003a2:	2100      	movs	r1, #0
 81003a4:	b11d      	cbz	r5, 81003ae <__udivmoddi4+0xa6>
 81003a6:	40d3      	lsrs	r3, r2
 81003a8:	2200      	movs	r2, #0
 81003aa:	e9c5 3200 	strd	r3, r2, [r5]
 81003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b2:	428b      	cmp	r3, r1
 81003b4:	d905      	bls.n	81003c2 <__udivmoddi4+0xba>
 81003b6:	b10d      	cbz	r5, 81003bc <__udivmoddi4+0xb4>
 81003b8:	e9c5 0100 	strd	r0, r1, [r5]
 81003bc:	2100      	movs	r1, #0
 81003be:	4608      	mov	r0, r1
 81003c0:	e7f5      	b.n	81003ae <__udivmoddi4+0xa6>
 81003c2:	fab3 f183 	clz	r1, r3
 81003c6:	2900      	cmp	r1, #0
 81003c8:	d146      	bne.n	8100458 <__udivmoddi4+0x150>
 81003ca:	42a3      	cmp	r3, r4
 81003cc:	d302      	bcc.n	81003d4 <__udivmoddi4+0xcc>
 81003ce:	4290      	cmp	r0, r2
 81003d0:	f0c0 80f0 	bcc.w	81005b4 <__udivmoddi4+0x2ac>
 81003d4:	1a86      	subs	r6, r0, r2
 81003d6:	eb64 0303 	sbc.w	r3, r4, r3
 81003da:	2001      	movs	r0, #1
 81003dc:	2d00      	cmp	r5, #0
 81003de:	d0e6      	beq.n	81003ae <__udivmoddi4+0xa6>
 81003e0:	e9c5 6300 	strd	r6, r3, [r5]
 81003e4:	e7e3      	b.n	81003ae <__udivmoddi4+0xa6>
 81003e6:	2a00      	cmp	r2, #0
 81003e8:	f040 8090 	bne.w	810050c <__udivmoddi4+0x204>
 81003ec:	eba1 040c 	sub.w	r4, r1, ip
 81003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003f4:	fa1f f78c 	uxth.w	r7, ip
 81003f8:	2101      	movs	r1, #1
 81003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 81003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100402:	fb08 4416 	mls	r4, r8, r6, r4
 8100406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810040a:	fb07 f006 	mul.w	r0, r7, r6
 810040e:	4298      	cmp	r0, r3
 8100410:	d908      	bls.n	8100424 <__udivmoddi4+0x11c>
 8100412:	eb1c 0303 	adds.w	r3, ip, r3
 8100416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 810041a:	d202      	bcs.n	8100422 <__udivmoddi4+0x11a>
 810041c:	4298      	cmp	r0, r3
 810041e:	f200 80cd 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 8100422:	4626      	mov	r6, r4
 8100424:	1a1c      	subs	r4, r3, r0
 8100426:	fa1f f38e 	uxth.w	r3, lr
 810042a:	fbb4 f0f8 	udiv	r0, r4, r8
 810042e:	fb08 4410 	mls	r4, r8, r0, r4
 8100432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100436:	fb00 f707 	mul.w	r7, r0, r7
 810043a:	429f      	cmp	r7, r3
 810043c:	d908      	bls.n	8100450 <__udivmoddi4+0x148>
 810043e:	eb1c 0303 	adds.w	r3, ip, r3
 8100442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8100446:	d202      	bcs.n	810044e <__udivmoddi4+0x146>
 8100448:	429f      	cmp	r7, r3
 810044a:	f200 80b0 	bhi.w	81005ae <__udivmoddi4+0x2a6>
 810044e:	4620      	mov	r0, r4
 8100450:	1bdb      	subs	r3, r3, r7
 8100452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100456:	e7a5      	b.n	81003a4 <__udivmoddi4+0x9c>
 8100458:	f1c1 0620 	rsb	r6, r1, #32
 810045c:	408b      	lsls	r3, r1
 810045e:	fa22 f706 	lsr.w	r7, r2, r6
 8100462:	431f      	orrs	r7, r3
 8100464:	fa20 fc06 	lsr.w	ip, r0, r6
 8100468:	fa04 f301 	lsl.w	r3, r4, r1
 810046c:	ea43 030c 	orr.w	r3, r3, ip
 8100470:	40f4      	lsrs	r4, r6
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	0c38      	lsrs	r0, r7, #16
 8100478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 810047c:	fbb4 fef0 	udiv	lr, r4, r0
 8100480:	fa1f fc87 	uxth.w	ip, r7
 8100484:	fb00 441e 	mls	r4, r0, lr, r4
 8100488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810048c:	fb0e f90c 	mul.w	r9, lr, ip
 8100490:	45a1      	cmp	r9, r4
 8100492:	fa02 f201 	lsl.w	r2, r2, r1
 8100496:	d90a      	bls.n	81004ae <__udivmoddi4+0x1a6>
 8100498:	193c      	adds	r4, r7, r4
 810049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 810049e:	f080 8084 	bcs.w	81005aa <__udivmoddi4+0x2a2>
 81004a2:	45a1      	cmp	r9, r4
 81004a4:	f240 8081 	bls.w	81005aa <__udivmoddi4+0x2a2>
 81004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 81004ac:	443c      	add	r4, r7
 81004ae:	eba4 0409 	sub.w	r4, r4, r9
 81004b2:	fa1f f983 	uxth.w	r9, r3
 81004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 81004ba:	fb00 4413 	mls	r4, r0, r3, r4
 81004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 81004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c6:	45a4      	cmp	ip, r4
 81004c8:	d907      	bls.n	81004da <__udivmoddi4+0x1d2>
 81004ca:	193c      	adds	r4, r7, r4
 81004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 81004d0:	d267      	bcs.n	81005a2 <__udivmoddi4+0x29a>
 81004d2:	45a4      	cmp	ip, r4
 81004d4:	d965      	bls.n	81005a2 <__udivmoddi4+0x29a>
 81004d6:	3b02      	subs	r3, #2
 81004d8:	443c      	add	r4, r7
 81004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81004de:	fba0 9302 	umull	r9, r3, r0, r2
 81004e2:	eba4 040c 	sub.w	r4, r4, ip
 81004e6:	429c      	cmp	r4, r3
 81004e8:	46ce      	mov	lr, r9
 81004ea:	469c      	mov	ip, r3
 81004ec:	d351      	bcc.n	8100592 <__udivmoddi4+0x28a>
 81004ee:	d04e      	beq.n	810058e <__udivmoddi4+0x286>
 81004f0:	b155      	cbz	r5, 8100508 <__udivmoddi4+0x200>
 81004f2:	ebb8 030e 	subs.w	r3, r8, lr
 81004f6:	eb64 040c 	sbc.w	r4, r4, ip
 81004fa:	fa04 f606 	lsl.w	r6, r4, r6
 81004fe:	40cb      	lsrs	r3, r1
 8100500:	431e      	orrs	r6, r3
 8100502:	40cc      	lsrs	r4, r1
 8100504:	e9c5 6400 	strd	r6, r4, [r5]
 8100508:	2100      	movs	r1, #0
 810050a:	e750      	b.n	81003ae <__udivmoddi4+0xa6>
 810050c:	f1c2 0320 	rsb	r3, r2, #32
 8100510:	fa20 f103 	lsr.w	r1, r0, r3
 8100514:	fa0c fc02 	lsl.w	ip, ip, r2
 8100518:	fa24 f303 	lsr.w	r3, r4, r3
 810051c:	4094      	lsls	r4, r2
 810051e:	430c      	orrs	r4, r1
 8100520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100524:	fa00 fe02 	lsl.w	lr, r0, r2
 8100528:	fa1f f78c 	uxth.w	r7, ip
 810052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100530:	fb08 3110 	mls	r1, r8, r0, r3
 8100534:	0c23      	lsrs	r3, r4, #16
 8100536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810053a:	fb00 f107 	mul.w	r1, r0, r7
 810053e:	4299      	cmp	r1, r3
 8100540:	d908      	bls.n	8100554 <__udivmoddi4+0x24c>
 8100542:	eb1c 0303 	adds.w	r3, ip, r3
 8100546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 810054a:	d22c      	bcs.n	81005a6 <__udivmoddi4+0x29e>
 810054c:	4299      	cmp	r1, r3
 810054e:	d92a      	bls.n	81005a6 <__udivmoddi4+0x29e>
 8100550:	3802      	subs	r0, #2
 8100552:	4463      	add	r3, ip
 8100554:	1a5b      	subs	r3, r3, r1
 8100556:	b2a4      	uxth	r4, r4
 8100558:	fbb3 f1f8 	udiv	r1, r3, r8
 810055c:	fb08 3311 	mls	r3, r8, r1, r3
 8100560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100564:	fb01 f307 	mul.w	r3, r1, r7
 8100568:	42a3      	cmp	r3, r4
 810056a:	d908      	bls.n	810057e <__udivmoddi4+0x276>
 810056c:	eb1c 0404 	adds.w	r4, ip, r4
 8100570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8100574:	d213      	bcs.n	810059e <__udivmoddi4+0x296>
 8100576:	42a3      	cmp	r3, r4
 8100578:	d911      	bls.n	810059e <__udivmoddi4+0x296>
 810057a:	3902      	subs	r1, #2
 810057c:	4464      	add	r4, ip
 810057e:	1ae4      	subs	r4, r4, r3
 8100580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100584:	e739      	b.n	81003fa <__udivmoddi4+0xf2>
 8100586:	4604      	mov	r4, r0
 8100588:	e6f0      	b.n	810036c <__udivmoddi4+0x64>
 810058a:	4608      	mov	r0, r1
 810058c:	e706      	b.n	810039c <__udivmoddi4+0x94>
 810058e:	45c8      	cmp	r8, r9
 8100590:	d2ae      	bcs.n	81004f0 <__udivmoddi4+0x1e8>
 8100592:	ebb9 0e02 	subs.w	lr, r9, r2
 8100596:	eb63 0c07 	sbc.w	ip, r3, r7
 810059a:	3801      	subs	r0, #1
 810059c:	e7a8      	b.n	81004f0 <__udivmoddi4+0x1e8>
 810059e:	4631      	mov	r1, r6
 81005a0:	e7ed      	b.n	810057e <__udivmoddi4+0x276>
 81005a2:	4603      	mov	r3, r0
 81005a4:	e799      	b.n	81004da <__udivmoddi4+0x1d2>
 81005a6:	4630      	mov	r0, r6
 81005a8:	e7d4      	b.n	8100554 <__udivmoddi4+0x24c>
 81005aa:	46d6      	mov	lr, sl
 81005ac:	e77f      	b.n	81004ae <__udivmoddi4+0x1a6>
 81005ae:	4463      	add	r3, ip
 81005b0:	3802      	subs	r0, #2
 81005b2:	e74d      	b.n	8100450 <__udivmoddi4+0x148>
 81005b4:	4606      	mov	r6, r0
 81005b6:	4623      	mov	r3, r4
 81005b8:	4608      	mov	r0, r1
 81005ba:	e70f      	b.n	81003dc <__udivmoddi4+0xd4>
 81005bc:	3e02      	subs	r6, #2
 81005be:	4463      	add	r3, ip
 81005c0:	e730      	b.n	8100424 <__udivmoddi4+0x11c>
 81005c2:	bf00      	nop

081005c4 <__aeabi_idiv0>:
 81005c4:	4770      	bx	lr
 81005c6:	bf00      	nop

081005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005c8:	b480      	push	{r7}
 81005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005cc:	4b09      	ldr	r3, [pc, #36]	@ (81005f4 <SystemInit+0x2c>)
 81005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81005d2:	4a08      	ldr	r2, [pc, #32]	@ (81005f4 <SystemInit+0x2c>)
 81005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005dc:	4b05      	ldr	r3, [pc, #20]	@ (81005f4 <SystemInit+0x2c>)
 81005de:	691b      	ldr	r3, [r3, #16]
 81005e0:	4a04      	ldr	r2, [pc, #16]	@ (81005f4 <SystemInit+0x2c>)
 81005e2:	f043 0310 	orr.w	r3, r3, #16
 81005e6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81005e8:	bf00      	nop
 81005ea:	46bd      	mov	sp, r7
 81005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f0:	4770      	bx	lr
 81005f2:	bf00      	nop
 81005f4:	e000ed00 	.word	0xe000ed00

081005f8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 81005f8:	b480      	push	{r7}
 81005fa:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 81005fc:	4b09      	ldr	r3, [pc, #36]	@ (8100624 <ExitRun0Mode+0x2c>)
 81005fe:	68db      	ldr	r3, [r3, #12]
 8100600:	4a08      	ldr	r2, [pc, #32]	@ (8100624 <ExitRun0Mode+0x2c>)
 8100602:	f023 0302 	bic.w	r3, r3, #2
 8100606:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100608:	bf00      	nop
 810060a:	4b06      	ldr	r3, [pc, #24]	@ (8100624 <ExitRun0Mode+0x2c>)
 810060c:	685b      	ldr	r3, [r3, #4]
 810060e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100612:	2b00      	cmp	r3, #0
 8100614:	d0f9      	beq.n	810060a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100616:	bf00      	nop
 8100618:	bf00      	nop
 810061a:	46bd      	mov	sp, r7
 810061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100620:	4770      	bx	lr
 8100622:	bf00      	nop
 8100624:	58024800 	.word	0x58024800

08100628 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8100628:	b480      	push	{r7}
 810062a:	b083      	sub	sp, #12
 810062c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810062e:	4b12      	ldr	r3, [pc, #72]	@ (8100678 <MX_GPIO_Init+0x50>)
 8100630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100634:	4a10      	ldr	r2, [pc, #64]	@ (8100678 <MX_GPIO_Init+0x50>)
 8100636:	f043 0304 	orr.w	r3, r3, #4
 810063a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810063e:	4b0e      	ldr	r3, [pc, #56]	@ (8100678 <MX_GPIO_Init+0x50>)
 8100640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100644:	f003 0304 	and.w	r3, r3, #4
 8100648:	607b      	str	r3, [r7, #4]
 810064a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810064c:	4b0a      	ldr	r3, [pc, #40]	@ (8100678 <MX_GPIO_Init+0x50>)
 810064e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100652:	4a09      	ldr	r2, [pc, #36]	@ (8100678 <MX_GPIO_Init+0x50>)
 8100654:	f043 0302 	orr.w	r3, r3, #2
 8100658:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810065c:	4b06      	ldr	r3, [pc, #24]	@ (8100678 <MX_GPIO_Init+0x50>)
 810065e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100662:	f003 0302 	and.w	r3, r3, #2
 8100666:	603b      	str	r3, [r7, #0]
 8100668:	683b      	ldr	r3, [r7, #0]

}
 810066a:	bf00      	nop
 810066c:	370c      	adds	r7, #12
 810066e:	46bd      	mov	sp, r7
 8100670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100674:	4770      	bx	lr
 8100676:	bf00      	nop
 8100678:	58024400 	.word	0x58024400

0810067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810067c:	b580      	push	{r7, lr}
 810067e:	b082      	sub	sp, #8
 8100680:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100682:	4b30      	ldr	r3, [pc, #192]	@ (8100744 <main+0xc8>)
 8100684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100688:	4a2e      	ldr	r2, [pc, #184]	@ (8100744 <main+0xc8>)
 810068a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810068e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100692:	4b2c      	ldr	r3, [pc, #176]	@ (8100744 <main+0xc8>)
 8100694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810069c:	607b      	str	r3, [r7, #4]
 810069e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006a0:	2001      	movs	r0, #1
 81006a2:	f000 ffab 	bl	81015fc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81006a6:	f001 f835 	bl	8101714 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81006aa:	2201      	movs	r2, #1
 81006ac:	2102      	movs	r1, #2
 81006ae:	2000      	movs	r0, #0
 81006b0:	f000 ffb6 	bl	8101620 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006b4:	4b24      	ldr	r3, [pc, #144]	@ (8100748 <main+0xcc>)
 81006b6:	681b      	ldr	r3, [r3, #0]
 81006b8:	091b      	lsrs	r3, r3, #4
 81006ba:	f003 030f 	and.w	r3, r3, #15
 81006be:	2b07      	cmp	r3, #7
 81006c0:	d108      	bne.n	81006d4 <main+0x58>
 81006c2:	4b22      	ldr	r3, [pc, #136]	@ (810074c <main+0xd0>)
 81006c4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006c8:	4a20      	ldr	r2, [pc, #128]	@ (810074c <main+0xd0>)
 81006ca:	f043 0301 	orr.w	r3, r3, #1
 81006ce:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006d2:	e007      	b.n	81006e4 <main+0x68>
 81006d4:	4b1d      	ldr	r3, [pc, #116]	@ (810074c <main+0xd0>)
 81006d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006da:	4a1c      	ldr	r2, [pc, #112]	@ (810074c <main+0xd0>)
 81006dc:	f043 0301 	orr.w	r3, r3, #1
 81006e0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006e4:	f000 fb64 	bl	8100db0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81006e8:	f7ff ff9e 	bl	8100628 <MX_GPIO_Init>
  MX_SPI2_Init();
 81006ec:	f000 f838 	bl	8100760 <MX_SPI2_Init>
  // Wait for HSEM notification

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 81006f0:	2000      	movs	r0, #0
 81006f2:	f000 f995 	bl	8100a20 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 81006f6:	2001      	movs	r0, #1
 81006f8:	f000 f992 	bl	8100a20 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 81006fc:	2002      	movs	r0, #2
 81006fe:	f000 f98f 	bl	8100a20 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8100702:	2101      	movs	r1, #1
 8100704:	2000      	movs	r0, #0
 8100706:	f000 fa01 	bl	8100b0c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 810070a:	4b11      	ldr	r3, [pc, #68]	@ (8100750 <main+0xd4>)
 810070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8100710:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8100712:	4b0f      	ldr	r3, [pc, #60]	@ (8100750 <main+0xd4>)
 8100714:	2200      	movs	r2, #0
 8100716:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8100718:	4b0d      	ldr	r3, [pc, #52]	@ (8100750 <main+0xd4>)
 810071a:	2200      	movs	r2, #0
 810071c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 810071e:	4b0c      	ldr	r3, [pc, #48]	@ (8100750 <main+0xd4>)
 8100720:	2200      	movs	r2, #0
 8100722:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8100724:	4b0a      	ldr	r3, [pc, #40]	@ (8100750 <main+0xd4>)
 8100726:	2200      	movs	r2, #0
 8100728:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 810072a:	4909      	ldr	r1, [pc, #36]	@ (8100750 <main+0xd4>)
 810072c:	2000      	movs	r0, #0
 810072e:	f000 fa7d 	bl	8100c2c <BSP_COM_Init>
 8100732:	4603      	mov	r3, r0
 8100734:	2b00      	cmp	r3, #0
 8100736:	d001      	beq.n	810073c <main+0xc0>
  {
    Error_Handler();
 8100738:	f000 f80c 	bl	8100754 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_data_from_m7();
 810073c:	f004 f91e 	bl	810497c <read_data_from_m7>
 8100740:	e7fc      	b.n	810073c <main+0xc0>
 8100742:	bf00      	nop
 8100744:	58024400 	.word	0x58024400
 8100748:	e000ed00 	.word	0xe000ed00
 810074c:	58026400 	.word	0x58026400
 8100750:	10000048 	.word	0x10000048

08100754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100754:	b480      	push	{r7}
 8100756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100758:	b672      	cpsid	i
}
 810075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810075c:	bf00      	nop
 810075e:	e7fd      	b.n	810075c <Error_Handler+0x8>

08100760 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8100760:	b580      	push	{r7, lr}
 8100762:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8100764:	4b27      	ldr	r3, [pc, #156]	@ (8100804 <MX_SPI2_Init+0xa4>)
 8100766:	4a28      	ldr	r2, [pc, #160]	@ (8100808 <MX_SPI2_Init+0xa8>)
 8100768:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 810076a:	4b26      	ldr	r3, [pc, #152]	@ (8100804 <MX_SPI2_Init+0xa4>)
 810076c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100770:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8100772:	4b24      	ldr	r3, [pc, #144]	@ (8100804 <MX_SPI2_Init+0xa4>)
 8100774:	2200      	movs	r2, #0
 8100776:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8100778:	4b22      	ldr	r3, [pc, #136]	@ (8100804 <MX_SPI2_Init+0xa4>)
 810077a:	2207      	movs	r2, #7
 810077c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 810077e:	4b21      	ldr	r3, [pc, #132]	@ (8100804 <MX_SPI2_Init+0xa4>)
 8100780:	2200      	movs	r2, #0
 8100782:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100784:	4b1f      	ldr	r3, [pc, #124]	@ (8100804 <MX_SPI2_Init+0xa4>)
 8100786:	2200      	movs	r2, #0
 8100788:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 810078a:	4b1e      	ldr	r3, [pc, #120]	@ (8100804 <MX_SPI2_Init+0xa4>)
 810078c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8100790:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8100792:	4b1c      	ldr	r3, [pc, #112]	@ (8100804 <MX_SPI2_Init+0xa4>)
 8100794:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8100798:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810079a:	4b1a      	ldr	r3, [pc, #104]	@ (8100804 <MX_SPI2_Init+0xa4>)
 810079c:	2200      	movs	r2, #0
 810079e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 81007a0:	4b18      	ldr	r3, [pc, #96]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007a2:	2200      	movs	r2, #0
 81007a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81007a6:	4b17      	ldr	r3, [pc, #92]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007a8:	2200      	movs	r2, #0
 81007aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 81007ac:	4b15      	ldr	r3, [pc, #84]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007ae:	2200      	movs	r2, #0
 81007b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81007b2:	4b14      	ldr	r3, [pc, #80]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81007ba:	4b12      	ldr	r3, [pc, #72]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007bc:	2200      	movs	r2, #0
 81007be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81007c0:	4b10      	ldr	r3, [pc, #64]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007c2:	2200      	movs	r2, #0
 81007c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007c8:	2200      	movs	r2, #0
 81007ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81007cc:	4b0d      	ldr	r3, [pc, #52]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007ce:	2200      	movs	r2, #0
 81007d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007d4:	2200      	movs	r2, #0
 81007d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007da:	2200      	movs	r2, #0
 81007dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81007de:	4b09      	ldr	r3, [pc, #36]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007e0:	2200      	movs	r2, #0
 81007e2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81007e4:	4b07      	ldr	r3, [pc, #28]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007e6:	2200      	movs	r2, #0
 81007e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81007ea:	4b06      	ldr	r3, [pc, #24]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007ec:	2200      	movs	r2, #0
 81007ee:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 81007f0:	4804      	ldr	r0, [pc, #16]	@ (8100804 <MX_SPI2_Init+0xa4>)
 81007f2:	f002 ffa1 	bl	8103738 <HAL_SPI_Init>
 81007f6:	4603      	mov	r3, r0
 81007f8:	2b00      	cmp	r3, #0
 81007fa:	d001      	beq.n	8100800 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 81007fc:	f7ff ffaa 	bl	8100754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100800:	bf00      	nop
 8100802:	bd80      	pop	{r7, pc}
 8100804:	10000058 	.word	0x10000058
 8100808:	40003800 	.word	0x40003800

0810080c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 810080c:	b580      	push	{r7, lr}
 810080e:	b0bc      	sub	sp, #240	@ 0xf0
 8100810:	af00      	add	r7, sp, #0
 8100812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100814:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100818:	2200      	movs	r2, #0
 810081a:	601a      	str	r2, [r3, #0]
 810081c:	605a      	str	r2, [r3, #4]
 810081e:	609a      	str	r2, [r3, #8]
 8100820:	60da      	str	r2, [r3, #12]
 8100822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100824:	f107 0318 	add.w	r3, r7, #24
 8100828:	22c0      	movs	r2, #192	@ 0xc0
 810082a:	2100      	movs	r1, #0
 810082c:	4618      	mov	r0, r3
 810082e:	f004 f8b9 	bl	81049a4 <memset>
  if(spiHandle->Instance==SPI2)
 8100832:	687b      	ldr	r3, [r7, #4]
 8100834:	681b      	ldr	r3, [r3, #0]
 8100836:	4a38      	ldr	r2, [pc, #224]	@ (8100918 <HAL_SPI_MspInit+0x10c>)
 8100838:	4293      	cmp	r3, r2
 810083a:	d169      	bne.n	8100910 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 810083c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8100840:	f04f 0300 	mov.w	r3, #0
 8100844:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8100848:	2300      	movs	r3, #0
 810084a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810084c:	f107 0318 	add.w	r3, r7, #24
 8100850:	4618      	mov	r0, r3
 8100852:	f001 f945 	bl	8101ae0 <HAL_RCCEx_PeriphCLKConfig>
 8100856:	4603      	mov	r3, r0
 8100858:	2b00      	cmp	r3, #0
 810085a:	d001      	beq.n	8100860 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 810085c:	f7ff ff7a 	bl	8100754 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8100860:	4b2e      	ldr	r3, [pc, #184]	@ (810091c <HAL_SPI_MspInit+0x110>)
 8100862:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100866:	4a2d      	ldr	r2, [pc, #180]	@ (810091c <HAL_SPI_MspInit+0x110>)
 8100868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810086c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100870:	4b2a      	ldr	r3, [pc, #168]	@ (810091c <HAL_SPI_MspInit+0x110>)
 8100872:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810087a:	617b      	str	r3, [r7, #20]
 810087c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 810087e:	4b27      	ldr	r3, [pc, #156]	@ (810091c <HAL_SPI_MspInit+0x110>)
 8100880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100884:	4a25      	ldr	r2, [pc, #148]	@ (810091c <HAL_SPI_MspInit+0x110>)
 8100886:	f043 0304 	orr.w	r3, r3, #4
 810088a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810088e:	4b23      	ldr	r3, [pc, #140]	@ (810091c <HAL_SPI_MspInit+0x110>)
 8100890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100894:	f003 0304 	and.w	r3, r3, #4
 8100898:	613b      	str	r3, [r7, #16]
 810089a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810089c:	4b1f      	ldr	r3, [pc, #124]	@ (810091c <HAL_SPI_MspInit+0x110>)
 810089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008a2:	4a1e      	ldr	r2, [pc, #120]	@ (810091c <HAL_SPI_MspInit+0x110>)
 81008a4:	f043 0302 	orr.w	r3, r3, #2
 81008a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008ac:	4b1b      	ldr	r3, [pc, #108]	@ (810091c <HAL_SPI_MspInit+0x110>)
 81008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008b2:	f003 0302 	and.w	r3, r3, #2
 81008b6:	60fb      	str	r3, [r7, #12]
 81008b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 81008ba:	2306      	movs	r3, #6
 81008bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81008c0:	2302      	movs	r3, #2
 81008c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008c6:	2300      	movs	r3, #0
 81008c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008cc:	2300      	movs	r3, #0
 81008ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 81008d2:	2305      	movs	r3, #5
 81008d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81008d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81008dc:	4619      	mov	r1, r3
 81008de:	4810      	ldr	r0, [pc, #64]	@ (8100920 <HAL_SPI_MspInit+0x114>)
 81008e0:	f000 fcac 	bl	810123c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 81008e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81008e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81008ec:	2302      	movs	r3, #2
 81008ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008f2:	2300      	movs	r3, #0
 81008f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008f8:	2300      	movs	r3, #0
 81008fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 81008fe:	2305      	movs	r3, #5
 8100900:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100904:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100908:	4619      	mov	r1, r3
 810090a:	4806      	ldr	r0, [pc, #24]	@ (8100924 <HAL_SPI_MspInit+0x118>)
 810090c:	f000 fc96 	bl	810123c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8100910:	bf00      	nop
 8100912:	37f0      	adds	r7, #240	@ 0xf0
 8100914:	46bd      	mov	sp, r7
 8100916:	bd80      	pop	{r7, pc}
 8100918:	40003800 	.word	0x40003800
 810091c:	58024400 	.word	0x58024400
 8100920:	58020800 	.word	0x58020800
 8100924:	58020400 	.word	0x58020400

08100928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100928:	b480      	push	{r7}
 810092a:	b083      	sub	sp, #12
 810092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810092e:	4b0a      	ldr	r3, [pc, #40]	@ (8100958 <HAL_MspInit+0x30>)
 8100930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100934:	4a08      	ldr	r2, [pc, #32]	@ (8100958 <HAL_MspInit+0x30>)
 8100936:	f043 0302 	orr.w	r3, r3, #2
 810093a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810093e:	4b06      	ldr	r3, [pc, #24]	@ (8100958 <HAL_MspInit+0x30>)
 8100940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100944:	f003 0302 	and.w	r3, r3, #2
 8100948:	607b      	str	r3, [r7, #4]
 810094a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810094c:	bf00      	nop
 810094e:	370c      	adds	r7, #12
 8100950:	46bd      	mov	sp, r7
 8100952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100956:	4770      	bx	lr
 8100958:	58024400 	.word	0x58024400

0810095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810095c:	b480      	push	{r7}
 810095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100960:	bf00      	nop
 8100962:	e7fd      	b.n	8100960 <NMI_Handler+0x4>

08100964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100964:	b480      	push	{r7}
 8100966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100968:	bf00      	nop
 810096a:	e7fd      	b.n	8100968 <HardFault_Handler+0x4>

0810096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810096c:	b480      	push	{r7}
 810096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100970:	bf00      	nop
 8100972:	e7fd      	b.n	8100970 <MemManage_Handler+0x4>

08100974 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100974:	b480      	push	{r7}
 8100976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100978:	bf00      	nop
 810097a:	e7fd      	b.n	8100978 <BusFault_Handler+0x4>

0810097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810097c:	b480      	push	{r7}
 810097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100980:	bf00      	nop
 8100982:	e7fd      	b.n	8100980 <UsageFault_Handler+0x4>

08100984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100984:	b480      	push	{r7}
 8100986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100988:	bf00      	nop
 810098a:	46bd      	mov	sp, r7
 810098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100990:	4770      	bx	lr

08100992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100992:	b480      	push	{r7}
 8100994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100996:	bf00      	nop
 8100998:	46bd      	mov	sp, r7
 810099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810099e:	4770      	bx	lr

081009a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81009a0:	b480      	push	{r7}
 81009a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81009a4:	bf00      	nop
 81009a6:	46bd      	mov	sp, r7
 81009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009ac:	4770      	bx	lr

081009ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81009ae:	b580      	push	{r7, lr}
 81009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81009b2:	f000 fa91 	bl	8100ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81009b6:	bf00      	nop
 81009b8:	bd80      	pop	{r7, pc}

081009ba <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 81009ba:	b580      	push	{r7, lr}
 81009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 81009be:	2000      	movs	r0, #0
 81009c0:	f000 f916 	bl	8100bf0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 81009c4:	bf00      	nop
 81009c6:	bd80      	pop	{r7, pc}

081009c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81009c8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8100a04 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 81009cc:	f7ff fe14 	bl	81005f8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 81009d0:	f7ff fdfa 	bl	81005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81009d4:	480c      	ldr	r0, [pc, #48]	@ (8100a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81009d6:	490d      	ldr	r1, [pc, #52]	@ (8100a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8100a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81009dc:	e002      	b.n	81009e4 <LoopCopyDataInit>

081009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81009e2:	3304      	adds	r3, #4

081009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81009e8:	d3f9      	bcc.n	81009de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8100a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81009ec:	4c0a      	ldr	r4, [pc, #40]	@ (8100a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 81009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 81009f0:	e001      	b.n	81009f6 <LoopFillZerobss>

081009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81009f4:	3204      	adds	r2, #4

081009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81009f8:	d3fb      	bcc.n	81009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81009fa:	f003 ffdb 	bl	81049b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81009fe:	f7ff fe3d 	bl	810067c <main>
  bx  lr
 8100a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100a04:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100a08:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100a0c:	1000002c 	.word	0x1000002c
  ldr r2, =_sidata
 8100a10:	08104a58 	.word	0x08104a58
  ldr r2, =_sbss
 8100a14:	1000002c 	.word	0x1000002c
  ldr r4, =_ebss
 8100a18:	10000180 	.word	0x10000180

08100a1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100a1c:	e7fe      	b.n	8100a1c <ADC3_IRQHandler>
	...

08100a20 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8100a20:	b580      	push	{r7, lr}
 8100a22:	b08c      	sub	sp, #48	@ 0x30
 8100a24:	af00      	add	r7, sp, #0
 8100a26:	4603      	mov	r3, r0
 8100a28:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8100a2a:	2300      	movs	r3, #0
 8100a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8100a2e:	79fb      	ldrb	r3, [r7, #7]
 8100a30:	2b00      	cmp	r3, #0
 8100a32:	d009      	beq.n	8100a48 <BSP_LED_Init+0x28>
 8100a34:	79fb      	ldrb	r3, [r7, #7]
 8100a36:	2b01      	cmp	r3, #1
 8100a38:	d006      	beq.n	8100a48 <BSP_LED_Init+0x28>
 8100a3a:	79fb      	ldrb	r3, [r7, #7]
 8100a3c:	2b02      	cmp	r3, #2
 8100a3e:	d003      	beq.n	8100a48 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8100a40:	f06f 0301 	mvn.w	r3, #1
 8100a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8100a46:	e055      	b.n	8100af4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8100a48:	79fb      	ldrb	r3, [r7, #7]
 8100a4a:	2b00      	cmp	r3, #0
 8100a4c:	d10f      	bne.n	8100a6e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8100a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8100b00 <BSP_LED_Init+0xe0>)
 8100a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a54:	4a2a      	ldr	r2, [pc, #168]	@ (8100b00 <BSP_LED_Init+0xe0>)
 8100a56:	f043 0302 	orr.w	r3, r3, #2
 8100a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100a5e:	4b28      	ldr	r3, [pc, #160]	@ (8100b00 <BSP_LED_Init+0xe0>)
 8100a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a64:	f003 0302 	and.w	r3, r3, #2
 8100a68:	617b      	str	r3, [r7, #20]
 8100a6a:	697b      	ldr	r3, [r7, #20]
 8100a6c:	e021      	b.n	8100ab2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8100a6e:	79fb      	ldrb	r3, [r7, #7]
 8100a70:	2b01      	cmp	r3, #1
 8100a72:	d10f      	bne.n	8100a94 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8100a74:	4b22      	ldr	r3, [pc, #136]	@ (8100b00 <BSP_LED_Init+0xe0>)
 8100a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a7a:	4a21      	ldr	r2, [pc, #132]	@ (8100b00 <BSP_LED_Init+0xe0>)
 8100a7c:	f043 0310 	orr.w	r3, r3, #16
 8100a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100a84:	4b1e      	ldr	r3, [pc, #120]	@ (8100b00 <BSP_LED_Init+0xe0>)
 8100a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a8a:	f003 0310 	and.w	r3, r3, #16
 8100a8e:	613b      	str	r3, [r7, #16]
 8100a90:	693b      	ldr	r3, [r7, #16]
 8100a92:	e00e      	b.n	8100ab2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8100a94:	4b1a      	ldr	r3, [pc, #104]	@ (8100b00 <BSP_LED_Init+0xe0>)
 8100a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a9a:	4a19      	ldr	r2, [pc, #100]	@ (8100b00 <BSP_LED_Init+0xe0>)
 8100a9c:	f043 0302 	orr.w	r3, r3, #2
 8100aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100aa4:	4b16      	ldr	r3, [pc, #88]	@ (8100b00 <BSP_LED_Init+0xe0>)
 8100aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100aaa:	f003 0302 	and.w	r3, r3, #2
 8100aae:	60fb      	str	r3, [r7, #12]
 8100ab0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8100ab2:	79fb      	ldrb	r3, [r7, #7]
 8100ab4:	4a13      	ldr	r2, [pc, #76]	@ (8100b04 <BSP_LED_Init+0xe4>)
 8100ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8100aba:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8100abc:	2301      	movs	r3, #1
 8100abe:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8100ac0:	2300      	movs	r3, #0
 8100ac2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100ac4:	2303      	movs	r3, #3
 8100ac6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8100ac8:	79fb      	ldrb	r3, [r7, #7]
 8100aca:	4a0f      	ldr	r2, [pc, #60]	@ (8100b08 <BSP_LED_Init+0xe8>)
 8100acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100ad0:	f107 0218 	add.w	r2, r7, #24
 8100ad4:	4611      	mov	r1, r2
 8100ad6:	4618      	mov	r0, r3
 8100ad8:	f000 fbb0 	bl	810123c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8100adc:	79fb      	ldrb	r3, [r7, #7]
 8100ade:	4a0a      	ldr	r2, [pc, #40]	@ (8100b08 <BSP_LED_Init+0xe8>)
 8100ae0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8100ae4:	79fb      	ldrb	r3, [r7, #7]
 8100ae6:	4a07      	ldr	r2, [pc, #28]	@ (8100b04 <BSP_LED_Init+0xe4>)
 8100ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8100aec:	2200      	movs	r2, #0
 8100aee:	4619      	mov	r1, r3
 8100af0:	f000 fd54 	bl	810159c <HAL_GPIO_WritePin>
  }

  return ret;
 8100af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8100af6:	4618      	mov	r0, r3
 8100af8:	3730      	adds	r7, #48	@ 0x30
 8100afa:	46bd      	mov	sp, r7
 8100afc:	bd80      	pop	{r7, pc}
 8100afe:	bf00      	nop
 8100b00:	58024400 	.word	0x58024400
 8100b04:	08104a24 	.word	0x08104a24
 8100b08:	1000000c 	.word	0x1000000c

08100b0c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8100b0c:	b580      	push	{r7, lr}
 8100b0e:	b088      	sub	sp, #32
 8100b10:	af00      	add	r7, sp, #0
 8100b12:	4603      	mov	r3, r0
 8100b14:	460a      	mov	r2, r1
 8100b16:	71fb      	strb	r3, [r7, #7]
 8100b18:	4613      	mov	r3, r2
 8100b1a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8100b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8100bd8 <BSP_PB_Init+0xcc>)
 8100b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b22:	4a2d      	ldr	r2, [pc, #180]	@ (8100bd8 <BSP_PB_Init+0xcc>)
 8100b24:	f043 0304 	orr.w	r3, r3, #4
 8100b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8100bd8 <BSP_PB_Init+0xcc>)
 8100b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b32:	f003 0304 	and.w	r3, r3, #4
 8100b36:	60bb      	str	r3, [r7, #8]
 8100b38:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8100b3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8100b3e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8100b40:	2302      	movs	r3, #2
 8100b42:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8100b44:	2302      	movs	r3, #2
 8100b46:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8100b48:	79bb      	ldrb	r3, [r7, #6]
 8100b4a:	2b00      	cmp	r3, #0
 8100b4c:	d10c      	bne.n	8100b68 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8100b4e:	2300      	movs	r3, #0
 8100b50:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8100b52:	79fb      	ldrb	r3, [r7, #7]
 8100b54:	4a21      	ldr	r2, [pc, #132]	@ (8100bdc <BSP_PB_Init+0xd0>)
 8100b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100b5a:	f107 020c 	add.w	r2, r7, #12
 8100b5e:	4611      	mov	r1, r2
 8100b60:	4618      	mov	r0, r3
 8100b62:	f000 fb6b 	bl	810123c <HAL_GPIO_Init>
 8100b66:	e031      	b.n	8100bcc <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8100b68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8100b6c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8100b6e:	79fb      	ldrb	r3, [r7, #7]
 8100b70:	4a1a      	ldr	r2, [pc, #104]	@ (8100bdc <BSP_PB_Init+0xd0>)
 8100b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100b76:	f107 020c 	add.w	r2, r7, #12
 8100b7a:	4611      	mov	r1, r2
 8100b7c:	4618      	mov	r0, r3
 8100b7e:	f000 fb5d 	bl	810123c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8100b82:	79fb      	ldrb	r3, [r7, #7]
 8100b84:	00db      	lsls	r3, r3, #3
 8100b86:	4a16      	ldr	r2, [pc, #88]	@ (8100be0 <BSP_PB_Init+0xd4>)
 8100b88:	441a      	add	r2, r3
 8100b8a:	79fb      	ldrb	r3, [r7, #7]
 8100b8c:	4915      	ldr	r1, [pc, #84]	@ (8100be4 <BSP_PB_Init+0xd8>)
 8100b8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8100b92:	4619      	mov	r1, r3
 8100b94:	4610      	mov	r0, r2
 8100b96:	f000 fb02 	bl	810119e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8100b9a:	79fb      	ldrb	r3, [r7, #7]
 8100b9c:	00db      	lsls	r3, r3, #3
 8100b9e:	4a10      	ldr	r2, [pc, #64]	@ (8100be0 <BSP_PB_Init+0xd4>)
 8100ba0:	1898      	adds	r0, r3, r2
 8100ba2:	79fb      	ldrb	r3, [r7, #7]
 8100ba4:	4a10      	ldr	r2, [pc, #64]	@ (8100be8 <BSP_PB_Init+0xdc>)
 8100ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100baa:	461a      	mov	r2, r3
 8100bac:	2100      	movs	r1, #0
 8100bae:	f000 fad7 	bl	8101160 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8100bb2:	2028      	movs	r0, #40	@ 0x28
 8100bb4:	79fb      	ldrb	r3, [r7, #7]
 8100bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8100bec <BSP_PB_Init+0xe0>)
 8100bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100bbc:	2200      	movs	r2, #0
 8100bbe:	4619      	mov	r1, r3
 8100bc0:	f000 fa85 	bl	81010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8100bc4:	2328      	movs	r3, #40	@ 0x28
 8100bc6:	4618      	mov	r0, r3
 8100bc8:	f000 fa9b 	bl	8101102 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8100bcc:	2300      	movs	r3, #0
}
 8100bce:	4618      	mov	r0, r3
 8100bd0:	3720      	adds	r7, #32
 8100bd2:	46bd      	mov	sp, r7
 8100bd4:	bd80      	pop	{r7, pc}
 8100bd6:	bf00      	nop
 8100bd8:	58024400 	.word	0x58024400
 8100bdc:	10000018 	.word	0x10000018
 8100be0:	100000e0 	.word	0x100000e0
 8100be4:	08104a2c 	.word	0x08104a2c
 8100be8:	1000001c 	.word	0x1000001c
 8100bec:	10000020 	.word	0x10000020

08100bf0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8100bf0:	b580      	push	{r7, lr}
 8100bf2:	b082      	sub	sp, #8
 8100bf4:	af00      	add	r7, sp, #0
 8100bf6:	4603      	mov	r3, r0
 8100bf8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8100bfa:	79fb      	ldrb	r3, [r7, #7]
 8100bfc:	00db      	lsls	r3, r3, #3
 8100bfe:	4a04      	ldr	r2, [pc, #16]	@ (8100c10 <BSP_PB_IRQHandler+0x20>)
 8100c00:	4413      	add	r3, r2
 8100c02:	4618      	mov	r0, r3
 8100c04:	f000 fadf 	bl	81011c6 <HAL_EXTI_IRQHandler>
}
 8100c08:	bf00      	nop
 8100c0a:	3708      	adds	r7, #8
 8100c0c:	46bd      	mov	sp, r7
 8100c0e:	bd80      	pop	{r7, pc}
 8100c10:	100000e0 	.word	0x100000e0

08100c14 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8100c14:	b480      	push	{r7}
 8100c16:	b083      	sub	sp, #12
 8100c18:	af00      	add	r7, sp, #0
 8100c1a:	4603      	mov	r3, r0
 8100c1c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8100c1e:	bf00      	nop
 8100c20:	370c      	adds	r7, #12
 8100c22:	46bd      	mov	sp, r7
 8100c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c28:	4770      	bx	lr
	...

08100c2c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8100c2c:	b580      	push	{r7, lr}
 8100c2e:	b084      	sub	sp, #16
 8100c30:	af00      	add	r7, sp, #0
 8100c32:	4603      	mov	r3, r0
 8100c34:	6039      	str	r1, [r7, #0]
 8100c36:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8100c38:	2300      	movs	r3, #0
 8100c3a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8100c3c:	79fb      	ldrb	r3, [r7, #7]
 8100c3e:	2b00      	cmp	r3, #0
 8100c40:	d003      	beq.n	8100c4a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8100c42:	f06f 0301 	mvn.w	r3, #1
 8100c46:	60fb      	str	r3, [r7, #12]
 8100c48:	e018      	b.n	8100c7c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8100c4a:	79fb      	ldrb	r3, [r7, #7]
 8100c4c:	2294      	movs	r2, #148	@ 0x94
 8100c4e:	fb02 f303 	mul.w	r3, r2, r3
 8100c52:	4a0d      	ldr	r2, [pc, #52]	@ (8100c88 <BSP_COM_Init+0x5c>)
 8100c54:	4413      	add	r3, r2
 8100c56:	4618      	mov	r0, r3
 8100c58:	f000 f852 	bl	8100d00 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8100c5c:	79fb      	ldrb	r3, [r7, #7]
 8100c5e:	2294      	movs	r2, #148	@ 0x94
 8100c60:	fb02 f303 	mul.w	r3, r2, r3
 8100c64:	4a08      	ldr	r2, [pc, #32]	@ (8100c88 <BSP_COM_Init+0x5c>)
 8100c66:	4413      	add	r3, r2
 8100c68:	6839      	ldr	r1, [r7, #0]
 8100c6a:	4618      	mov	r0, r3
 8100c6c:	f000 f80e 	bl	8100c8c <MX_USART3_Init>
 8100c70:	4603      	mov	r3, r0
 8100c72:	2b00      	cmp	r3, #0
 8100c74:	d002      	beq.n	8100c7c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8100c76:	f06f 0303 	mvn.w	r3, #3
 8100c7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8100c7c:	68fb      	ldr	r3, [r7, #12]
}
 8100c7e:	4618      	mov	r0, r3
 8100c80:	3710      	adds	r7, #16
 8100c82:	46bd      	mov	sp, r7
 8100c84:	bd80      	pop	{r7, pc}
 8100c86:	bf00      	nop
 8100c88:	100000e8 	.word	0x100000e8

08100c8c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8100c8c:	b580      	push	{r7, lr}
 8100c8e:	b082      	sub	sp, #8
 8100c90:	af00      	add	r7, sp, #0
 8100c92:	6078      	str	r0, [r7, #4]
 8100c94:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8100c96:	4b15      	ldr	r3, [pc, #84]	@ (8100cec <MX_USART3_Init+0x60>)
 8100c98:	681a      	ldr	r2, [r3, #0]
 8100c9a:	687b      	ldr	r3, [r7, #4]
 8100c9c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8100c9e:	683b      	ldr	r3, [r7, #0]
 8100ca0:	681a      	ldr	r2, [r3, #0]
 8100ca2:	687b      	ldr	r3, [r7, #4]
 8100ca4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8100ca6:	687b      	ldr	r3, [r7, #4]
 8100ca8:	220c      	movs	r2, #12
 8100caa:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8100cac:	683b      	ldr	r3, [r7, #0]
 8100cae:	895b      	ldrh	r3, [r3, #10]
 8100cb0:	461a      	mov	r2, r3
 8100cb2:	687b      	ldr	r3, [r7, #4]
 8100cb4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8100cb6:	683b      	ldr	r3, [r7, #0]
 8100cb8:	685a      	ldr	r2, [r3, #4]
 8100cba:	687b      	ldr	r3, [r7, #4]
 8100cbc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8100cbe:	683b      	ldr	r3, [r7, #0]
 8100cc0:	891b      	ldrh	r3, [r3, #8]
 8100cc2:	461a      	mov	r2, r3
 8100cc4:	687b      	ldr	r3, [r7, #4]
 8100cc6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8100cc8:	683b      	ldr	r3, [r7, #0]
 8100cca:	899b      	ldrh	r3, [r3, #12]
 8100ccc:	461a      	mov	r2, r3
 8100cce:	687b      	ldr	r3, [r7, #4]
 8100cd0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8100cd2:	687b      	ldr	r3, [r7, #4]
 8100cd4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8100cd8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8100cda:	6878      	ldr	r0, [r7, #4]
 8100cdc:	f002 fe6b 	bl	81039b6 <HAL_UART_Init>
 8100ce0:	4603      	mov	r3, r0
}
 8100ce2:	4618      	mov	r0, r3
 8100ce4:	3708      	adds	r7, #8
 8100ce6:	46bd      	mov	sp, r7
 8100ce8:	bd80      	pop	{r7, pc}
 8100cea:	bf00      	nop
 8100cec:	10000008 	.word	0x10000008

08100cf0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8100cf0:	b580      	push	{r7, lr}
 8100cf2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8100cf4:	2000      	movs	r0, #0
 8100cf6:	f7ff ff8d 	bl	8100c14 <BSP_PB_Callback>
}
 8100cfa:	bf00      	nop
 8100cfc:	bd80      	pop	{r7, pc}
	...

08100d00 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8100d00:	b580      	push	{r7, lr}
 8100d02:	b08a      	sub	sp, #40	@ 0x28
 8100d04:	af00      	add	r7, sp, #0
 8100d06:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8100d08:	4b27      	ldr	r3, [pc, #156]	@ (8100da8 <COM1_MspInit+0xa8>)
 8100d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d0e:	4a26      	ldr	r2, [pc, #152]	@ (8100da8 <COM1_MspInit+0xa8>)
 8100d10:	f043 0308 	orr.w	r3, r3, #8
 8100d14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d18:	4b23      	ldr	r3, [pc, #140]	@ (8100da8 <COM1_MspInit+0xa8>)
 8100d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d1e:	f003 0308 	and.w	r3, r3, #8
 8100d22:	613b      	str	r3, [r7, #16]
 8100d24:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8100d26:	4b20      	ldr	r3, [pc, #128]	@ (8100da8 <COM1_MspInit+0xa8>)
 8100d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8100da8 <COM1_MspInit+0xa8>)
 8100d2e:	f043 0308 	orr.w	r3, r3, #8
 8100d32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d36:	4b1c      	ldr	r3, [pc, #112]	@ (8100da8 <COM1_MspInit+0xa8>)
 8100d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d3c:	f003 0308 	and.w	r3, r3, #8
 8100d40:	60fb      	str	r3, [r7, #12]
 8100d42:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8100d44:	4b18      	ldr	r3, [pc, #96]	@ (8100da8 <COM1_MspInit+0xa8>)
 8100d46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100d4a:	4a17      	ldr	r2, [pc, #92]	@ (8100da8 <COM1_MspInit+0xa8>)
 8100d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8100d50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100d54:	4b14      	ldr	r3, [pc, #80]	@ (8100da8 <COM1_MspInit+0xa8>)
 8100d56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100d5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8100d5e:	60bb      	str	r3, [r7, #8]
 8100d60:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8100d62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8100d66:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8100d68:	2302      	movs	r3, #2
 8100d6a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8100d6c:	2302      	movs	r3, #2
 8100d6e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8100d70:	2301      	movs	r3, #1
 8100d72:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8100d74:	2307      	movs	r3, #7
 8100d76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8100d78:	f107 0314 	add.w	r3, r7, #20
 8100d7c:	4619      	mov	r1, r3
 8100d7e:	480b      	ldr	r0, [pc, #44]	@ (8100dac <COM1_MspInit+0xac>)
 8100d80:	f000 fa5c 	bl	810123c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8100d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8100d88:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8100d8a:	2302      	movs	r3, #2
 8100d8c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8100d8e:	2307      	movs	r3, #7
 8100d90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8100d92:	f107 0314 	add.w	r3, r7, #20
 8100d96:	4619      	mov	r1, r3
 8100d98:	4804      	ldr	r0, [pc, #16]	@ (8100dac <COM1_MspInit+0xac>)
 8100d9a:	f000 fa4f 	bl	810123c <HAL_GPIO_Init>
}
 8100d9e:	bf00      	nop
 8100da0:	3728      	adds	r7, #40	@ 0x28
 8100da2:	46bd      	mov	sp, r7
 8100da4:	bd80      	pop	{r7, pc}
 8100da6:	bf00      	nop
 8100da8:	58024400 	.word	0x58024400
 8100dac:	58020c00 	.word	0x58020c00

08100db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100db0:	b580      	push	{r7, lr}
 8100db2:	b082      	sub	sp, #8
 8100db4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100db6:	4b28      	ldr	r3, [pc, #160]	@ (8100e58 <HAL_Init+0xa8>)
 8100db8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100dbc:	4a26      	ldr	r2, [pc, #152]	@ (8100e58 <HAL_Init+0xa8>)
 8100dbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100dc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100dc6:	4b24      	ldr	r3, [pc, #144]	@ (8100e58 <HAL_Init+0xa8>)
 8100dc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100dd0:	603b      	str	r3, [r7, #0]
 8100dd2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100dd4:	4b21      	ldr	r3, [pc, #132]	@ (8100e5c <HAL_Init+0xac>)
 8100dd6:	681b      	ldr	r3, [r3, #0]
 8100dd8:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100ddc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100de0:	4a1e      	ldr	r2, [pc, #120]	@ (8100e5c <HAL_Init+0xac>)
 8100de2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100de6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100de8:	4b1c      	ldr	r3, [pc, #112]	@ (8100e5c <HAL_Init+0xac>)
 8100dea:	681b      	ldr	r3, [r3, #0]
 8100dec:	4a1b      	ldr	r2, [pc, #108]	@ (8100e5c <HAL_Init+0xac>)
 8100dee:	f043 0301 	orr.w	r3, r3, #1
 8100df2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100df4:	2003      	movs	r0, #3
 8100df6:	f000 f95f 	bl	81010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100dfa:	f000 fc99 	bl	8101730 <HAL_RCC_GetSysClockFreq>
 8100dfe:	4602      	mov	r2, r0
 8100e00:	4b15      	ldr	r3, [pc, #84]	@ (8100e58 <HAL_Init+0xa8>)
 8100e02:	699b      	ldr	r3, [r3, #24]
 8100e04:	0a1b      	lsrs	r3, r3, #8
 8100e06:	f003 030f 	and.w	r3, r3, #15
 8100e0a:	4915      	ldr	r1, [pc, #84]	@ (8100e60 <HAL_Init+0xb0>)
 8100e0c:	5ccb      	ldrb	r3, [r1, r3]
 8100e0e:	f003 031f 	and.w	r3, r3, #31
 8100e12:	fa22 f303 	lsr.w	r3, r2, r3
 8100e16:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100e18:	4b0f      	ldr	r3, [pc, #60]	@ (8100e58 <HAL_Init+0xa8>)
 8100e1a:	699b      	ldr	r3, [r3, #24]
 8100e1c:	f003 030f 	and.w	r3, r3, #15
 8100e20:	4a0f      	ldr	r2, [pc, #60]	@ (8100e60 <HAL_Init+0xb0>)
 8100e22:	5cd3      	ldrb	r3, [r2, r3]
 8100e24:	f003 031f 	and.w	r3, r3, #31
 8100e28:	687a      	ldr	r2, [r7, #4]
 8100e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8100e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8100e64 <HAL_Init+0xb4>)
 8100e30:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100e32:	4b0c      	ldr	r3, [pc, #48]	@ (8100e64 <HAL_Init+0xb4>)
 8100e34:	681b      	ldr	r3, [r3, #0]
 8100e36:	4a0c      	ldr	r2, [pc, #48]	@ (8100e68 <HAL_Init+0xb8>)
 8100e38:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100e3a:	2000      	movs	r0, #0
 8100e3c:	f000 f816 	bl	8100e6c <HAL_InitTick>
 8100e40:	4603      	mov	r3, r0
 8100e42:	2b00      	cmp	r3, #0
 8100e44:	d001      	beq.n	8100e4a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100e46:	2301      	movs	r3, #1
 8100e48:	e002      	b.n	8100e50 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100e4a:	f7ff fd6d 	bl	8100928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100e4e:	2300      	movs	r3, #0
}
 8100e50:	4618      	mov	r0, r3
 8100e52:	3708      	adds	r7, #8
 8100e54:	46bd      	mov	sp, r7
 8100e56:	bd80      	pop	{r7, pc}
 8100e58:	58024400 	.word	0x58024400
 8100e5c:	40024400 	.word	0x40024400
 8100e60:	08104a14 	.word	0x08104a14
 8100e64:	10000004 	.word	0x10000004
 8100e68:	10000000 	.word	0x10000000

08100e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100e6c:	b580      	push	{r7, lr}
 8100e6e:	b082      	sub	sp, #8
 8100e70:	af00      	add	r7, sp, #0
 8100e72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100e74:	4b15      	ldr	r3, [pc, #84]	@ (8100ecc <HAL_InitTick+0x60>)
 8100e76:	781b      	ldrb	r3, [r3, #0]
 8100e78:	2b00      	cmp	r3, #0
 8100e7a:	d101      	bne.n	8100e80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100e7c:	2301      	movs	r3, #1
 8100e7e:	e021      	b.n	8100ec4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100e80:	4b13      	ldr	r3, [pc, #76]	@ (8100ed0 <HAL_InitTick+0x64>)
 8100e82:	681a      	ldr	r2, [r3, #0]
 8100e84:	4b11      	ldr	r3, [pc, #68]	@ (8100ecc <HAL_InitTick+0x60>)
 8100e86:	781b      	ldrb	r3, [r3, #0]
 8100e88:	4619      	mov	r1, r3
 8100e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8100e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8100e96:	4618      	mov	r0, r3
 8100e98:	f000 f941 	bl	810111e <HAL_SYSTICK_Config>
 8100e9c:	4603      	mov	r3, r0
 8100e9e:	2b00      	cmp	r3, #0
 8100ea0:	d001      	beq.n	8100ea6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100ea2:	2301      	movs	r3, #1
 8100ea4:	e00e      	b.n	8100ec4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100ea6:	687b      	ldr	r3, [r7, #4]
 8100ea8:	2b0f      	cmp	r3, #15
 8100eaa:	d80a      	bhi.n	8100ec2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100eac:	2200      	movs	r2, #0
 8100eae:	6879      	ldr	r1, [r7, #4]
 8100eb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100eb4:	f000 f90b 	bl	81010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100eb8:	4a06      	ldr	r2, [pc, #24]	@ (8100ed4 <HAL_InitTick+0x68>)
 8100eba:	687b      	ldr	r3, [r7, #4]
 8100ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100ebe:	2300      	movs	r3, #0
 8100ec0:	e000      	b.n	8100ec4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100ec2:	2301      	movs	r3, #1
}
 8100ec4:	4618      	mov	r0, r3
 8100ec6:	3708      	adds	r7, #8
 8100ec8:	46bd      	mov	sp, r7
 8100eca:	bd80      	pop	{r7, pc}
 8100ecc:	10000028 	.word	0x10000028
 8100ed0:	10000000 	.word	0x10000000
 8100ed4:	10000024 	.word	0x10000024

08100ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100ed8:	b480      	push	{r7}
 8100eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100edc:	4b06      	ldr	r3, [pc, #24]	@ (8100ef8 <HAL_IncTick+0x20>)
 8100ede:	781b      	ldrb	r3, [r3, #0]
 8100ee0:	461a      	mov	r2, r3
 8100ee2:	4b06      	ldr	r3, [pc, #24]	@ (8100efc <HAL_IncTick+0x24>)
 8100ee4:	681b      	ldr	r3, [r3, #0]
 8100ee6:	4413      	add	r3, r2
 8100ee8:	4a04      	ldr	r2, [pc, #16]	@ (8100efc <HAL_IncTick+0x24>)
 8100eea:	6013      	str	r3, [r2, #0]
}
 8100eec:	bf00      	nop
 8100eee:	46bd      	mov	sp, r7
 8100ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ef4:	4770      	bx	lr
 8100ef6:	bf00      	nop
 8100ef8:	10000028 	.word	0x10000028
 8100efc:	1000017c 	.word	0x1000017c

08100f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100f00:	b480      	push	{r7}
 8100f02:	af00      	add	r7, sp, #0
  return uwTick;
 8100f04:	4b03      	ldr	r3, [pc, #12]	@ (8100f14 <HAL_GetTick+0x14>)
 8100f06:	681b      	ldr	r3, [r3, #0]
}
 8100f08:	4618      	mov	r0, r3
 8100f0a:	46bd      	mov	sp, r7
 8100f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f10:	4770      	bx	lr
 8100f12:	bf00      	nop
 8100f14:	1000017c 	.word	0x1000017c

08100f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100f18:	b480      	push	{r7}
 8100f1a:	b085      	sub	sp, #20
 8100f1c:	af00      	add	r7, sp, #0
 8100f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100f20:	687b      	ldr	r3, [r7, #4]
 8100f22:	f003 0307 	and.w	r3, r3, #7
 8100f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100f28:	4b0c      	ldr	r3, [pc, #48]	@ (8100f5c <__NVIC_SetPriorityGrouping+0x44>)
 8100f2a:	68db      	ldr	r3, [r3, #12]
 8100f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100f2e:	68ba      	ldr	r2, [r7, #8]
 8100f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100f34:	4013      	ands	r3, r2
 8100f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100f38:	68fb      	ldr	r3, [r7, #12]
 8100f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100f3c:	68bb      	ldr	r3, [r7, #8]
 8100f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100f4a:	4a04      	ldr	r2, [pc, #16]	@ (8100f5c <__NVIC_SetPriorityGrouping+0x44>)
 8100f4c:	68bb      	ldr	r3, [r7, #8]
 8100f4e:	60d3      	str	r3, [r2, #12]
}
 8100f50:	bf00      	nop
 8100f52:	3714      	adds	r7, #20
 8100f54:	46bd      	mov	sp, r7
 8100f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f5a:	4770      	bx	lr
 8100f5c:	e000ed00 	.word	0xe000ed00

08100f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100f60:	b480      	push	{r7}
 8100f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100f64:	4b04      	ldr	r3, [pc, #16]	@ (8100f78 <__NVIC_GetPriorityGrouping+0x18>)
 8100f66:	68db      	ldr	r3, [r3, #12]
 8100f68:	0a1b      	lsrs	r3, r3, #8
 8100f6a:	f003 0307 	and.w	r3, r3, #7
}
 8100f6e:	4618      	mov	r0, r3
 8100f70:	46bd      	mov	sp, r7
 8100f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f76:	4770      	bx	lr
 8100f78:	e000ed00 	.word	0xe000ed00

08100f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100f7c:	b480      	push	{r7}
 8100f7e:	b083      	sub	sp, #12
 8100f80:	af00      	add	r7, sp, #0
 8100f82:	4603      	mov	r3, r0
 8100f84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100f8a:	2b00      	cmp	r3, #0
 8100f8c:	db0b      	blt.n	8100fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100f8e:	88fb      	ldrh	r3, [r7, #6]
 8100f90:	f003 021f 	and.w	r2, r3, #31
 8100f94:	4907      	ldr	r1, [pc, #28]	@ (8100fb4 <__NVIC_EnableIRQ+0x38>)
 8100f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100f9a:	095b      	lsrs	r3, r3, #5
 8100f9c:	2001      	movs	r0, #1
 8100f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8100fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100fa6:	bf00      	nop
 8100fa8:	370c      	adds	r7, #12
 8100faa:	46bd      	mov	sp, r7
 8100fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fb0:	4770      	bx	lr
 8100fb2:	bf00      	nop
 8100fb4:	e000e100 	.word	0xe000e100

08100fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100fb8:	b480      	push	{r7}
 8100fba:	b083      	sub	sp, #12
 8100fbc:	af00      	add	r7, sp, #0
 8100fbe:	4603      	mov	r3, r0
 8100fc0:	6039      	str	r1, [r7, #0]
 8100fc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100fc8:	2b00      	cmp	r3, #0
 8100fca:	db0a      	blt.n	8100fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100fcc:	683b      	ldr	r3, [r7, #0]
 8100fce:	b2da      	uxtb	r2, r3
 8100fd0:	490c      	ldr	r1, [pc, #48]	@ (8101004 <__NVIC_SetPriority+0x4c>)
 8100fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100fd6:	0112      	lsls	r2, r2, #4
 8100fd8:	b2d2      	uxtb	r2, r2
 8100fda:	440b      	add	r3, r1
 8100fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100fe0:	e00a      	b.n	8100ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100fe2:	683b      	ldr	r3, [r7, #0]
 8100fe4:	b2da      	uxtb	r2, r3
 8100fe6:	4908      	ldr	r1, [pc, #32]	@ (8101008 <__NVIC_SetPriority+0x50>)
 8100fe8:	88fb      	ldrh	r3, [r7, #6]
 8100fea:	f003 030f 	and.w	r3, r3, #15
 8100fee:	3b04      	subs	r3, #4
 8100ff0:	0112      	lsls	r2, r2, #4
 8100ff2:	b2d2      	uxtb	r2, r2
 8100ff4:	440b      	add	r3, r1
 8100ff6:	761a      	strb	r2, [r3, #24]
}
 8100ff8:	bf00      	nop
 8100ffa:	370c      	adds	r7, #12
 8100ffc:	46bd      	mov	sp, r7
 8100ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101002:	4770      	bx	lr
 8101004:	e000e100 	.word	0xe000e100
 8101008:	e000ed00 	.word	0xe000ed00

0810100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810100c:	b480      	push	{r7}
 810100e:	b089      	sub	sp, #36	@ 0x24
 8101010:	af00      	add	r7, sp, #0
 8101012:	60f8      	str	r0, [r7, #12]
 8101014:	60b9      	str	r1, [r7, #8]
 8101016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101018:	68fb      	ldr	r3, [r7, #12]
 810101a:	f003 0307 	and.w	r3, r3, #7
 810101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101020:	69fb      	ldr	r3, [r7, #28]
 8101022:	f1c3 0307 	rsb	r3, r3, #7
 8101026:	2b04      	cmp	r3, #4
 8101028:	bf28      	it	cs
 810102a:	2304      	movcs	r3, #4
 810102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810102e:	69fb      	ldr	r3, [r7, #28]
 8101030:	3304      	adds	r3, #4
 8101032:	2b06      	cmp	r3, #6
 8101034:	d902      	bls.n	810103c <NVIC_EncodePriority+0x30>
 8101036:	69fb      	ldr	r3, [r7, #28]
 8101038:	3b03      	subs	r3, #3
 810103a:	e000      	b.n	810103e <NVIC_EncodePriority+0x32>
 810103c:	2300      	movs	r3, #0
 810103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101040:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8101044:	69bb      	ldr	r3, [r7, #24]
 8101046:	fa02 f303 	lsl.w	r3, r2, r3
 810104a:	43da      	mvns	r2, r3
 810104c:	68bb      	ldr	r3, [r7, #8]
 810104e:	401a      	ands	r2, r3
 8101050:	697b      	ldr	r3, [r7, #20]
 8101052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101054:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8101058:	697b      	ldr	r3, [r7, #20]
 810105a:	fa01 f303 	lsl.w	r3, r1, r3
 810105e:	43d9      	mvns	r1, r3
 8101060:	687b      	ldr	r3, [r7, #4]
 8101062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101064:	4313      	orrs	r3, r2
         );
}
 8101066:	4618      	mov	r0, r3
 8101068:	3724      	adds	r7, #36	@ 0x24
 810106a:	46bd      	mov	sp, r7
 810106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101070:	4770      	bx	lr
	...

08101074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101074:	b580      	push	{r7, lr}
 8101076:	b082      	sub	sp, #8
 8101078:	af00      	add	r7, sp, #0
 810107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810107c:	687b      	ldr	r3, [r7, #4]
 810107e:	3b01      	subs	r3, #1
 8101080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101084:	d301      	bcc.n	810108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101086:	2301      	movs	r3, #1
 8101088:	e00f      	b.n	81010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810108a:	4a0a      	ldr	r2, [pc, #40]	@ (81010b4 <SysTick_Config+0x40>)
 810108c:	687b      	ldr	r3, [r7, #4]
 810108e:	3b01      	subs	r3, #1
 8101090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101092:	210f      	movs	r1, #15
 8101094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8101098:	f7ff ff8e 	bl	8100fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810109c:	4b05      	ldr	r3, [pc, #20]	@ (81010b4 <SysTick_Config+0x40>)
 810109e:	2200      	movs	r2, #0
 81010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81010a2:	4b04      	ldr	r3, [pc, #16]	@ (81010b4 <SysTick_Config+0x40>)
 81010a4:	2207      	movs	r2, #7
 81010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81010a8:	2300      	movs	r3, #0
}
 81010aa:	4618      	mov	r0, r3
 81010ac:	3708      	adds	r7, #8
 81010ae:	46bd      	mov	sp, r7
 81010b0:	bd80      	pop	{r7, pc}
 81010b2:	bf00      	nop
 81010b4:	e000e010 	.word	0xe000e010

081010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81010b8:	b580      	push	{r7, lr}
 81010ba:	b082      	sub	sp, #8
 81010bc:	af00      	add	r7, sp, #0
 81010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81010c0:	6878      	ldr	r0, [r7, #4]
 81010c2:	f7ff ff29 	bl	8100f18 <__NVIC_SetPriorityGrouping>
}
 81010c6:	bf00      	nop
 81010c8:	3708      	adds	r7, #8
 81010ca:	46bd      	mov	sp, r7
 81010cc:	bd80      	pop	{r7, pc}

081010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81010ce:	b580      	push	{r7, lr}
 81010d0:	b086      	sub	sp, #24
 81010d2:	af00      	add	r7, sp, #0
 81010d4:	4603      	mov	r3, r0
 81010d6:	60b9      	str	r1, [r7, #8]
 81010d8:	607a      	str	r2, [r7, #4]
 81010da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81010dc:	f7ff ff40 	bl	8100f60 <__NVIC_GetPriorityGrouping>
 81010e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81010e2:	687a      	ldr	r2, [r7, #4]
 81010e4:	68b9      	ldr	r1, [r7, #8]
 81010e6:	6978      	ldr	r0, [r7, #20]
 81010e8:	f7ff ff90 	bl	810100c <NVIC_EncodePriority>
 81010ec:	4602      	mov	r2, r0
 81010ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81010f2:	4611      	mov	r1, r2
 81010f4:	4618      	mov	r0, r3
 81010f6:	f7ff ff5f 	bl	8100fb8 <__NVIC_SetPriority>
}
 81010fa:	bf00      	nop
 81010fc:	3718      	adds	r7, #24
 81010fe:	46bd      	mov	sp, r7
 8101100:	bd80      	pop	{r7, pc}

08101102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101102:	b580      	push	{r7, lr}
 8101104:	b082      	sub	sp, #8
 8101106:	af00      	add	r7, sp, #0
 8101108:	4603      	mov	r3, r0
 810110a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810110c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101110:	4618      	mov	r0, r3
 8101112:	f7ff ff33 	bl	8100f7c <__NVIC_EnableIRQ>
}
 8101116:	bf00      	nop
 8101118:	3708      	adds	r7, #8
 810111a:	46bd      	mov	sp, r7
 810111c:	bd80      	pop	{r7, pc}

0810111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810111e:	b580      	push	{r7, lr}
 8101120:	b082      	sub	sp, #8
 8101122:	af00      	add	r7, sp, #0
 8101124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101126:	6878      	ldr	r0, [r7, #4]
 8101128:	f7ff ffa4 	bl	8101074 <SysTick_Config>
 810112c:	4603      	mov	r3, r0
}
 810112e:	4618      	mov	r0, r3
 8101130:	3708      	adds	r7, #8
 8101132:	46bd      	mov	sp, r7
 8101134:	bd80      	pop	{r7, pc}
	...

08101138 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101138:	b480      	push	{r7}
 810113a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810113c:	4b07      	ldr	r3, [pc, #28]	@ (810115c <HAL_GetCurrentCPUID+0x24>)
 810113e:	681b      	ldr	r3, [r3, #0]
 8101140:	091b      	lsrs	r3, r3, #4
 8101142:	f003 030f 	and.w	r3, r3, #15
 8101146:	2b07      	cmp	r3, #7
 8101148:	d101      	bne.n	810114e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810114a:	2303      	movs	r3, #3
 810114c:	e000      	b.n	8101150 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810114e:	2301      	movs	r3, #1
  }
}
 8101150:	4618      	mov	r0, r3
 8101152:	46bd      	mov	sp, r7
 8101154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101158:	4770      	bx	lr
 810115a:	bf00      	nop
 810115c:	e000ed00 	.word	0xe000ed00

08101160 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8101160:	b480      	push	{r7}
 8101162:	b087      	sub	sp, #28
 8101164:	af00      	add	r7, sp, #0
 8101166:	60f8      	str	r0, [r7, #12]
 8101168:	460b      	mov	r3, r1
 810116a:	607a      	str	r2, [r7, #4]
 810116c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 810116e:	2300      	movs	r3, #0
 8101170:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8101172:	68fb      	ldr	r3, [r7, #12]
 8101174:	2b00      	cmp	r3, #0
 8101176:	d101      	bne.n	810117c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8101178:	2301      	movs	r3, #1
 810117a:	e00a      	b.n	8101192 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 810117c:	7afb      	ldrb	r3, [r7, #11]
 810117e:	2b00      	cmp	r3, #0
 8101180:	d103      	bne.n	810118a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8101182:	68fb      	ldr	r3, [r7, #12]
 8101184:	687a      	ldr	r2, [r7, #4]
 8101186:	605a      	str	r2, [r3, #4]
      break;
 8101188:	e002      	b.n	8101190 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 810118a:	2301      	movs	r3, #1
 810118c:	75fb      	strb	r3, [r7, #23]
      break;
 810118e:	bf00      	nop
  }

  return status;
 8101190:	7dfb      	ldrb	r3, [r7, #23]
}
 8101192:	4618      	mov	r0, r3
 8101194:	371c      	adds	r7, #28
 8101196:	46bd      	mov	sp, r7
 8101198:	f85d 7b04 	ldr.w	r7, [sp], #4
 810119c:	4770      	bx	lr

0810119e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 810119e:	b480      	push	{r7}
 81011a0:	b083      	sub	sp, #12
 81011a2:	af00      	add	r7, sp, #0
 81011a4:	6078      	str	r0, [r7, #4]
 81011a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	2b00      	cmp	r3, #0
 81011ac:	d101      	bne.n	81011b2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 81011ae:	2301      	movs	r3, #1
 81011b0:	e003      	b.n	81011ba <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 81011b2:	687b      	ldr	r3, [r7, #4]
 81011b4:	683a      	ldr	r2, [r7, #0]
 81011b6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 81011b8:	2300      	movs	r3, #0
  }
}
 81011ba:	4618      	mov	r0, r3
 81011bc:	370c      	adds	r7, #12
 81011be:	46bd      	mov	sp, r7
 81011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011c4:	4770      	bx	lr

081011c6 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 81011c6:	b580      	push	{r7, lr}
 81011c8:	b086      	sub	sp, #24
 81011ca:	af00      	add	r7, sp, #0
 81011cc:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 81011ce:	687b      	ldr	r3, [r7, #4]
 81011d0:	681b      	ldr	r3, [r3, #0]
 81011d2:	0c1b      	lsrs	r3, r3, #16
 81011d4:	f003 0303 	and.w	r3, r3, #3
 81011d8:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 81011da:	687b      	ldr	r3, [r7, #4]
 81011dc:	681b      	ldr	r3, [r3, #0]
 81011de:	f003 031f 	and.w	r3, r3, #31
 81011e2:	2201      	movs	r2, #1
 81011e4:	fa02 f303 	lsl.w	r3, r2, r3
 81011e8:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 81011ea:	f7ff ffa5 	bl	8101138 <HAL_GetCurrentCPUID>
 81011ee:	4603      	mov	r3, r0
 81011f0:	2b03      	cmp	r3, #3
 81011f2:	d106      	bne.n	8101202 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 81011f4:	693b      	ldr	r3, [r7, #16]
 81011f6:	011b      	lsls	r3, r3, #4
 81011f8:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 81011fc:	3388      	adds	r3, #136	@ 0x88
 81011fe:	617b      	str	r3, [r7, #20]
 8101200:	e005      	b.n	810120e <HAL_EXTI_IRQHandler+0x48>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8101202:	693b      	ldr	r3, [r7, #16]
 8101204:	011b      	lsls	r3, r3, #4
 8101206:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810120a:	33c8      	adds	r3, #200	@ 0xc8
 810120c:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 810120e:	697b      	ldr	r3, [r7, #20]
 8101210:	681b      	ldr	r3, [r3, #0]
 8101212:	68fa      	ldr	r2, [r7, #12]
 8101214:	4013      	ands	r3, r2
 8101216:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8101218:	68bb      	ldr	r3, [r7, #8]
 810121a:	2b00      	cmp	r3, #0
 810121c:	d009      	beq.n	8101232 <HAL_EXTI_IRQHandler+0x6c>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 810121e:	697b      	ldr	r3, [r7, #20]
 8101220:	68fa      	ldr	r2, [r7, #12]
 8101222:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8101224:	687b      	ldr	r3, [r7, #4]
 8101226:	685b      	ldr	r3, [r3, #4]
 8101228:	2b00      	cmp	r3, #0
 810122a:	d002      	beq.n	8101232 <HAL_EXTI_IRQHandler+0x6c>
    {
      hexti->PendingCallback();
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	685b      	ldr	r3, [r3, #4]
 8101230:	4798      	blx	r3
    }
  }
}
 8101232:	bf00      	nop
 8101234:	3718      	adds	r7, #24
 8101236:	46bd      	mov	sp, r7
 8101238:	bd80      	pop	{r7, pc}
	...

0810123c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 810123c:	b480      	push	{r7}
 810123e:	b089      	sub	sp, #36	@ 0x24
 8101240:	af00      	add	r7, sp, #0
 8101242:	6078      	str	r0, [r7, #4]
 8101244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101246:	2300      	movs	r3, #0
 8101248:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810124a:	4b89      	ldr	r3, [pc, #548]	@ (8101470 <HAL_GPIO_Init+0x234>)
 810124c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810124e:	e194      	b.n	810157a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101250:	683b      	ldr	r3, [r7, #0]
 8101252:	681a      	ldr	r2, [r3, #0]
 8101254:	2101      	movs	r1, #1
 8101256:	69fb      	ldr	r3, [r7, #28]
 8101258:	fa01 f303 	lsl.w	r3, r1, r3
 810125c:	4013      	ands	r3, r2
 810125e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101260:	693b      	ldr	r3, [r7, #16]
 8101262:	2b00      	cmp	r3, #0
 8101264:	f000 8186 	beq.w	8101574 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101268:	683b      	ldr	r3, [r7, #0]
 810126a:	685b      	ldr	r3, [r3, #4]
 810126c:	f003 0303 	and.w	r3, r3, #3
 8101270:	2b01      	cmp	r3, #1
 8101272:	d005      	beq.n	8101280 <HAL_GPIO_Init+0x44>
 8101274:	683b      	ldr	r3, [r7, #0]
 8101276:	685b      	ldr	r3, [r3, #4]
 8101278:	f003 0303 	and.w	r3, r3, #3
 810127c:	2b02      	cmp	r3, #2
 810127e:	d130      	bne.n	81012e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101280:	687b      	ldr	r3, [r7, #4]
 8101282:	689b      	ldr	r3, [r3, #8]
 8101284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101286:	69fb      	ldr	r3, [r7, #28]
 8101288:	005b      	lsls	r3, r3, #1
 810128a:	2203      	movs	r2, #3
 810128c:	fa02 f303 	lsl.w	r3, r2, r3
 8101290:	43db      	mvns	r3, r3
 8101292:	69ba      	ldr	r2, [r7, #24]
 8101294:	4013      	ands	r3, r2
 8101296:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101298:	683b      	ldr	r3, [r7, #0]
 810129a:	68da      	ldr	r2, [r3, #12]
 810129c:	69fb      	ldr	r3, [r7, #28]
 810129e:	005b      	lsls	r3, r3, #1
 81012a0:	fa02 f303 	lsl.w	r3, r2, r3
 81012a4:	69ba      	ldr	r2, [r7, #24]
 81012a6:	4313      	orrs	r3, r2
 81012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81012aa:	687b      	ldr	r3, [r7, #4]
 81012ac:	69ba      	ldr	r2, [r7, #24]
 81012ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81012b0:	687b      	ldr	r3, [r7, #4]
 81012b2:	685b      	ldr	r3, [r3, #4]
 81012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81012b6:	2201      	movs	r2, #1
 81012b8:	69fb      	ldr	r3, [r7, #28]
 81012ba:	fa02 f303 	lsl.w	r3, r2, r3
 81012be:	43db      	mvns	r3, r3
 81012c0:	69ba      	ldr	r2, [r7, #24]
 81012c2:	4013      	ands	r3, r2
 81012c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81012c6:	683b      	ldr	r3, [r7, #0]
 81012c8:	685b      	ldr	r3, [r3, #4]
 81012ca:	091b      	lsrs	r3, r3, #4
 81012cc:	f003 0201 	and.w	r2, r3, #1
 81012d0:	69fb      	ldr	r3, [r7, #28]
 81012d2:	fa02 f303 	lsl.w	r3, r2, r3
 81012d6:	69ba      	ldr	r2, [r7, #24]
 81012d8:	4313      	orrs	r3, r2
 81012da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81012dc:	687b      	ldr	r3, [r7, #4]
 81012de:	69ba      	ldr	r2, [r7, #24]
 81012e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81012e2:	683b      	ldr	r3, [r7, #0]
 81012e4:	685b      	ldr	r3, [r3, #4]
 81012e6:	f003 0303 	and.w	r3, r3, #3
 81012ea:	2b03      	cmp	r3, #3
 81012ec:	d017      	beq.n	810131e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81012ee:	687b      	ldr	r3, [r7, #4]
 81012f0:	68db      	ldr	r3, [r3, #12]
 81012f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81012f4:	69fb      	ldr	r3, [r7, #28]
 81012f6:	005b      	lsls	r3, r3, #1
 81012f8:	2203      	movs	r2, #3
 81012fa:	fa02 f303 	lsl.w	r3, r2, r3
 81012fe:	43db      	mvns	r3, r3
 8101300:	69ba      	ldr	r2, [r7, #24]
 8101302:	4013      	ands	r3, r2
 8101304:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101306:	683b      	ldr	r3, [r7, #0]
 8101308:	689a      	ldr	r2, [r3, #8]
 810130a:	69fb      	ldr	r3, [r7, #28]
 810130c:	005b      	lsls	r3, r3, #1
 810130e:	fa02 f303 	lsl.w	r3, r2, r3
 8101312:	69ba      	ldr	r2, [r7, #24]
 8101314:	4313      	orrs	r3, r2
 8101316:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101318:	687b      	ldr	r3, [r7, #4]
 810131a:	69ba      	ldr	r2, [r7, #24]
 810131c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810131e:	683b      	ldr	r3, [r7, #0]
 8101320:	685b      	ldr	r3, [r3, #4]
 8101322:	f003 0303 	and.w	r3, r3, #3
 8101326:	2b02      	cmp	r3, #2
 8101328:	d123      	bne.n	8101372 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810132a:	69fb      	ldr	r3, [r7, #28]
 810132c:	08da      	lsrs	r2, r3, #3
 810132e:	687b      	ldr	r3, [r7, #4]
 8101330:	3208      	adds	r2, #8
 8101332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101338:	69fb      	ldr	r3, [r7, #28]
 810133a:	f003 0307 	and.w	r3, r3, #7
 810133e:	009b      	lsls	r3, r3, #2
 8101340:	220f      	movs	r2, #15
 8101342:	fa02 f303 	lsl.w	r3, r2, r3
 8101346:	43db      	mvns	r3, r3
 8101348:	69ba      	ldr	r2, [r7, #24]
 810134a:	4013      	ands	r3, r2
 810134c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810134e:	683b      	ldr	r3, [r7, #0]
 8101350:	691a      	ldr	r2, [r3, #16]
 8101352:	69fb      	ldr	r3, [r7, #28]
 8101354:	f003 0307 	and.w	r3, r3, #7
 8101358:	009b      	lsls	r3, r3, #2
 810135a:	fa02 f303 	lsl.w	r3, r2, r3
 810135e:	69ba      	ldr	r2, [r7, #24]
 8101360:	4313      	orrs	r3, r2
 8101362:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101364:	69fb      	ldr	r3, [r7, #28]
 8101366:	08da      	lsrs	r2, r3, #3
 8101368:	687b      	ldr	r3, [r7, #4]
 810136a:	3208      	adds	r2, #8
 810136c:	69b9      	ldr	r1, [r7, #24]
 810136e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101372:	687b      	ldr	r3, [r7, #4]
 8101374:	681b      	ldr	r3, [r3, #0]
 8101376:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101378:	69fb      	ldr	r3, [r7, #28]
 810137a:	005b      	lsls	r3, r3, #1
 810137c:	2203      	movs	r2, #3
 810137e:	fa02 f303 	lsl.w	r3, r2, r3
 8101382:	43db      	mvns	r3, r3
 8101384:	69ba      	ldr	r2, [r7, #24]
 8101386:	4013      	ands	r3, r2
 8101388:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810138a:	683b      	ldr	r3, [r7, #0]
 810138c:	685b      	ldr	r3, [r3, #4]
 810138e:	f003 0203 	and.w	r2, r3, #3
 8101392:	69fb      	ldr	r3, [r7, #28]
 8101394:	005b      	lsls	r3, r3, #1
 8101396:	fa02 f303 	lsl.w	r3, r2, r3
 810139a:	69ba      	ldr	r2, [r7, #24]
 810139c:	4313      	orrs	r3, r2
 810139e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81013a0:	687b      	ldr	r3, [r7, #4]
 81013a2:	69ba      	ldr	r2, [r7, #24]
 81013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81013a6:	683b      	ldr	r3, [r7, #0]
 81013a8:	685b      	ldr	r3, [r3, #4]
 81013aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81013ae:	2b00      	cmp	r3, #0
 81013b0:	f000 80e0 	beq.w	8101574 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81013b4:	4b2f      	ldr	r3, [pc, #188]	@ (8101474 <HAL_GPIO_Init+0x238>)
 81013b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81013ba:	4a2e      	ldr	r2, [pc, #184]	@ (8101474 <HAL_GPIO_Init+0x238>)
 81013bc:	f043 0302 	orr.w	r3, r3, #2
 81013c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81013c4:	4b2b      	ldr	r3, [pc, #172]	@ (8101474 <HAL_GPIO_Init+0x238>)
 81013c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81013ca:	f003 0302 	and.w	r3, r3, #2
 81013ce:	60fb      	str	r3, [r7, #12]
 81013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81013d2:	4a29      	ldr	r2, [pc, #164]	@ (8101478 <HAL_GPIO_Init+0x23c>)
 81013d4:	69fb      	ldr	r3, [r7, #28]
 81013d6:	089b      	lsrs	r3, r3, #2
 81013d8:	3302      	adds	r3, #2
 81013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81013e0:	69fb      	ldr	r3, [r7, #28]
 81013e2:	f003 0303 	and.w	r3, r3, #3
 81013e6:	009b      	lsls	r3, r3, #2
 81013e8:	220f      	movs	r2, #15
 81013ea:	fa02 f303 	lsl.w	r3, r2, r3
 81013ee:	43db      	mvns	r3, r3
 81013f0:	69ba      	ldr	r2, [r7, #24]
 81013f2:	4013      	ands	r3, r2
 81013f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	4a20      	ldr	r2, [pc, #128]	@ (810147c <HAL_GPIO_Init+0x240>)
 81013fa:	4293      	cmp	r3, r2
 81013fc:	d052      	beq.n	81014a4 <HAL_GPIO_Init+0x268>
 81013fe:	687b      	ldr	r3, [r7, #4]
 8101400:	4a1f      	ldr	r2, [pc, #124]	@ (8101480 <HAL_GPIO_Init+0x244>)
 8101402:	4293      	cmp	r3, r2
 8101404:	d031      	beq.n	810146a <HAL_GPIO_Init+0x22e>
 8101406:	687b      	ldr	r3, [r7, #4]
 8101408:	4a1e      	ldr	r2, [pc, #120]	@ (8101484 <HAL_GPIO_Init+0x248>)
 810140a:	4293      	cmp	r3, r2
 810140c:	d02b      	beq.n	8101466 <HAL_GPIO_Init+0x22a>
 810140e:	687b      	ldr	r3, [r7, #4]
 8101410:	4a1d      	ldr	r2, [pc, #116]	@ (8101488 <HAL_GPIO_Init+0x24c>)
 8101412:	4293      	cmp	r3, r2
 8101414:	d025      	beq.n	8101462 <HAL_GPIO_Init+0x226>
 8101416:	687b      	ldr	r3, [r7, #4]
 8101418:	4a1c      	ldr	r2, [pc, #112]	@ (810148c <HAL_GPIO_Init+0x250>)
 810141a:	4293      	cmp	r3, r2
 810141c:	d01f      	beq.n	810145e <HAL_GPIO_Init+0x222>
 810141e:	687b      	ldr	r3, [r7, #4]
 8101420:	4a1b      	ldr	r2, [pc, #108]	@ (8101490 <HAL_GPIO_Init+0x254>)
 8101422:	4293      	cmp	r3, r2
 8101424:	d019      	beq.n	810145a <HAL_GPIO_Init+0x21e>
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	4a1a      	ldr	r2, [pc, #104]	@ (8101494 <HAL_GPIO_Init+0x258>)
 810142a:	4293      	cmp	r3, r2
 810142c:	d013      	beq.n	8101456 <HAL_GPIO_Init+0x21a>
 810142e:	687b      	ldr	r3, [r7, #4]
 8101430:	4a19      	ldr	r2, [pc, #100]	@ (8101498 <HAL_GPIO_Init+0x25c>)
 8101432:	4293      	cmp	r3, r2
 8101434:	d00d      	beq.n	8101452 <HAL_GPIO_Init+0x216>
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	4a18      	ldr	r2, [pc, #96]	@ (810149c <HAL_GPIO_Init+0x260>)
 810143a:	4293      	cmp	r3, r2
 810143c:	d007      	beq.n	810144e <HAL_GPIO_Init+0x212>
 810143e:	687b      	ldr	r3, [r7, #4]
 8101440:	4a17      	ldr	r2, [pc, #92]	@ (81014a0 <HAL_GPIO_Init+0x264>)
 8101442:	4293      	cmp	r3, r2
 8101444:	d101      	bne.n	810144a <HAL_GPIO_Init+0x20e>
 8101446:	2309      	movs	r3, #9
 8101448:	e02d      	b.n	81014a6 <HAL_GPIO_Init+0x26a>
 810144a:	230a      	movs	r3, #10
 810144c:	e02b      	b.n	81014a6 <HAL_GPIO_Init+0x26a>
 810144e:	2308      	movs	r3, #8
 8101450:	e029      	b.n	81014a6 <HAL_GPIO_Init+0x26a>
 8101452:	2307      	movs	r3, #7
 8101454:	e027      	b.n	81014a6 <HAL_GPIO_Init+0x26a>
 8101456:	2306      	movs	r3, #6
 8101458:	e025      	b.n	81014a6 <HAL_GPIO_Init+0x26a>
 810145a:	2305      	movs	r3, #5
 810145c:	e023      	b.n	81014a6 <HAL_GPIO_Init+0x26a>
 810145e:	2304      	movs	r3, #4
 8101460:	e021      	b.n	81014a6 <HAL_GPIO_Init+0x26a>
 8101462:	2303      	movs	r3, #3
 8101464:	e01f      	b.n	81014a6 <HAL_GPIO_Init+0x26a>
 8101466:	2302      	movs	r3, #2
 8101468:	e01d      	b.n	81014a6 <HAL_GPIO_Init+0x26a>
 810146a:	2301      	movs	r3, #1
 810146c:	e01b      	b.n	81014a6 <HAL_GPIO_Init+0x26a>
 810146e:	bf00      	nop
 8101470:	580000c0 	.word	0x580000c0
 8101474:	58024400 	.word	0x58024400
 8101478:	58000400 	.word	0x58000400
 810147c:	58020000 	.word	0x58020000
 8101480:	58020400 	.word	0x58020400
 8101484:	58020800 	.word	0x58020800
 8101488:	58020c00 	.word	0x58020c00
 810148c:	58021000 	.word	0x58021000
 8101490:	58021400 	.word	0x58021400
 8101494:	58021800 	.word	0x58021800
 8101498:	58021c00 	.word	0x58021c00
 810149c:	58022000 	.word	0x58022000
 81014a0:	58022400 	.word	0x58022400
 81014a4:	2300      	movs	r3, #0
 81014a6:	69fa      	ldr	r2, [r7, #28]
 81014a8:	f002 0203 	and.w	r2, r2, #3
 81014ac:	0092      	lsls	r2, r2, #2
 81014ae:	4093      	lsls	r3, r2
 81014b0:	69ba      	ldr	r2, [r7, #24]
 81014b2:	4313      	orrs	r3, r2
 81014b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81014b6:	4938      	ldr	r1, [pc, #224]	@ (8101598 <HAL_GPIO_Init+0x35c>)
 81014b8:	69fb      	ldr	r3, [r7, #28]
 81014ba:	089b      	lsrs	r3, r3, #2
 81014bc:	3302      	adds	r3, #2
 81014be:	69ba      	ldr	r2, [r7, #24]
 81014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81014c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81014c8:	681b      	ldr	r3, [r3, #0]
 81014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81014cc:	693b      	ldr	r3, [r7, #16]
 81014ce:	43db      	mvns	r3, r3
 81014d0:	69ba      	ldr	r2, [r7, #24]
 81014d2:	4013      	ands	r3, r2
 81014d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81014d6:	683b      	ldr	r3, [r7, #0]
 81014d8:	685b      	ldr	r3, [r3, #4]
 81014da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81014de:	2b00      	cmp	r3, #0
 81014e0:	d003      	beq.n	81014ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81014e2:	69ba      	ldr	r2, [r7, #24]
 81014e4:	693b      	ldr	r3, [r7, #16]
 81014e6:	4313      	orrs	r3, r2
 81014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81014ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81014ee:	69bb      	ldr	r3, [r7, #24]
 81014f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81014f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81014f6:	685b      	ldr	r3, [r3, #4]
 81014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81014fa:	693b      	ldr	r3, [r7, #16]
 81014fc:	43db      	mvns	r3, r3
 81014fe:	69ba      	ldr	r2, [r7, #24]
 8101500:	4013      	ands	r3, r2
 8101502:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101504:	683b      	ldr	r3, [r7, #0]
 8101506:	685b      	ldr	r3, [r3, #4]
 8101508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810150c:	2b00      	cmp	r3, #0
 810150e:	d003      	beq.n	8101518 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101510:	69ba      	ldr	r2, [r7, #24]
 8101512:	693b      	ldr	r3, [r7, #16]
 8101514:	4313      	orrs	r3, r2
 8101516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101518:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810151c:	69bb      	ldr	r3, [r7, #24]
 810151e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101520:	697b      	ldr	r3, [r7, #20]
 8101522:	685b      	ldr	r3, [r3, #4]
 8101524:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101526:	693b      	ldr	r3, [r7, #16]
 8101528:	43db      	mvns	r3, r3
 810152a:	69ba      	ldr	r2, [r7, #24]
 810152c:	4013      	ands	r3, r2
 810152e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101530:	683b      	ldr	r3, [r7, #0]
 8101532:	685b      	ldr	r3, [r3, #4]
 8101534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101538:	2b00      	cmp	r3, #0
 810153a:	d003      	beq.n	8101544 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810153c:	69ba      	ldr	r2, [r7, #24]
 810153e:	693b      	ldr	r3, [r7, #16]
 8101540:	4313      	orrs	r3, r2
 8101542:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101544:	697b      	ldr	r3, [r7, #20]
 8101546:	69ba      	ldr	r2, [r7, #24]
 8101548:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810154a:	697b      	ldr	r3, [r7, #20]
 810154c:	681b      	ldr	r3, [r3, #0]
 810154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101550:	693b      	ldr	r3, [r7, #16]
 8101552:	43db      	mvns	r3, r3
 8101554:	69ba      	ldr	r2, [r7, #24]
 8101556:	4013      	ands	r3, r2
 8101558:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810155a:	683b      	ldr	r3, [r7, #0]
 810155c:	685b      	ldr	r3, [r3, #4]
 810155e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101562:	2b00      	cmp	r3, #0
 8101564:	d003      	beq.n	810156e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101566:	69ba      	ldr	r2, [r7, #24]
 8101568:	693b      	ldr	r3, [r7, #16]
 810156a:	4313      	orrs	r3, r2
 810156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810156e:	697b      	ldr	r3, [r7, #20]
 8101570:	69ba      	ldr	r2, [r7, #24]
 8101572:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101574:	69fb      	ldr	r3, [r7, #28]
 8101576:	3301      	adds	r3, #1
 8101578:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810157a:	683b      	ldr	r3, [r7, #0]
 810157c:	681a      	ldr	r2, [r3, #0]
 810157e:	69fb      	ldr	r3, [r7, #28]
 8101580:	fa22 f303 	lsr.w	r3, r2, r3
 8101584:	2b00      	cmp	r3, #0
 8101586:	f47f ae63 	bne.w	8101250 <HAL_GPIO_Init+0x14>
  }
}
 810158a:	bf00      	nop
 810158c:	bf00      	nop
 810158e:	3724      	adds	r7, #36	@ 0x24
 8101590:	46bd      	mov	sp, r7
 8101592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101596:	4770      	bx	lr
 8101598:	58000400 	.word	0x58000400

0810159c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810159c:	b480      	push	{r7}
 810159e:	b083      	sub	sp, #12
 81015a0:	af00      	add	r7, sp, #0
 81015a2:	6078      	str	r0, [r7, #4]
 81015a4:	460b      	mov	r3, r1
 81015a6:	807b      	strh	r3, [r7, #2]
 81015a8:	4613      	mov	r3, r2
 81015aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81015ac:	787b      	ldrb	r3, [r7, #1]
 81015ae:	2b00      	cmp	r3, #0
 81015b0:	d003      	beq.n	81015ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81015b2:	887a      	ldrh	r2, [r7, #2]
 81015b4:	687b      	ldr	r3, [r7, #4]
 81015b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81015b8:	e003      	b.n	81015c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81015ba:	887b      	ldrh	r3, [r7, #2]
 81015bc:	041a      	lsls	r2, r3, #16
 81015be:	687b      	ldr	r3, [r7, #4]
 81015c0:	619a      	str	r2, [r3, #24]
}
 81015c2:	bf00      	nop
 81015c4:	370c      	adds	r7, #12
 81015c6:	46bd      	mov	sp, r7
 81015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015cc:	4770      	bx	lr
	...

081015d0 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 81015d0:	b480      	push	{r7}
 81015d2:	b083      	sub	sp, #12
 81015d4:	af00      	add	r7, sp, #0
 81015d6:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 81015d8:	4a07      	ldr	r2, [pc, #28]	@ (81015f8 <HAL_HSEM_IsSemTaken+0x28>)
 81015da:	687b      	ldr	r3, [r7, #4]
 81015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81015e0:	2b00      	cmp	r3, #0
 81015e2:	da01      	bge.n	81015e8 <HAL_HSEM_IsSemTaken+0x18>
 81015e4:	2301      	movs	r3, #1
 81015e6:	e000      	b.n	81015ea <HAL_HSEM_IsSemTaken+0x1a>
 81015e8:	2300      	movs	r3, #0
}
 81015ea:	4618      	mov	r0, r3
 81015ec:	370c      	adds	r7, #12
 81015ee:	46bd      	mov	sp, r7
 81015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f4:	4770      	bx	lr
 81015f6:	bf00      	nop
 81015f8:	58026400 	.word	0x58026400

081015fc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81015fc:	b480      	push	{r7}
 81015fe:	b083      	sub	sp, #12
 8101600:	af00      	add	r7, sp, #0
 8101602:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101604:	4b05      	ldr	r3, [pc, #20]	@ (810161c <HAL_HSEM_ActivateNotification+0x20>)
 8101606:	681a      	ldr	r2, [r3, #0]
 8101608:	4904      	ldr	r1, [pc, #16]	@ (810161c <HAL_HSEM_ActivateNotification+0x20>)
 810160a:	687b      	ldr	r3, [r7, #4]
 810160c:	4313      	orrs	r3, r2
 810160e:	600b      	str	r3, [r1, #0]
#endif
}
 8101610:	bf00      	nop
 8101612:	370c      	adds	r7, #12
 8101614:	46bd      	mov	sp, r7
 8101616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810161a:	4770      	bx	lr
 810161c:	58026510 	.word	0x58026510

08101620 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101620:	b580      	push	{r7, lr}
 8101622:	b084      	sub	sp, #16
 8101624:	af00      	add	r7, sp, #0
 8101626:	60f8      	str	r0, [r7, #12]
 8101628:	460b      	mov	r3, r1
 810162a:	607a      	str	r2, [r7, #4]
 810162c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810162e:	4b37      	ldr	r3, [pc, #220]	@ (810170c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101630:	681b      	ldr	r3, [r3, #0]
 8101632:	f023 0201 	bic.w	r2, r3, #1
 8101636:	4935      	ldr	r1, [pc, #212]	@ (810170c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101638:	68fb      	ldr	r3, [r7, #12]
 810163a:	4313      	orrs	r3, r2
 810163c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810163e:	687b      	ldr	r3, [r7, #4]
 8101640:	2b00      	cmp	r3, #0
 8101642:	d123      	bne.n	810168c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101644:	f7ff fd78 	bl	8101138 <HAL_GetCurrentCPUID>
 8101648:	4603      	mov	r3, r0
 810164a:	2b03      	cmp	r3, #3
 810164c:	d158      	bne.n	8101700 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810164e:	4b2f      	ldr	r3, [pc, #188]	@ (810170c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101650:	691b      	ldr	r3, [r3, #16]
 8101652:	4a2e      	ldr	r2, [pc, #184]	@ (810170c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101654:	f023 0301 	bic.w	r3, r3, #1
 8101658:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810165a:	4b2d      	ldr	r3, [pc, #180]	@ (8101710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810165c:	691b      	ldr	r3, [r3, #16]
 810165e:	4a2c      	ldr	r2, [pc, #176]	@ (8101710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101660:	f043 0304 	orr.w	r3, r3, #4
 8101664:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101666:	f3bf 8f4f 	dsb	sy
}
 810166a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810166c:	f3bf 8f6f 	isb	sy
}
 8101670:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101672:	7afb      	ldrb	r3, [r7, #11]
 8101674:	2b01      	cmp	r3, #1
 8101676:	d101      	bne.n	810167c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101678:	bf30      	wfi
 810167a:	e000      	b.n	810167e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810167c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810167e:	4b24      	ldr	r3, [pc, #144]	@ (8101710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101680:	691b      	ldr	r3, [r3, #16]
 8101682:	4a23      	ldr	r2, [pc, #140]	@ (8101710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101684:	f023 0304 	bic.w	r3, r3, #4
 8101688:	6113      	str	r3, [r2, #16]
 810168a:	e03c      	b.n	8101706 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810168c:	687b      	ldr	r3, [r7, #4]
 810168e:	2b01      	cmp	r3, #1
 8101690:	d123      	bne.n	81016da <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101692:	f7ff fd51 	bl	8101138 <HAL_GetCurrentCPUID>
 8101696:	4603      	mov	r3, r0
 8101698:	2b01      	cmp	r3, #1
 810169a:	d133      	bne.n	8101704 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810169c:	4b1b      	ldr	r3, [pc, #108]	@ (810170c <HAL_PWREx_EnterSTOPMode+0xec>)
 810169e:	695b      	ldr	r3, [r3, #20]
 81016a0:	4a1a      	ldr	r2, [pc, #104]	@ (810170c <HAL_PWREx_EnterSTOPMode+0xec>)
 81016a2:	f023 0302 	bic.w	r3, r3, #2
 81016a6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81016a8:	4b19      	ldr	r3, [pc, #100]	@ (8101710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016aa:	691b      	ldr	r3, [r3, #16]
 81016ac:	4a18      	ldr	r2, [pc, #96]	@ (8101710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016ae:	f043 0304 	orr.w	r3, r3, #4
 81016b2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81016b4:	f3bf 8f4f 	dsb	sy
}
 81016b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81016ba:	f3bf 8f6f 	isb	sy
}
 81016be:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81016c0:	7afb      	ldrb	r3, [r7, #11]
 81016c2:	2b01      	cmp	r3, #1
 81016c4:	d101      	bne.n	81016ca <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81016c6:	bf30      	wfi
 81016c8:	e000      	b.n	81016cc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81016ca:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81016cc:	4b10      	ldr	r3, [pc, #64]	@ (8101710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016ce:	691b      	ldr	r3, [r3, #16]
 81016d0:	4a0f      	ldr	r2, [pc, #60]	@ (8101710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016d2:	f023 0304 	bic.w	r3, r3, #4
 81016d6:	6113      	str	r3, [r2, #16]
 81016d8:	e015      	b.n	8101706 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81016da:	f7ff fd2d 	bl	8101138 <HAL_GetCurrentCPUID>
 81016de:	4603      	mov	r3, r0
 81016e0:	2b03      	cmp	r3, #3
 81016e2:	d106      	bne.n	81016f2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81016e4:	4b09      	ldr	r3, [pc, #36]	@ (810170c <HAL_PWREx_EnterSTOPMode+0xec>)
 81016e6:	691b      	ldr	r3, [r3, #16]
 81016e8:	4a08      	ldr	r2, [pc, #32]	@ (810170c <HAL_PWREx_EnterSTOPMode+0xec>)
 81016ea:	f023 0304 	bic.w	r3, r3, #4
 81016ee:	6113      	str	r3, [r2, #16]
 81016f0:	e009      	b.n	8101706 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81016f2:	4b06      	ldr	r3, [pc, #24]	@ (810170c <HAL_PWREx_EnterSTOPMode+0xec>)
 81016f4:	695b      	ldr	r3, [r3, #20]
 81016f6:	4a05      	ldr	r2, [pc, #20]	@ (810170c <HAL_PWREx_EnterSTOPMode+0xec>)
 81016f8:	f023 0304 	bic.w	r3, r3, #4
 81016fc:	6153      	str	r3, [r2, #20]
 81016fe:	e002      	b.n	8101706 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101700:	bf00      	nop
 8101702:	e000      	b.n	8101706 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101704:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101706:	3710      	adds	r7, #16
 8101708:	46bd      	mov	sp, r7
 810170a:	bd80      	pop	{r7, pc}
 810170c:	58024800 	.word	0x58024800
 8101710:	e000ed00 	.word	0xe000ed00

08101714 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101714:	b580      	push	{r7, lr}
 8101716:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101718:	f7ff fd0e 	bl	8101138 <HAL_GetCurrentCPUID>
 810171c:	4603      	mov	r3, r0
 810171e:	2b03      	cmp	r3, #3
 8101720:	d101      	bne.n	8101726 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101722:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101724:	e001      	b.n	810172a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101726:	bf40      	sev
    __WFE ();
 8101728:	bf20      	wfe
}
 810172a:	bf00      	nop
 810172c:	bd80      	pop	{r7, pc}
	...

08101730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101730:	b480      	push	{r7}
 8101732:	b089      	sub	sp, #36	@ 0x24
 8101734:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101736:	4bb3      	ldr	r3, [pc, #716]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101738:	691b      	ldr	r3, [r3, #16]
 810173a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810173e:	2b18      	cmp	r3, #24
 8101740:	f200 8155 	bhi.w	81019ee <HAL_RCC_GetSysClockFreq+0x2be>
 8101744:	a201      	add	r2, pc, #4	@ (adr r2, 810174c <HAL_RCC_GetSysClockFreq+0x1c>)
 8101746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810174a:	bf00      	nop
 810174c:	081017b1 	.word	0x081017b1
 8101750:	081019ef 	.word	0x081019ef
 8101754:	081019ef 	.word	0x081019ef
 8101758:	081019ef 	.word	0x081019ef
 810175c:	081019ef 	.word	0x081019ef
 8101760:	081019ef 	.word	0x081019ef
 8101764:	081019ef 	.word	0x081019ef
 8101768:	081019ef 	.word	0x081019ef
 810176c:	081017d7 	.word	0x081017d7
 8101770:	081019ef 	.word	0x081019ef
 8101774:	081019ef 	.word	0x081019ef
 8101778:	081019ef 	.word	0x081019ef
 810177c:	081019ef 	.word	0x081019ef
 8101780:	081019ef 	.word	0x081019ef
 8101784:	081019ef 	.word	0x081019ef
 8101788:	081019ef 	.word	0x081019ef
 810178c:	081017dd 	.word	0x081017dd
 8101790:	081019ef 	.word	0x081019ef
 8101794:	081019ef 	.word	0x081019ef
 8101798:	081019ef 	.word	0x081019ef
 810179c:	081019ef 	.word	0x081019ef
 81017a0:	081019ef 	.word	0x081019ef
 81017a4:	081019ef 	.word	0x081019ef
 81017a8:	081019ef 	.word	0x081019ef
 81017ac:	081017e3 	.word	0x081017e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81017b0:	4b94      	ldr	r3, [pc, #592]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017b2:	681b      	ldr	r3, [r3, #0]
 81017b4:	f003 0320 	and.w	r3, r3, #32
 81017b8:	2b00      	cmp	r3, #0
 81017ba:	d009      	beq.n	81017d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81017bc:	4b91      	ldr	r3, [pc, #580]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017be:	681b      	ldr	r3, [r3, #0]
 81017c0:	08db      	lsrs	r3, r3, #3
 81017c2:	f003 0303 	and.w	r3, r3, #3
 81017c6:	4a90      	ldr	r2, [pc, #576]	@ (8101a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81017c8:	fa22 f303 	lsr.w	r3, r2, r3
 81017cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81017ce:	e111      	b.n	81019f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81017d0:	4b8d      	ldr	r3, [pc, #564]	@ (8101a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81017d2:	61bb      	str	r3, [r7, #24]
      break;
 81017d4:	e10e      	b.n	81019f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81017d6:	4b8d      	ldr	r3, [pc, #564]	@ (8101a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81017d8:	61bb      	str	r3, [r7, #24]
      break;
 81017da:	e10b      	b.n	81019f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81017dc:	4b8c      	ldr	r3, [pc, #560]	@ (8101a10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81017de:	61bb      	str	r3, [r7, #24]
      break;
 81017e0:	e108      	b.n	81019f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81017e2:	4b88      	ldr	r3, [pc, #544]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81017e6:	f003 0303 	and.w	r3, r3, #3
 81017ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81017ec:	4b85      	ldr	r3, [pc, #532]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81017f0:	091b      	lsrs	r3, r3, #4
 81017f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81017f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81017f8:	4b82      	ldr	r3, [pc, #520]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81017fc:	f003 0301 	and.w	r3, r3, #1
 8101800:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8101802:	4b80      	ldr	r3, [pc, #512]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101806:	08db      	lsrs	r3, r3, #3
 8101808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810180c:	68fa      	ldr	r2, [r7, #12]
 810180e:	fb02 f303 	mul.w	r3, r2, r3
 8101812:	ee07 3a90 	vmov	s15, r3
 8101816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810181a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810181e:	693b      	ldr	r3, [r7, #16]
 8101820:	2b00      	cmp	r3, #0
 8101822:	f000 80e1 	beq.w	81019e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101826:	697b      	ldr	r3, [r7, #20]
 8101828:	2b02      	cmp	r3, #2
 810182a:	f000 8083 	beq.w	8101934 <HAL_RCC_GetSysClockFreq+0x204>
 810182e:	697b      	ldr	r3, [r7, #20]
 8101830:	2b02      	cmp	r3, #2
 8101832:	f200 80a1 	bhi.w	8101978 <HAL_RCC_GetSysClockFreq+0x248>
 8101836:	697b      	ldr	r3, [r7, #20]
 8101838:	2b00      	cmp	r3, #0
 810183a:	d003      	beq.n	8101844 <HAL_RCC_GetSysClockFreq+0x114>
 810183c:	697b      	ldr	r3, [r7, #20]
 810183e:	2b01      	cmp	r3, #1
 8101840:	d056      	beq.n	81018f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101842:	e099      	b.n	8101978 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101844:	4b6f      	ldr	r3, [pc, #444]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101846:	681b      	ldr	r3, [r3, #0]
 8101848:	f003 0320 	and.w	r3, r3, #32
 810184c:	2b00      	cmp	r3, #0
 810184e:	d02d      	beq.n	81018ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101850:	4b6c      	ldr	r3, [pc, #432]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101852:	681b      	ldr	r3, [r3, #0]
 8101854:	08db      	lsrs	r3, r3, #3
 8101856:	f003 0303 	and.w	r3, r3, #3
 810185a:	4a6b      	ldr	r2, [pc, #428]	@ (8101a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810185c:	fa22 f303 	lsr.w	r3, r2, r3
 8101860:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101862:	687b      	ldr	r3, [r7, #4]
 8101864:	ee07 3a90 	vmov	s15, r3
 8101868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810186c:	693b      	ldr	r3, [r7, #16]
 810186e:	ee07 3a90 	vmov	s15, r3
 8101872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810187a:	4b62      	ldr	r3, [pc, #392]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810187e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101882:	ee07 3a90 	vmov	s15, r3
 8101886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810188a:	ed97 6a02 	vldr	s12, [r7, #8]
 810188e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8101a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810189a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810189e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81018a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81018aa:	e087      	b.n	81019bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81018ac:	693b      	ldr	r3, [r7, #16]
 81018ae:	ee07 3a90 	vmov	s15, r3
 81018b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8101a18 <HAL_RCC_GetSysClockFreq+0x2e8>
 81018ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018be:	4b51      	ldr	r3, [pc, #324]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81018c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018c6:	ee07 3a90 	vmov	s15, r3
 81018ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018ce:	ed97 6a02 	vldr	s12, [r7, #8]
 81018d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8101a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 81018d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81018da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81018de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81018e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81018e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81018ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81018ee:	e065      	b.n	81019bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81018f0:	693b      	ldr	r3, [r7, #16]
 81018f2:	ee07 3a90 	vmov	s15, r3
 81018f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 81018fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101902:	4b40      	ldr	r3, [pc, #256]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810190a:	ee07 3a90 	vmov	s15, r3
 810190e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101912:	ed97 6a02 	vldr	s12, [r7, #8]
 8101916:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8101a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 810191a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810191e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810192a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810192e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101932:	e043      	b.n	81019bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101934:	693b      	ldr	r3, [r7, #16]
 8101936:	ee07 3a90 	vmov	s15, r3
 810193a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810193e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8101a20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101946:	4b2f      	ldr	r3, [pc, #188]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810194a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810194e:	ee07 3a90 	vmov	s15, r3
 8101952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101956:	ed97 6a02 	vldr	s12, [r7, #8]
 810195a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8101a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 810195e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810196a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810196e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101976:	e021      	b.n	81019bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101978:	693b      	ldr	r3, [r7, #16]
 810197a:	ee07 3a90 	vmov	s15, r3
 810197e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101982:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8101986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810198a:	4b1e      	ldr	r3, [pc, #120]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810198e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101992:	ee07 3a90 	vmov	s15, r3
 8101996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810199a:	ed97 6a02 	vldr	s12, [r7, #8]
 810199e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8101a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 81019a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81019a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81019aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81019ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81019b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81019b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81019ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81019bc:	4b11      	ldr	r3, [pc, #68]	@ (8101a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81019c0:	0a5b      	lsrs	r3, r3, #9
 81019c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81019c6:	3301      	adds	r3, #1
 81019c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81019ca:	683b      	ldr	r3, [r7, #0]
 81019cc:	ee07 3a90 	vmov	s15, r3
 81019d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81019d4:	edd7 6a07 	vldr	s13, [r7, #28]
 81019d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81019dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81019e0:	ee17 3a90 	vmov	r3, s15
 81019e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81019e6:	e005      	b.n	81019f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81019e8:	2300      	movs	r3, #0
 81019ea:	61bb      	str	r3, [r7, #24]
      break;
 81019ec:	e002      	b.n	81019f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81019ee:	4b07      	ldr	r3, [pc, #28]	@ (8101a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81019f0:	61bb      	str	r3, [r7, #24]
      break;
 81019f2:	bf00      	nop
  }

  return sysclockfreq;
 81019f4:	69bb      	ldr	r3, [r7, #24]
}
 81019f6:	4618      	mov	r0, r3
 81019f8:	3724      	adds	r7, #36	@ 0x24
 81019fa:	46bd      	mov	sp, r7
 81019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a00:	4770      	bx	lr
 8101a02:	bf00      	nop
 8101a04:	58024400 	.word	0x58024400
 8101a08:	03d09000 	.word	0x03d09000
 8101a0c:	003d0900 	.word	0x003d0900
 8101a10:	017d7840 	.word	0x017d7840
 8101a14:	46000000 	.word	0x46000000
 8101a18:	4c742400 	.word	0x4c742400
 8101a1c:	4a742400 	.word	0x4a742400
 8101a20:	4bbebc20 	.word	0x4bbebc20

08101a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101a24:	b580      	push	{r7, lr}
 8101a26:	b082      	sub	sp, #8
 8101a28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101a2a:	f7ff fe81 	bl	8101730 <HAL_RCC_GetSysClockFreq>
 8101a2e:	4602      	mov	r2, r0
 8101a30:	4b11      	ldr	r3, [pc, #68]	@ (8101a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8101a32:	699b      	ldr	r3, [r3, #24]
 8101a34:	0a1b      	lsrs	r3, r3, #8
 8101a36:	f003 030f 	and.w	r3, r3, #15
 8101a3a:	4910      	ldr	r1, [pc, #64]	@ (8101a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8101a3c:	5ccb      	ldrb	r3, [r1, r3]
 8101a3e:	f003 031f 	and.w	r3, r3, #31
 8101a42:	fa22 f303 	lsr.w	r3, r2, r3
 8101a46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101a48:	4b0b      	ldr	r3, [pc, #44]	@ (8101a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8101a4a:	699b      	ldr	r3, [r3, #24]
 8101a4c:	f003 030f 	and.w	r3, r3, #15
 8101a50:	4a0a      	ldr	r2, [pc, #40]	@ (8101a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8101a52:	5cd3      	ldrb	r3, [r2, r3]
 8101a54:	f003 031f 	and.w	r3, r3, #31
 8101a58:	687a      	ldr	r2, [r7, #4]
 8101a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8101a5e:	4a08      	ldr	r2, [pc, #32]	@ (8101a80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a60:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101a62:	4b07      	ldr	r3, [pc, #28]	@ (8101a80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a64:	681b      	ldr	r3, [r3, #0]
 8101a66:	4a07      	ldr	r2, [pc, #28]	@ (8101a84 <HAL_RCC_GetHCLKFreq+0x60>)
 8101a68:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101a6a:	4b05      	ldr	r3, [pc, #20]	@ (8101a80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a6c:	681b      	ldr	r3, [r3, #0]
}
 8101a6e:	4618      	mov	r0, r3
 8101a70:	3708      	adds	r7, #8
 8101a72:	46bd      	mov	sp, r7
 8101a74:	bd80      	pop	{r7, pc}
 8101a76:	bf00      	nop
 8101a78:	58024400 	.word	0x58024400
 8101a7c:	08104a14 	.word	0x08104a14
 8101a80:	10000004 	.word	0x10000004
 8101a84:	10000000 	.word	0x10000000

08101a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101a88:	b580      	push	{r7, lr}
 8101a8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101a8c:	f7ff ffca 	bl	8101a24 <HAL_RCC_GetHCLKFreq>
 8101a90:	4602      	mov	r2, r0
 8101a92:	4b06      	ldr	r3, [pc, #24]	@ (8101aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8101a94:	69db      	ldr	r3, [r3, #28]
 8101a96:	091b      	lsrs	r3, r3, #4
 8101a98:	f003 0307 	and.w	r3, r3, #7
 8101a9c:	4904      	ldr	r1, [pc, #16]	@ (8101ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8101a9e:	5ccb      	ldrb	r3, [r1, r3]
 8101aa0:	f003 031f 	and.w	r3, r3, #31
 8101aa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101aa8:	4618      	mov	r0, r3
 8101aaa:	bd80      	pop	{r7, pc}
 8101aac:	58024400 	.word	0x58024400
 8101ab0:	08104a14 	.word	0x08104a14

08101ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101ab4:	b580      	push	{r7, lr}
 8101ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101ab8:	f7ff ffb4 	bl	8101a24 <HAL_RCC_GetHCLKFreq>
 8101abc:	4602      	mov	r2, r0
 8101abe:	4b06      	ldr	r3, [pc, #24]	@ (8101ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8101ac0:	69db      	ldr	r3, [r3, #28]
 8101ac2:	0a1b      	lsrs	r3, r3, #8
 8101ac4:	f003 0307 	and.w	r3, r3, #7
 8101ac8:	4904      	ldr	r1, [pc, #16]	@ (8101adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8101aca:	5ccb      	ldrb	r3, [r1, r3]
 8101acc:	f003 031f 	and.w	r3, r3, #31
 8101ad0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	bd80      	pop	{r7, pc}
 8101ad8:	58024400 	.word	0x58024400
 8101adc:	08104a14 	.word	0x08104a14

08101ae0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101ae4:	b0ca      	sub	sp, #296	@ 0x128
 8101ae6:	af00      	add	r7, sp, #0
 8101ae8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101aec:	2300      	movs	r3, #0
 8101aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101af2:	2300      	movs	r3, #0
 8101af4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b00:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8101b04:	2500      	movs	r5, #0
 8101b06:	ea54 0305 	orrs.w	r3, r4, r5
 8101b0a:	d049      	beq.n	8101ba0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8101b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101b12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8101b16:	d02f      	beq.n	8101b78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8101b18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8101b1c:	d828      	bhi.n	8101b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101b1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101b22:	d01a      	beq.n	8101b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8101b24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101b28:	d822      	bhi.n	8101b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101b2a:	2b00      	cmp	r3, #0
 8101b2c:	d003      	beq.n	8101b36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8101b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101b32:	d007      	beq.n	8101b44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101b34:	e01c      	b.n	8101b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101b36:	4bb8      	ldr	r3, [pc, #736]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101b3a:	4ab7      	ldr	r2, [pc, #732]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101b42:	e01a      	b.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b48:	3308      	adds	r3, #8
 8101b4a:	2102      	movs	r1, #2
 8101b4c:	4618      	mov	r0, r3
 8101b4e:	f001 fc8f 	bl	8103470 <RCCEx_PLL2_Config>
 8101b52:	4603      	mov	r3, r0
 8101b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101b58:	e00f      	b.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8101b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b5e:	3328      	adds	r3, #40	@ 0x28
 8101b60:	2102      	movs	r1, #2
 8101b62:	4618      	mov	r0, r3
 8101b64:	f001 fd36 	bl	81035d4 <RCCEx_PLL3_Config>
 8101b68:	4603      	mov	r3, r0
 8101b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101b6e:	e004      	b.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101b70:	2301      	movs	r3, #1
 8101b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101b76:	e000      	b.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8101b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101b7e:	2b00      	cmp	r3, #0
 8101b80:	d10a      	bne.n	8101b98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101b82:	4ba5      	ldr	r3, [pc, #660]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101b86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8101b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101b90:	4aa1      	ldr	r2, [pc, #644]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b92:	430b      	orrs	r3, r1
 8101b94:	6513      	str	r3, [r2, #80]	@ 0x50
 8101b96:	e003      	b.n	8101ba0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ba8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8101bac:	f04f 0900 	mov.w	r9, #0
 8101bb0:	ea58 0309 	orrs.w	r3, r8, r9
 8101bb4:	d047      	beq.n	8101c46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8101bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101bbc:	2b04      	cmp	r3, #4
 8101bbe:	d82a      	bhi.n	8101c16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8101bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8101bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8101bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101bc6:	bf00      	nop
 8101bc8:	08101bdd 	.word	0x08101bdd
 8101bcc:	08101beb 	.word	0x08101beb
 8101bd0:	08101c01 	.word	0x08101c01
 8101bd4:	08101c1f 	.word	0x08101c1f
 8101bd8:	08101c1f 	.word	0x08101c1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101bdc:	4b8e      	ldr	r3, [pc, #568]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101be0:	4a8d      	ldr	r2, [pc, #564]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101be6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101be8:	e01a      	b.n	8101c20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bee:	3308      	adds	r3, #8
 8101bf0:	2100      	movs	r1, #0
 8101bf2:	4618      	mov	r0, r3
 8101bf4:	f001 fc3c 	bl	8103470 <RCCEx_PLL2_Config>
 8101bf8:	4603      	mov	r3, r0
 8101bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101bfe:	e00f      	b.n	8101c20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c04:	3328      	adds	r3, #40	@ 0x28
 8101c06:	2100      	movs	r1, #0
 8101c08:	4618      	mov	r0, r3
 8101c0a:	f001 fce3 	bl	81035d4 <RCCEx_PLL3_Config>
 8101c0e:	4603      	mov	r3, r0
 8101c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101c14:	e004      	b.n	8101c20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101c16:	2301      	movs	r3, #1
 8101c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101c1c:	e000      	b.n	8101c20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8101c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c24:	2b00      	cmp	r3, #0
 8101c26:	d10a      	bne.n	8101c3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101c28:	4b7b      	ldr	r3, [pc, #492]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101c2c:	f023 0107 	bic.w	r1, r3, #7
 8101c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101c36:	4a78      	ldr	r2, [pc, #480]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c38:	430b      	orrs	r3, r1
 8101c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8101c3c:	e003      	b.n	8101c46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c4e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8101c52:	f04f 0b00 	mov.w	fp, #0
 8101c56:	ea5a 030b 	orrs.w	r3, sl, fp
 8101c5a:	d04c      	beq.n	8101cf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8101c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101c66:	d030      	beq.n	8101cca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8101c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101c6c:	d829      	bhi.n	8101cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101c6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8101c70:	d02d      	beq.n	8101cce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8101c72:	2bc0      	cmp	r3, #192	@ 0xc0
 8101c74:	d825      	bhi.n	8101cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101c76:	2b80      	cmp	r3, #128	@ 0x80
 8101c78:	d018      	beq.n	8101cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8101c7a:	2b80      	cmp	r3, #128	@ 0x80
 8101c7c:	d821      	bhi.n	8101cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101c7e:	2b00      	cmp	r3, #0
 8101c80:	d002      	beq.n	8101c88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8101c82:	2b40      	cmp	r3, #64	@ 0x40
 8101c84:	d007      	beq.n	8101c96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8101c86:	e01c      	b.n	8101cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c88:	4b63      	ldr	r3, [pc, #396]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101c8c:	4a62      	ldr	r2, [pc, #392]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101c92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101c94:	e01c      	b.n	8101cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c9a:	3308      	adds	r3, #8
 8101c9c:	2100      	movs	r1, #0
 8101c9e:	4618      	mov	r0, r3
 8101ca0:	f001 fbe6 	bl	8103470 <RCCEx_PLL2_Config>
 8101ca4:	4603      	mov	r3, r0
 8101ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101caa:	e011      	b.n	8101cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cb0:	3328      	adds	r3, #40	@ 0x28
 8101cb2:	2100      	movs	r1, #0
 8101cb4:	4618      	mov	r0, r3
 8101cb6:	f001 fc8d 	bl	81035d4 <RCCEx_PLL3_Config>
 8101cba:	4603      	mov	r3, r0
 8101cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101cc0:	e006      	b.n	8101cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101cc2:	2301      	movs	r3, #1
 8101cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101cc8:	e002      	b.n	8101cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101cca:	bf00      	nop
 8101ccc:	e000      	b.n	8101cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101cd4:	2b00      	cmp	r3, #0
 8101cd6:	d10a      	bne.n	8101cee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101cdc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8101ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101ce6:	4a4c      	ldr	r2, [pc, #304]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101ce8:	430b      	orrs	r3, r1
 8101cea:	6513      	str	r3, [r2, #80]	@ 0x50
 8101cec:	e003      	b.n	8101cf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101cfe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8101d02:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8101d06:	2300      	movs	r3, #0
 8101d08:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8101d0c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8101d10:	460b      	mov	r3, r1
 8101d12:	4313      	orrs	r3, r2
 8101d14:	d053      	beq.n	8101dbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8101d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101d1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101d22:	d035      	beq.n	8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8101d24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101d28:	d82e      	bhi.n	8101d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101d2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101d2e:	d031      	beq.n	8101d94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8101d30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101d34:	d828      	bhi.n	8101d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101d3a:	d01a      	beq.n	8101d72 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8101d3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101d40:	d822      	bhi.n	8101d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101d42:	2b00      	cmp	r3, #0
 8101d44:	d003      	beq.n	8101d4e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8101d46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101d4a:	d007      	beq.n	8101d5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8101d4c:	e01c      	b.n	8101d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101d4e:	4b32      	ldr	r3, [pc, #200]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101d52:	4a31      	ldr	r2, [pc, #196]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101d5a:	e01c      	b.n	8101d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d60:	3308      	adds	r3, #8
 8101d62:	2100      	movs	r1, #0
 8101d64:	4618      	mov	r0, r3
 8101d66:	f001 fb83 	bl	8103470 <RCCEx_PLL2_Config>
 8101d6a:	4603      	mov	r3, r0
 8101d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101d70:	e011      	b.n	8101d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d76:	3328      	adds	r3, #40	@ 0x28
 8101d78:	2100      	movs	r1, #0
 8101d7a:	4618      	mov	r0, r3
 8101d7c:	f001 fc2a 	bl	81035d4 <RCCEx_PLL3_Config>
 8101d80:	4603      	mov	r3, r0
 8101d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101d86:	e006      	b.n	8101d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101d88:	2301      	movs	r3, #1
 8101d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101d8e:	e002      	b.n	8101d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101d90:	bf00      	nop
 8101d92:	e000      	b.n	8101d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d9a:	2b00      	cmp	r3, #0
 8101d9c:	d10b      	bne.n	8101db6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101da2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8101da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101daa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101dae:	4a1a      	ldr	r2, [pc, #104]	@ (8101e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101db0:	430b      	orrs	r3, r1
 8101db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8101db4:	e003      	b.n	8101dbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101dc6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8101dca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8101dce:	2300      	movs	r3, #0
 8101dd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8101dd4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8101dd8:	460b      	mov	r3, r1
 8101dda:	4313      	orrs	r3, r2
 8101ddc:	d056      	beq.n	8101e8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8101dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101de2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101de6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101dea:	d038      	beq.n	8101e5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8101dec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101df0:	d831      	bhi.n	8101e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101df2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8101df6:	d034      	beq.n	8101e62 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8101df8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8101dfc:	d82b      	bhi.n	8101e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101dfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101e02:	d01d      	beq.n	8101e40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8101e04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101e08:	d825      	bhi.n	8101e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101e0a:	2b00      	cmp	r3, #0
 8101e0c:	d006      	beq.n	8101e1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8101e0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101e12:	d00a      	beq.n	8101e2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101e14:	e01f      	b.n	8101e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101e16:	bf00      	nop
 8101e18:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e1c:	4ba2      	ldr	r3, [pc, #648]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101e20:	4aa1      	ldr	r2, [pc, #644]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101e28:	e01c      	b.n	8101e64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e2e:	3308      	adds	r3, #8
 8101e30:	2100      	movs	r1, #0
 8101e32:	4618      	mov	r0, r3
 8101e34:	f001 fb1c 	bl	8103470 <RCCEx_PLL2_Config>
 8101e38:	4603      	mov	r3, r0
 8101e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101e3e:	e011      	b.n	8101e64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e44:	3328      	adds	r3, #40	@ 0x28
 8101e46:	2100      	movs	r1, #0
 8101e48:	4618      	mov	r0, r3
 8101e4a:	f001 fbc3 	bl	81035d4 <RCCEx_PLL3_Config>
 8101e4e:	4603      	mov	r3, r0
 8101e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101e54:	e006      	b.n	8101e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101e56:	2301      	movs	r3, #1
 8101e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101e5c:	e002      	b.n	8101e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101e5e:	bf00      	nop
 8101e60:	e000      	b.n	8101e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e68:	2b00      	cmp	r3, #0
 8101e6a:	d10b      	bne.n	8101e84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101e6c:	4b8e      	ldr	r3, [pc, #568]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101e70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8101e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101e7c:	4a8a      	ldr	r2, [pc, #552]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e7e:	430b      	orrs	r3, r1
 8101e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8101e82:	e003      	b.n	8101e8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e94:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8101e98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8101e9c:	2300      	movs	r3, #0
 8101e9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8101ea2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8101ea6:	460b      	mov	r3, r1
 8101ea8:	4313      	orrs	r3, r2
 8101eaa:	d03a      	beq.n	8101f22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8101eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101eb2:	2b30      	cmp	r3, #48	@ 0x30
 8101eb4:	d01f      	beq.n	8101ef6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8101eb6:	2b30      	cmp	r3, #48	@ 0x30
 8101eb8:	d819      	bhi.n	8101eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101eba:	2b20      	cmp	r3, #32
 8101ebc:	d00c      	beq.n	8101ed8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8101ebe:	2b20      	cmp	r3, #32
 8101ec0:	d815      	bhi.n	8101eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101ec2:	2b00      	cmp	r3, #0
 8101ec4:	d019      	beq.n	8101efa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8101ec6:	2b10      	cmp	r3, #16
 8101ec8:	d111      	bne.n	8101eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101eca:	4b77      	ldr	r3, [pc, #476]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101ece:	4a76      	ldr	r2, [pc, #472]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101ed6:	e011      	b.n	8101efc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101edc:	3308      	adds	r3, #8
 8101ede:	2102      	movs	r1, #2
 8101ee0:	4618      	mov	r0, r3
 8101ee2:	f001 fac5 	bl	8103470 <RCCEx_PLL2_Config>
 8101ee6:	4603      	mov	r3, r0
 8101ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101eec:	e006      	b.n	8101efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101eee:	2301      	movs	r3, #1
 8101ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101ef4:	e002      	b.n	8101efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101ef6:	bf00      	nop
 8101ef8:	e000      	b.n	8101efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101f00:	2b00      	cmp	r3, #0
 8101f02:	d10a      	bne.n	8101f1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101f04:	4b68      	ldr	r3, [pc, #416]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101f08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8101f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101f12:	4a65      	ldr	r2, [pc, #404]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f14:	430b      	orrs	r3, r1
 8101f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101f18:	e003      	b.n	8101f22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8101f2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8101f32:	2300      	movs	r3, #0
 8101f34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8101f38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8101f3c:	460b      	mov	r3, r1
 8101f3e:	4313      	orrs	r3, r2
 8101f40:	d051      	beq.n	8101fe6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8101f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101f48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101f4c:	d035      	beq.n	8101fba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8101f4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101f52:	d82e      	bhi.n	8101fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101f54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101f58:	d031      	beq.n	8101fbe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8101f5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101f5e:	d828      	bhi.n	8101fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101f64:	d01a      	beq.n	8101f9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8101f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101f6a:	d822      	bhi.n	8101fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101f6c:	2b00      	cmp	r3, #0
 8101f6e:	d003      	beq.n	8101f78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8101f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8101f74:	d007      	beq.n	8101f86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8101f76:	e01c      	b.n	8101fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101f78:	4b4b      	ldr	r3, [pc, #300]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101f7c:	4a4a      	ldr	r2, [pc, #296]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101f82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101f84:	e01c      	b.n	8101fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f8a:	3308      	adds	r3, #8
 8101f8c:	2100      	movs	r1, #0
 8101f8e:	4618      	mov	r0, r3
 8101f90:	f001 fa6e 	bl	8103470 <RCCEx_PLL2_Config>
 8101f94:	4603      	mov	r3, r0
 8101f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101f9a:	e011      	b.n	8101fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fa0:	3328      	adds	r3, #40	@ 0x28
 8101fa2:	2100      	movs	r1, #0
 8101fa4:	4618      	mov	r0, r3
 8101fa6:	f001 fb15 	bl	81035d4 <RCCEx_PLL3_Config>
 8101faa:	4603      	mov	r3, r0
 8101fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101fb0:	e006      	b.n	8101fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101fb2:	2301      	movs	r3, #1
 8101fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101fb8:	e002      	b.n	8101fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101fba:	bf00      	nop
 8101fbc:	e000      	b.n	8101fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101fc4:	2b00      	cmp	r3, #0
 8101fc6:	d10a      	bne.n	8101fde <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101fc8:	4b37      	ldr	r3, [pc, #220]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101fcc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8101fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101fd6:	4a34      	ldr	r2, [pc, #208]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101fd8:	430b      	orrs	r3, r1
 8101fda:	6513      	str	r3, [r2, #80]	@ 0x50
 8101fdc:	e003      	b.n	8101fe6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8101ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8101ff6:	2300      	movs	r3, #0
 8101ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8101ffc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8102000:	460b      	mov	r3, r1
 8102002:	4313      	orrs	r3, r2
 8102004:	d056      	beq.n	81020b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8102006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810200a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810200c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102010:	d033      	beq.n	810207a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102012:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102016:	d82c      	bhi.n	8102072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102018:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810201c:	d02f      	beq.n	810207e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810201e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102022:	d826      	bhi.n	8102072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102024:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102028:	d02b      	beq.n	8102082 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810202a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810202e:	d820      	bhi.n	8102072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102034:	d012      	beq.n	810205c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8102036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810203a:	d81a      	bhi.n	8102072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810203c:	2b00      	cmp	r3, #0
 810203e:	d022      	beq.n	8102086 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8102040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102044:	d115      	bne.n	8102072 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810204a:	3308      	adds	r3, #8
 810204c:	2101      	movs	r1, #1
 810204e:	4618      	mov	r0, r3
 8102050:	f001 fa0e 	bl	8103470 <RCCEx_PLL2_Config>
 8102054:	4603      	mov	r3, r0
 8102056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810205a:	e015      	b.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810205c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102060:	3328      	adds	r3, #40	@ 0x28
 8102062:	2101      	movs	r1, #1
 8102064:	4618      	mov	r0, r3
 8102066:	f001 fab5 	bl	81035d4 <RCCEx_PLL3_Config>
 810206a:	4603      	mov	r3, r0
 810206c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102070:	e00a      	b.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102072:	2301      	movs	r3, #1
 8102074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102078:	e006      	b.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810207a:	bf00      	nop
 810207c:	e004      	b.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810207e:	bf00      	nop
 8102080:	e002      	b.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102082:	bf00      	nop
 8102084:	e000      	b.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810208c:	2b00      	cmp	r3, #0
 810208e:	d10d      	bne.n	81020ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102090:	4b05      	ldr	r3, [pc, #20]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102094:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8102098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810209c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810209e:	4a02      	ldr	r2, [pc, #8]	@ (81020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81020a0:	430b      	orrs	r3, r1
 81020a2:	6513      	str	r3, [r2, #80]	@ 0x50
 81020a4:	e006      	b.n	81020b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81020a6:	bf00      	nop
 81020a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81020b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81020b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81020c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81020c4:	2300      	movs	r3, #0
 81020c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81020ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81020ce:	460b      	mov	r3, r1
 81020d0:	4313      	orrs	r3, r2
 81020d2:	d055      	beq.n	8102180 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81020d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81020dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81020e0:	d033      	beq.n	810214a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81020e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81020e6:	d82c      	bhi.n	8102142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81020ec:	d02f      	beq.n	810214e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81020ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81020f2:	d826      	bhi.n	8102142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81020f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81020f8:	d02b      	beq.n	8102152 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81020fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81020fe:	d820      	bhi.n	8102142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102100:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102104:	d012      	beq.n	810212c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8102106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810210a:	d81a      	bhi.n	8102142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810210c:	2b00      	cmp	r3, #0
 810210e:	d022      	beq.n	8102156 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8102110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102114:	d115      	bne.n	8102142 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810211a:	3308      	adds	r3, #8
 810211c:	2101      	movs	r1, #1
 810211e:	4618      	mov	r0, r3
 8102120:	f001 f9a6 	bl	8103470 <RCCEx_PLL2_Config>
 8102124:	4603      	mov	r3, r0
 8102126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810212a:	e015      	b.n	8102158 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810212c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102130:	3328      	adds	r3, #40	@ 0x28
 8102132:	2101      	movs	r1, #1
 8102134:	4618      	mov	r0, r3
 8102136:	f001 fa4d 	bl	81035d4 <RCCEx_PLL3_Config>
 810213a:	4603      	mov	r3, r0
 810213c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102140:	e00a      	b.n	8102158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8102142:	2301      	movs	r3, #1
 8102144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102148:	e006      	b.n	8102158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810214a:	bf00      	nop
 810214c:	e004      	b.n	8102158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810214e:	bf00      	nop
 8102150:	e002      	b.n	8102158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102152:	bf00      	nop
 8102154:	e000      	b.n	8102158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810215c:	2b00      	cmp	r3, #0
 810215e:	d10b      	bne.n	8102178 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102160:	4ba4      	ldr	r3, [pc, #656]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102164:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810216c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102170:	4aa0      	ldr	r2, [pc, #640]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102172:	430b      	orrs	r3, r1
 8102174:	6593      	str	r3, [r2, #88]	@ 0x58
 8102176:	e003      	b.n	8102180 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810217c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102188:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810218c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8102190:	2300      	movs	r3, #0
 8102192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8102196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810219a:	460b      	mov	r3, r1
 810219c:	4313      	orrs	r3, r2
 810219e:	d037      	beq.n	8102210 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81021a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81021a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81021aa:	d00e      	beq.n	81021ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81021ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81021b0:	d816      	bhi.n	81021e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81021b2:	2b00      	cmp	r3, #0
 81021b4:	d018      	beq.n	81021e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81021b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81021ba:	d111      	bne.n	81021e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81021bc:	4b8d      	ldr	r3, [pc, #564]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81021c0:	4a8c      	ldr	r2, [pc, #560]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81021c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81021c8:	e00f      	b.n	81021ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81021ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021ce:	3308      	adds	r3, #8
 81021d0:	2101      	movs	r1, #1
 81021d2:	4618      	mov	r0, r3
 81021d4:	f001 f94c 	bl	8103470 <RCCEx_PLL2_Config>
 81021d8:	4603      	mov	r3, r0
 81021da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81021de:	e004      	b.n	81021ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81021e0:	2301      	movs	r3, #1
 81021e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81021e6:	e000      	b.n	81021ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81021e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81021ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021ee:	2b00      	cmp	r3, #0
 81021f0:	d10a      	bne.n	8102208 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81021f2:	4b80      	ldr	r3, [pc, #512]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81021f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81021fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102200:	4a7c      	ldr	r2, [pc, #496]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102202:	430b      	orrs	r3, r1
 8102204:	6513      	str	r3, [r2, #80]	@ 0x50
 8102206:	e003      	b.n	8102210 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810220c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102218:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810221c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8102220:	2300      	movs	r3, #0
 8102222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8102226:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810222a:	460b      	mov	r3, r1
 810222c:	4313      	orrs	r3, r2
 810222e:	d039      	beq.n	81022a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8102230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102236:	2b03      	cmp	r3, #3
 8102238:	d81c      	bhi.n	8102274 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810223a:	a201      	add	r2, pc, #4	@ (adr r2, 8102240 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 810223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102240:	0810227d 	.word	0x0810227d
 8102244:	08102251 	.word	0x08102251
 8102248:	0810225f 	.word	0x0810225f
 810224c:	0810227d 	.word	0x0810227d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102250:	4b68      	ldr	r3, [pc, #416]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102254:	4a67      	ldr	r2, [pc, #412]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810225a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810225c:	e00f      	b.n	810227e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810225e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102262:	3308      	adds	r3, #8
 8102264:	2102      	movs	r1, #2
 8102266:	4618      	mov	r0, r3
 8102268:	f001 f902 	bl	8103470 <RCCEx_PLL2_Config>
 810226c:	4603      	mov	r3, r0
 810226e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102272:	e004      	b.n	810227e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102274:	2301      	movs	r3, #1
 8102276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810227a:	e000      	b.n	810227e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 810227c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810227e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102282:	2b00      	cmp	r3, #0
 8102284:	d10a      	bne.n	810229c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102286:	4b5b      	ldr	r3, [pc, #364]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810228a:	f023 0103 	bic.w	r1, r3, #3
 810228e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102294:	4a57      	ldr	r2, [pc, #348]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102296:	430b      	orrs	r3, r1
 8102298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810229a:	e003      	b.n	81022a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810229c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81022a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81022ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81022b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81022b4:	2300      	movs	r3, #0
 81022b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81022ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81022be:	460b      	mov	r3, r1
 81022c0:	4313      	orrs	r3, r2
 81022c2:	f000 809f 	beq.w	8102404 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81022c6:	4b4c      	ldr	r3, [pc, #304]	@ (81023f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	4a4b      	ldr	r2, [pc, #300]	@ (81023f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81022cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81022d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81022d2:	f7fe fe15 	bl	8100f00 <HAL_GetTick>
 81022d6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81022da:	e00b      	b.n	81022f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81022dc:	f7fe fe10 	bl	8100f00 <HAL_GetTick>
 81022e0:	4602      	mov	r2, r0
 81022e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81022e6:	1ad3      	subs	r3, r2, r3
 81022e8:	2b64      	cmp	r3, #100	@ 0x64
 81022ea:	d903      	bls.n	81022f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81022ec:	2303      	movs	r3, #3
 81022ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81022f2:	e005      	b.n	8102300 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81022f4:	4b40      	ldr	r3, [pc, #256]	@ (81023f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81022f6:	681b      	ldr	r3, [r3, #0]
 81022f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81022fc:	2b00      	cmp	r3, #0
 81022fe:	d0ed      	beq.n	81022dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8102300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102304:	2b00      	cmp	r3, #0
 8102306:	d179      	bne.n	81023fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102308:	4b3a      	ldr	r3, [pc, #232]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810230a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810230c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102314:	4053      	eors	r3, r2
 8102316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810231a:	2b00      	cmp	r3, #0
 810231c:	d015      	beq.n	810234a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810231e:	4b35      	ldr	r3, [pc, #212]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8102326:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810232a:	4b32      	ldr	r3, [pc, #200]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810232c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810232e:	4a31      	ldr	r2, [pc, #196]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8102334:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102336:	4b2f      	ldr	r3, [pc, #188]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810233a:	4a2e      	ldr	r2, [pc, #184]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810233c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8102340:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102342:	4a2c      	ldr	r2, [pc, #176]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102344:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102348:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810234a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810234e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102356:	d118      	bne.n	810238a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102358:	f7fe fdd2 	bl	8100f00 <HAL_GetTick>
 810235c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102360:	e00d      	b.n	810237e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102362:	f7fe fdcd 	bl	8100f00 <HAL_GetTick>
 8102366:	4602      	mov	r2, r0
 8102368:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810236c:	1ad2      	subs	r2, r2, r3
 810236e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8102372:	429a      	cmp	r2, r3
 8102374:	d903      	bls.n	810237e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8102376:	2303      	movs	r3, #3
 8102378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 810237c:	e005      	b.n	810238a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810237e:	4b1d      	ldr	r3, [pc, #116]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102382:	f003 0302 	and.w	r3, r3, #2
 8102386:	2b00      	cmp	r3, #0
 8102388:	d0eb      	beq.n	8102362 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810238a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810238e:	2b00      	cmp	r3, #0
 8102390:	d12b      	bne.n	81023ea <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102396:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810239a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810239e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81023a2:	d110      	bne.n	81023c6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81023a4:	4b13      	ldr	r3, [pc, #76]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023a6:	691b      	ldr	r3, [r3, #16]
 81023a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81023ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81023b4:	091b      	lsrs	r3, r3, #4
 81023b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81023ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81023be:	4a0d      	ldr	r2, [pc, #52]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023c0:	430b      	orrs	r3, r1
 81023c2:	6113      	str	r3, [r2, #16]
 81023c4:	e005      	b.n	81023d2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81023c6:	4b0b      	ldr	r3, [pc, #44]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023c8:	691b      	ldr	r3, [r3, #16]
 81023ca:	4a0a      	ldr	r2, [pc, #40]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81023d0:	6113      	str	r3, [r2, #16]
 81023d2:	4b08      	ldr	r3, [pc, #32]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81023d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81023de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81023e2:	4a04      	ldr	r2, [pc, #16]	@ (81023f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023e4:	430b      	orrs	r3, r1
 81023e6:	6713      	str	r3, [r2, #112]	@ 0x70
 81023e8:	e00c      	b.n	8102404 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81023ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 81023f2:	e007      	b.n	8102404 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81023f4:	58024400 	.word	0x58024400
 81023f8:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102408:	e9d3 2300 	ldrd	r2, r3, [r3]
 810240c:	f002 0301 	and.w	r3, r2, #1
 8102410:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8102414:	2300      	movs	r3, #0
 8102416:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810241a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810241e:	460b      	mov	r3, r1
 8102420:	4313      	orrs	r3, r2
 8102422:	f000 8089 	beq.w	8102538 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8102426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810242a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810242c:	2b28      	cmp	r3, #40	@ 0x28
 810242e:	d86b      	bhi.n	8102508 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8102430:	a201      	add	r2, pc, #4	@ (adr r2, 8102438 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8102432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102436:	bf00      	nop
 8102438:	08102511 	.word	0x08102511
 810243c:	08102509 	.word	0x08102509
 8102440:	08102509 	.word	0x08102509
 8102444:	08102509 	.word	0x08102509
 8102448:	08102509 	.word	0x08102509
 810244c:	08102509 	.word	0x08102509
 8102450:	08102509 	.word	0x08102509
 8102454:	08102509 	.word	0x08102509
 8102458:	081024dd 	.word	0x081024dd
 810245c:	08102509 	.word	0x08102509
 8102460:	08102509 	.word	0x08102509
 8102464:	08102509 	.word	0x08102509
 8102468:	08102509 	.word	0x08102509
 810246c:	08102509 	.word	0x08102509
 8102470:	08102509 	.word	0x08102509
 8102474:	08102509 	.word	0x08102509
 8102478:	081024f3 	.word	0x081024f3
 810247c:	08102509 	.word	0x08102509
 8102480:	08102509 	.word	0x08102509
 8102484:	08102509 	.word	0x08102509
 8102488:	08102509 	.word	0x08102509
 810248c:	08102509 	.word	0x08102509
 8102490:	08102509 	.word	0x08102509
 8102494:	08102509 	.word	0x08102509
 8102498:	08102511 	.word	0x08102511
 810249c:	08102509 	.word	0x08102509
 81024a0:	08102509 	.word	0x08102509
 81024a4:	08102509 	.word	0x08102509
 81024a8:	08102509 	.word	0x08102509
 81024ac:	08102509 	.word	0x08102509
 81024b0:	08102509 	.word	0x08102509
 81024b4:	08102509 	.word	0x08102509
 81024b8:	08102511 	.word	0x08102511
 81024bc:	08102509 	.word	0x08102509
 81024c0:	08102509 	.word	0x08102509
 81024c4:	08102509 	.word	0x08102509
 81024c8:	08102509 	.word	0x08102509
 81024cc:	08102509 	.word	0x08102509
 81024d0:	08102509 	.word	0x08102509
 81024d4:	08102509 	.word	0x08102509
 81024d8:	08102511 	.word	0x08102511
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81024dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024e0:	3308      	adds	r3, #8
 81024e2:	2101      	movs	r1, #1
 81024e4:	4618      	mov	r0, r3
 81024e6:	f000 ffc3 	bl	8103470 <RCCEx_PLL2_Config>
 81024ea:	4603      	mov	r3, r0
 81024ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81024f0:	e00f      	b.n	8102512 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81024f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024f6:	3328      	adds	r3, #40	@ 0x28
 81024f8:	2101      	movs	r1, #1
 81024fa:	4618      	mov	r0, r3
 81024fc:	f001 f86a 	bl	81035d4 <RCCEx_PLL3_Config>
 8102500:	4603      	mov	r3, r0
 8102502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102506:	e004      	b.n	8102512 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102508:	2301      	movs	r3, #1
 810250a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810250e:	e000      	b.n	8102512 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8102510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102516:	2b00      	cmp	r3, #0
 8102518:	d10a      	bne.n	8102530 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810251a:	4bbf      	ldr	r3, [pc, #764]	@ (8102818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810251c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810251e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8102522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102528:	4abb      	ldr	r2, [pc, #748]	@ (8102818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810252a:	430b      	orrs	r3, r1
 810252c:	6553      	str	r3, [r2, #84]	@ 0x54
 810252e:	e003      	b.n	8102538 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102540:	f002 0302 	and.w	r3, r2, #2
 8102544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8102548:	2300      	movs	r3, #0
 810254a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810254e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8102552:	460b      	mov	r3, r1
 8102554:	4313      	orrs	r3, r2
 8102556:	d041      	beq.n	81025dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8102558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810255c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810255e:	2b05      	cmp	r3, #5
 8102560:	d824      	bhi.n	81025ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8102562:	a201      	add	r2, pc, #4	@ (adr r2, 8102568 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8102564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102568:	081025b5 	.word	0x081025b5
 810256c:	08102581 	.word	0x08102581
 8102570:	08102597 	.word	0x08102597
 8102574:	081025b5 	.word	0x081025b5
 8102578:	081025b5 	.word	0x081025b5
 810257c:	081025b5 	.word	0x081025b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102584:	3308      	adds	r3, #8
 8102586:	2101      	movs	r1, #1
 8102588:	4618      	mov	r0, r3
 810258a:	f000 ff71 	bl	8103470 <RCCEx_PLL2_Config>
 810258e:	4603      	mov	r3, r0
 8102590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102594:	e00f      	b.n	81025b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810259a:	3328      	adds	r3, #40	@ 0x28
 810259c:	2101      	movs	r1, #1
 810259e:	4618      	mov	r0, r3
 81025a0:	f001 f818 	bl	81035d4 <RCCEx_PLL3_Config>
 81025a4:	4603      	mov	r3, r0
 81025a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81025aa:	e004      	b.n	81025b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81025ac:	2301      	movs	r3, #1
 81025ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81025b2:	e000      	b.n	81025b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81025b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81025b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025ba:	2b00      	cmp	r3, #0
 81025bc:	d10a      	bne.n	81025d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81025be:	4b96      	ldr	r3, [pc, #600]	@ (8102818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81025c2:	f023 0107 	bic.w	r1, r3, #7
 81025c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81025cc:	4a92      	ldr	r2, [pc, #584]	@ (8102818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81025ce:	430b      	orrs	r3, r1
 81025d0:	6553      	str	r3, [r2, #84]	@ 0x54
 81025d2:	e003      	b.n	81025dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81025dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025e4:	f002 0304 	and.w	r3, r2, #4
 81025e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81025ec:	2300      	movs	r3, #0
 81025ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81025f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81025f6:	460b      	mov	r3, r1
 81025f8:	4313      	orrs	r3, r2
 81025fa:	d044      	beq.n	8102686 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81025fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102604:	2b05      	cmp	r3, #5
 8102606:	d825      	bhi.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8102608:	a201      	add	r2, pc, #4	@ (adr r2, 8102610 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810260e:	bf00      	nop
 8102610:	0810265d 	.word	0x0810265d
 8102614:	08102629 	.word	0x08102629
 8102618:	0810263f 	.word	0x0810263f
 810261c:	0810265d 	.word	0x0810265d
 8102620:	0810265d 	.word	0x0810265d
 8102624:	0810265d 	.word	0x0810265d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810262c:	3308      	adds	r3, #8
 810262e:	2101      	movs	r1, #1
 8102630:	4618      	mov	r0, r3
 8102632:	f000 ff1d 	bl	8103470 <RCCEx_PLL2_Config>
 8102636:	4603      	mov	r3, r0
 8102638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810263c:	e00f      	b.n	810265e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810263e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102642:	3328      	adds	r3, #40	@ 0x28
 8102644:	2101      	movs	r1, #1
 8102646:	4618      	mov	r0, r3
 8102648:	f000 ffc4 	bl	81035d4 <RCCEx_PLL3_Config>
 810264c:	4603      	mov	r3, r0
 810264e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102652:	e004      	b.n	810265e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102654:	2301      	movs	r3, #1
 8102656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810265a:	e000      	b.n	810265e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810265c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810265e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102662:	2b00      	cmp	r3, #0
 8102664:	d10b      	bne.n	810267e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102666:	4b6c      	ldr	r3, [pc, #432]	@ (8102818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810266a:	f023 0107 	bic.w	r1, r3, #7
 810266e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102676:	4a68      	ldr	r2, [pc, #416]	@ (8102818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102678:	430b      	orrs	r3, r1
 810267a:	6593      	str	r3, [r2, #88]	@ 0x58
 810267c:	e003      	b.n	8102686 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810267e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102682:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810268e:	f002 0320 	and.w	r3, r2, #32
 8102692:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8102696:	2300      	movs	r3, #0
 8102698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810269c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81026a0:	460b      	mov	r3, r1
 81026a2:	4313      	orrs	r3, r2
 81026a4:	d055      	beq.n	8102752 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81026a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81026ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81026b2:	d033      	beq.n	810271c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81026b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81026b8:	d82c      	bhi.n	8102714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81026be:	d02f      	beq.n	8102720 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81026c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81026c4:	d826      	bhi.n	8102714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81026c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81026ca:	d02b      	beq.n	8102724 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81026cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81026d0:	d820      	bhi.n	8102714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81026d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81026d6:	d012      	beq.n	81026fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81026d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81026dc:	d81a      	bhi.n	8102714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81026de:	2b00      	cmp	r3, #0
 81026e0:	d022      	beq.n	8102728 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81026e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81026e6:	d115      	bne.n	8102714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81026e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026ec:	3308      	adds	r3, #8
 81026ee:	2100      	movs	r1, #0
 81026f0:	4618      	mov	r0, r3
 81026f2:	f000 febd 	bl	8103470 <RCCEx_PLL2_Config>
 81026f6:	4603      	mov	r3, r0
 81026f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81026fc:	e015      	b.n	810272a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81026fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102702:	3328      	adds	r3, #40	@ 0x28
 8102704:	2102      	movs	r1, #2
 8102706:	4618      	mov	r0, r3
 8102708:	f000 ff64 	bl	81035d4 <RCCEx_PLL3_Config>
 810270c:	4603      	mov	r3, r0
 810270e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102712:	e00a      	b.n	810272a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102714:	2301      	movs	r3, #1
 8102716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810271a:	e006      	b.n	810272a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810271c:	bf00      	nop
 810271e:	e004      	b.n	810272a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102720:	bf00      	nop
 8102722:	e002      	b.n	810272a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102724:	bf00      	nop
 8102726:	e000      	b.n	810272a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102728:	bf00      	nop
    }

    if (ret == HAL_OK)
 810272a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810272e:	2b00      	cmp	r3, #0
 8102730:	d10b      	bne.n	810274a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102732:	4b39      	ldr	r3, [pc, #228]	@ (8102818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102736:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810273a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102742:	4a35      	ldr	r2, [pc, #212]	@ (8102818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102744:	430b      	orrs	r3, r1
 8102746:	6553      	str	r3, [r2, #84]	@ 0x54
 8102748:	e003      	b.n	8102752 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810274a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810274e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102756:	e9d3 2300 	ldrd	r2, r3, [r3]
 810275a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810275e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8102762:	2300      	movs	r3, #0
 8102764:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8102768:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810276c:	460b      	mov	r3, r1
 810276e:	4313      	orrs	r3, r2
 8102770:	d058      	beq.n	8102824 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8102772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102776:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810277a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810277e:	d033      	beq.n	81027e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8102780:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102784:	d82c      	bhi.n	81027e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810278a:	d02f      	beq.n	81027ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 810278c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102790:	d826      	bhi.n	81027e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102792:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102796:	d02b      	beq.n	81027f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8102798:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810279c:	d820      	bhi.n	81027e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810279e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81027a2:	d012      	beq.n	81027ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81027a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81027a8:	d81a      	bhi.n	81027e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81027aa:	2b00      	cmp	r3, #0
 81027ac:	d022      	beq.n	81027f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81027ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81027b2:	d115      	bne.n	81027e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81027b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027b8:	3308      	adds	r3, #8
 81027ba:	2100      	movs	r1, #0
 81027bc:	4618      	mov	r0, r3
 81027be:	f000 fe57 	bl	8103470 <RCCEx_PLL2_Config>
 81027c2:	4603      	mov	r3, r0
 81027c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81027c8:	e015      	b.n	81027f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81027ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027ce:	3328      	adds	r3, #40	@ 0x28
 81027d0:	2102      	movs	r1, #2
 81027d2:	4618      	mov	r0, r3
 81027d4:	f000 fefe 	bl	81035d4 <RCCEx_PLL3_Config>
 81027d8:	4603      	mov	r3, r0
 81027da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81027de:	e00a      	b.n	81027f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81027e0:	2301      	movs	r3, #1
 81027e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81027e6:	e006      	b.n	81027f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81027e8:	bf00      	nop
 81027ea:	e004      	b.n	81027f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81027ec:	bf00      	nop
 81027ee:	e002      	b.n	81027f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81027f0:	bf00      	nop
 81027f2:	e000      	b.n	81027f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81027f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81027f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81027fa:	2b00      	cmp	r3, #0
 81027fc:	d10e      	bne.n	810281c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81027fe:	4b06      	ldr	r3, [pc, #24]	@ (8102818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102802:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8102806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810280a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810280e:	4a02      	ldr	r2, [pc, #8]	@ (8102818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102810:	430b      	orrs	r3, r1
 8102812:	6593      	str	r3, [r2, #88]	@ 0x58
 8102814:	e006      	b.n	8102824 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8102816:	bf00      	nop
 8102818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810281c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102828:	e9d3 2300 	ldrd	r2, r3, [r3]
 810282c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8102830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8102834:	2300      	movs	r3, #0
 8102836:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810283a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810283e:	460b      	mov	r3, r1
 8102840:	4313      	orrs	r3, r2
 8102842:	d055      	beq.n	81028f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8102844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102848:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810284c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102850:	d033      	beq.n	81028ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8102852:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102856:	d82c      	bhi.n	81028b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810285c:	d02f      	beq.n	81028be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810285e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102862:	d826      	bhi.n	81028b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102864:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102868:	d02b      	beq.n	81028c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810286a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810286e:	d820      	bhi.n	81028b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102874:	d012      	beq.n	810289c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8102876:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810287a:	d81a      	bhi.n	81028b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810287c:	2b00      	cmp	r3, #0
 810287e:	d022      	beq.n	81028c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8102880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102884:	d115      	bne.n	81028b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810288a:	3308      	adds	r3, #8
 810288c:	2100      	movs	r1, #0
 810288e:	4618      	mov	r0, r3
 8102890:	f000 fdee 	bl	8103470 <RCCEx_PLL2_Config>
 8102894:	4603      	mov	r3, r0
 8102896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810289a:	e015      	b.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810289c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028a0:	3328      	adds	r3, #40	@ 0x28
 81028a2:	2102      	movs	r1, #2
 81028a4:	4618      	mov	r0, r3
 81028a6:	f000 fe95 	bl	81035d4 <RCCEx_PLL3_Config>
 81028aa:	4603      	mov	r3, r0
 81028ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81028b0:	e00a      	b.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81028b2:	2301      	movs	r3, #1
 81028b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81028b8:	e006      	b.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81028ba:	bf00      	nop
 81028bc:	e004      	b.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81028be:	bf00      	nop
 81028c0:	e002      	b.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81028c2:	bf00      	nop
 81028c4:	e000      	b.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81028c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81028c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028cc:	2b00      	cmp	r3, #0
 81028ce:	d10b      	bne.n	81028e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81028d0:	4ba1      	ldr	r3, [pc, #644]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81028d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81028d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81028d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81028e0:	4a9d      	ldr	r2, [pc, #628]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81028e2:	430b      	orrs	r3, r1
 81028e4:	6593      	str	r3, [r2, #88]	@ 0x58
 81028e6:	e003      	b.n	81028f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81028f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028f8:	f002 0308 	and.w	r3, r2, #8
 81028fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8102900:	2300      	movs	r3, #0
 8102902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8102906:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810290a:	460b      	mov	r3, r1
 810290c:	4313      	orrs	r3, r2
 810290e:	d01e      	beq.n	810294e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8102910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810291c:	d10c      	bne.n	8102938 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810291e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102922:	3328      	adds	r3, #40	@ 0x28
 8102924:	2102      	movs	r1, #2
 8102926:	4618      	mov	r0, r3
 8102928:	f000 fe54 	bl	81035d4 <RCCEx_PLL3_Config>
 810292c:	4603      	mov	r3, r0
 810292e:	2b00      	cmp	r3, #0
 8102930:	d002      	beq.n	8102938 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8102932:	2301      	movs	r3, #1
 8102934:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102938:	4b87      	ldr	r3, [pc, #540]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810293a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810293c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8102940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102948:	4a83      	ldr	r2, [pc, #524]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810294a:	430b      	orrs	r3, r1
 810294c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810294e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102956:	f002 0310 	and.w	r3, r2, #16
 810295a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810295e:	2300      	movs	r3, #0
 8102960:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8102964:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8102968:	460b      	mov	r3, r1
 810296a:	4313      	orrs	r3, r2
 810296c:	d01e      	beq.n	81029ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810296e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810297a:	d10c      	bne.n	8102996 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810297c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102980:	3328      	adds	r3, #40	@ 0x28
 8102982:	2102      	movs	r1, #2
 8102984:	4618      	mov	r0, r3
 8102986:	f000 fe25 	bl	81035d4 <RCCEx_PLL3_Config>
 810298a:	4603      	mov	r3, r0
 810298c:	2b00      	cmp	r3, #0
 810298e:	d002      	beq.n	8102996 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8102990:	2301      	movs	r3, #1
 8102992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102996:	4b70      	ldr	r3, [pc, #448]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810299a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810299e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81029a6:	4a6c      	ldr	r2, [pc, #432]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81029a8:	430b      	orrs	r3, r1
 81029aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81029ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81029b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81029bc:	2300      	movs	r3, #0
 81029be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81029c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81029c6:	460b      	mov	r3, r1
 81029c8:	4313      	orrs	r3, r2
 81029ca:	d03e      	beq.n	8102a4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81029cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81029d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81029d8:	d022      	beq.n	8102a20 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81029da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81029de:	d81b      	bhi.n	8102a18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81029e0:	2b00      	cmp	r3, #0
 81029e2:	d003      	beq.n	81029ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81029e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81029e8:	d00b      	beq.n	8102a02 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81029ea:	e015      	b.n	8102a18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81029ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029f0:	3308      	adds	r3, #8
 81029f2:	2100      	movs	r1, #0
 81029f4:	4618      	mov	r0, r3
 81029f6:	f000 fd3b 	bl	8103470 <RCCEx_PLL2_Config>
 81029fa:	4603      	mov	r3, r0
 81029fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102a00:	e00f      	b.n	8102a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a06:	3328      	adds	r3, #40	@ 0x28
 8102a08:	2102      	movs	r1, #2
 8102a0a:	4618      	mov	r0, r3
 8102a0c:	f000 fde2 	bl	81035d4 <RCCEx_PLL3_Config>
 8102a10:	4603      	mov	r3, r0
 8102a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102a16:	e004      	b.n	8102a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102a18:	2301      	movs	r3, #1
 8102a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102a1e:	e000      	b.n	8102a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8102a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a26:	2b00      	cmp	r3, #0
 8102a28:	d10b      	bne.n	8102a42 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102a2e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8102a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102a3a:	4a47      	ldr	r2, [pc, #284]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102a3c:	430b      	orrs	r3, r1
 8102a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8102a40:	e003      	b.n	8102a4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a52:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8102a56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8102a58:	2300      	movs	r3, #0
 8102a5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8102a5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8102a60:	460b      	mov	r3, r1
 8102a62:	4313      	orrs	r3, r2
 8102a64:	d03b      	beq.n	8102ade <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8102a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102a6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102a72:	d01f      	beq.n	8102ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8102a74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102a78:	d818      	bhi.n	8102aac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8102a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102a7e:	d003      	beq.n	8102a88 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8102a80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102a84:	d007      	beq.n	8102a96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8102a86:	e011      	b.n	8102aac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a88:	4b33      	ldr	r3, [pc, #204]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a8c:	4a32      	ldr	r2, [pc, #200]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8102a94:	e00f      	b.n	8102ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a9a:	3328      	adds	r3, #40	@ 0x28
 8102a9c:	2101      	movs	r1, #1
 8102a9e:	4618      	mov	r0, r3
 8102aa0:	f000 fd98 	bl	81035d4 <RCCEx_PLL3_Config>
 8102aa4:	4603      	mov	r3, r0
 8102aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8102aaa:	e004      	b.n	8102ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102aac:	2301      	movs	r3, #1
 8102aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102ab2:	e000      	b.n	8102ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8102ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102aba:	2b00      	cmp	r3, #0
 8102abc:	d10b      	bne.n	8102ad6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102abe:	4b26      	ldr	r3, [pc, #152]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102ac2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102ace:	4a22      	ldr	r2, [pc, #136]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102ad0:	430b      	orrs	r3, r1
 8102ad2:	6553      	str	r3, [r2, #84]	@ 0x54
 8102ad4:	e003      	b.n	8102ade <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ae6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8102aea:	673b      	str	r3, [r7, #112]	@ 0x70
 8102aec:	2300      	movs	r3, #0
 8102aee:	677b      	str	r3, [r7, #116]	@ 0x74
 8102af0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8102af4:	460b      	mov	r3, r1
 8102af6:	4313      	orrs	r3, r2
 8102af8:	d034      	beq.n	8102b64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8102afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b00:	2b00      	cmp	r3, #0
 8102b02:	d003      	beq.n	8102b0c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8102b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102b08:	d007      	beq.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8102b0a:	e011      	b.n	8102b30 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b0c:	4b12      	ldr	r3, [pc, #72]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b10:	4a11      	ldr	r2, [pc, #68]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102b18:	e00e      	b.n	8102b38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b1e:	3308      	adds	r3, #8
 8102b20:	2102      	movs	r1, #2
 8102b22:	4618      	mov	r0, r3
 8102b24:	f000 fca4 	bl	8103470 <RCCEx_PLL2_Config>
 8102b28:	4603      	mov	r3, r0
 8102b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102b2e:	e003      	b.n	8102b38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8102b30:	2301      	movs	r3, #1
 8102b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b3c:	2b00      	cmp	r3, #0
 8102b3e:	d10d      	bne.n	8102b5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8102b40:	4b05      	ldr	r3, [pc, #20]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102b44:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8102b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b4e:	4a02      	ldr	r2, [pc, #8]	@ (8102b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b50:	430b      	orrs	r3, r1
 8102b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102b54:	e006      	b.n	8102b64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8102b56:	bf00      	nop
 8102b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b6c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8102b70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8102b72:	2300      	movs	r3, #0
 8102b74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8102b76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8102b7a:	460b      	mov	r3, r1
 8102b7c:	4313      	orrs	r3, r2
 8102b7e:	d00c      	beq.n	8102b9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b84:	3328      	adds	r3, #40	@ 0x28
 8102b86:	2102      	movs	r1, #2
 8102b88:	4618      	mov	r0, r3
 8102b8a:	f000 fd23 	bl	81035d4 <RCCEx_PLL3_Config>
 8102b8e:	4603      	mov	r3, r0
 8102b90:	2b00      	cmp	r3, #0
 8102b92:	d002      	beq.n	8102b9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8102b94:	2301      	movs	r3, #1
 8102b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ba2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8102ba6:	663b      	str	r3, [r7, #96]	@ 0x60
 8102ba8:	2300      	movs	r3, #0
 8102baa:	667b      	str	r3, [r7, #100]	@ 0x64
 8102bac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8102bb0:	460b      	mov	r3, r1
 8102bb2:	4313      	orrs	r3, r2
 8102bb4:	d038      	beq.n	8102c28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8102bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102bc2:	d018      	beq.n	8102bf6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8102bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102bc8:	d811      	bhi.n	8102bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102bce:	d014      	beq.n	8102bfa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8102bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102bd4:	d80b      	bhi.n	8102bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102bd6:	2b00      	cmp	r3, #0
 8102bd8:	d011      	beq.n	8102bfe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8102bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102bde:	d106      	bne.n	8102bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102be0:	4bc3      	ldr	r3, [pc, #780]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102be4:	4ac2      	ldr	r2, [pc, #776]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8102bec:	e008      	b.n	8102c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102bee:	2301      	movs	r3, #1
 8102bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102bf4:	e004      	b.n	8102c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102bf6:	bf00      	nop
 8102bf8:	e002      	b.n	8102c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102bfa:	bf00      	nop
 8102bfc:	e000      	b.n	8102c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c04:	2b00      	cmp	r3, #0
 8102c06:	d10b      	bne.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102c08:	4bb9      	ldr	r3, [pc, #740]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102c0c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102c18:	4ab5      	ldr	r2, [pc, #724]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c1a:	430b      	orrs	r3, r1
 8102c1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8102c1e:	e003      	b.n	8102c28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c30:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8102c34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8102c36:	2300      	movs	r3, #0
 8102c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8102c3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8102c3e:	460b      	mov	r3, r1
 8102c40:	4313      	orrs	r3, r2
 8102c42:	d009      	beq.n	8102c58 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102c44:	4baa      	ldr	r3, [pc, #680]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102c48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8102c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8102c52:	4aa7      	ldr	r2, [pc, #668]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c54:	430b      	orrs	r3, r1
 8102c56:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c60:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8102c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8102c66:	2300      	movs	r3, #0
 8102c68:	657b      	str	r3, [r7, #84]	@ 0x54
 8102c6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8102c6e:	460b      	mov	r3, r1
 8102c70:	4313      	orrs	r3, r2
 8102c72:	d00a      	beq.n	8102c8a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102c74:	4b9e      	ldr	r3, [pc, #632]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c76:	691b      	ldr	r3, [r3, #16]
 8102c78:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8102c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102c84:	4a9a      	ldr	r2, [pc, #616]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c86:	430b      	orrs	r3, r1
 8102c88:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c92:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8102c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8102c98:	2300      	movs	r3, #0
 8102c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8102c9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8102ca0:	460b      	mov	r3, r1
 8102ca2:	4313      	orrs	r3, r2
 8102ca4:	d009      	beq.n	8102cba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102ca6:	4b92      	ldr	r3, [pc, #584]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102caa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8102cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102cb4:	4a8e      	ldr	r2, [pc, #568]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102cb6:	430b      	orrs	r3, r1
 8102cb8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cc2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8102cc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8102cc8:	2300      	movs	r3, #0
 8102cca:	647b      	str	r3, [r7, #68]	@ 0x44
 8102ccc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8102cd0:	460b      	mov	r3, r1
 8102cd2:	4313      	orrs	r3, r2
 8102cd4:	d00e      	beq.n	8102cf4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102cd6:	4b86      	ldr	r3, [pc, #536]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102cd8:	691b      	ldr	r3, [r3, #16]
 8102cda:	4a85      	ldr	r2, [pc, #532]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102cdc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8102ce0:	6113      	str	r3, [r2, #16]
 8102ce2:	4b83      	ldr	r3, [pc, #524]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102ce4:	6919      	ldr	r1, [r3, #16]
 8102ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102cee:	4a80      	ldr	r2, [pc, #512]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102cf0:	430b      	orrs	r3, r1
 8102cf2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cfc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8102d00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8102d02:	2300      	movs	r3, #0
 8102d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102d06:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8102d0a:	460b      	mov	r3, r1
 8102d0c:	4313      	orrs	r3, r2
 8102d0e:	d009      	beq.n	8102d24 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102d10:	4b77      	ldr	r3, [pc, #476]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102d14:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d1e:	4a74      	ldr	r2, [pc, #464]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d20:	430b      	orrs	r3, r1
 8102d22:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d2c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8102d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8102d32:	2300      	movs	r3, #0
 8102d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8102d36:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8102d3a:	460b      	mov	r3, r1
 8102d3c:	4313      	orrs	r3, r2
 8102d3e:	d00a      	beq.n	8102d56 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102d40:	4b6b      	ldr	r3, [pc, #428]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d44:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8102d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102d50:	4a67      	ldr	r2, [pc, #412]	@ (8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d52:	430b      	orrs	r3, r1
 8102d54:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8102d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d5e:	2100      	movs	r1, #0
 8102d60:	62b9      	str	r1, [r7, #40]	@ 0x28
 8102d62:	f003 0301 	and.w	r3, r3, #1
 8102d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102d68:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8102d6c:	460b      	mov	r3, r1
 8102d6e:	4313      	orrs	r3, r2
 8102d70:	d011      	beq.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d76:	3308      	adds	r3, #8
 8102d78:	2100      	movs	r1, #0
 8102d7a:	4618      	mov	r0, r3
 8102d7c:	f000 fb78 	bl	8103470 <RCCEx_PLL2_Config>
 8102d80:	4603      	mov	r3, r0
 8102d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d8a:	2b00      	cmp	r3, #0
 8102d8c:	d003      	beq.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8102d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d9e:	2100      	movs	r1, #0
 8102da0:	6239      	str	r1, [r7, #32]
 8102da2:	f003 0302 	and.w	r3, r3, #2
 8102da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8102da8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8102dac:	460b      	mov	r3, r1
 8102dae:	4313      	orrs	r3, r2
 8102db0:	d011      	beq.n	8102dd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102db6:	3308      	adds	r3, #8
 8102db8:	2101      	movs	r1, #1
 8102dba:	4618      	mov	r0, r3
 8102dbc:	f000 fb58 	bl	8103470 <RCCEx_PLL2_Config>
 8102dc0:	4603      	mov	r3, r0
 8102dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102dca:	2b00      	cmp	r3, #0
 8102dcc:	d003      	beq.n	8102dd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8102dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dde:	2100      	movs	r1, #0
 8102de0:	61b9      	str	r1, [r7, #24]
 8102de2:	f003 0304 	and.w	r3, r3, #4
 8102de6:	61fb      	str	r3, [r7, #28]
 8102de8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8102dec:	460b      	mov	r3, r1
 8102dee:	4313      	orrs	r3, r2
 8102df0:	d011      	beq.n	8102e16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102df6:	3308      	adds	r3, #8
 8102df8:	2102      	movs	r1, #2
 8102dfa:	4618      	mov	r0, r3
 8102dfc:	f000 fb38 	bl	8103470 <RCCEx_PLL2_Config>
 8102e00:	4603      	mov	r3, r0
 8102e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e0a:	2b00      	cmp	r3, #0
 8102e0c:	d003      	beq.n	8102e16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8102e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e1e:	2100      	movs	r1, #0
 8102e20:	6139      	str	r1, [r7, #16]
 8102e22:	f003 0308 	and.w	r3, r3, #8
 8102e26:	617b      	str	r3, [r7, #20]
 8102e28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8102e2c:	460b      	mov	r3, r1
 8102e2e:	4313      	orrs	r3, r2
 8102e30:	d011      	beq.n	8102e56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e36:	3328      	adds	r3, #40	@ 0x28
 8102e38:	2100      	movs	r1, #0
 8102e3a:	4618      	mov	r0, r3
 8102e3c:	f000 fbca 	bl	81035d4 <RCCEx_PLL3_Config>
 8102e40:	4603      	mov	r3, r0
 8102e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8102e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e4a:	2b00      	cmp	r3, #0
 8102e4c:	d003      	beq.n	8102e56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8102e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e5e:	2100      	movs	r1, #0
 8102e60:	60b9      	str	r1, [r7, #8]
 8102e62:	f003 0310 	and.w	r3, r3, #16
 8102e66:	60fb      	str	r3, [r7, #12]
 8102e68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8102e6c:	460b      	mov	r3, r1
 8102e6e:	4313      	orrs	r3, r2
 8102e70:	d011      	beq.n	8102e96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e76:	3328      	adds	r3, #40	@ 0x28
 8102e78:	2101      	movs	r1, #1
 8102e7a:	4618      	mov	r0, r3
 8102e7c:	f000 fbaa 	bl	81035d4 <RCCEx_PLL3_Config>
 8102e80:	4603      	mov	r3, r0
 8102e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e8a:	2b00      	cmp	r3, #0
 8102e8c:	d003      	beq.n	8102e96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8102e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e9e:	2100      	movs	r1, #0
 8102ea0:	6039      	str	r1, [r7, #0]
 8102ea2:	f003 0320 	and.w	r3, r3, #32
 8102ea6:	607b      	str	r3, [r7, #4]
 8102ea8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8102eac:	460b      	mov	r3, r1
 8102eae:	4313      	orrs	r3, r2
 8102eb0:	d011      	beq.n	8102ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102eb6:	3328      	adds	r3, #40	@ 0x28
 8102eb8:	2102      	movs	r1, #2
 8102eba:	4618      	mov	r0, r3
 8102ebc:	f000 fb8a 	bl	81035d4 <RCCEx_PLL3_Config>
 8102ec0:	4603      	mov	r3, r0
 8102ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102eca:	2b00      	cmp	r3, #0
 8102ecc:	d003      	beq.n	8102ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8102ed6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8102eda:	2b00      	cmp	r3, #0
 8102edc:	d101      	bne.n	8102ee2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8102ede:	2300      	movs	r3, #0
 8102ee0:	e000      	b.n	8102ee4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8102ee2:	2301      	movs	r3, #1
}
 8102ee4:	4618      	mov	r0, r3
 8102ee6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8102eea:	46bd      	mov	sp, r7
 8102eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8102ef0:	58024400 	.word	0x58024400

08102ef4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8102ef4:	b580      	push	{r7, lr}
 8102ef6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8102ef8:	f7fe fd94 	bl	8101a24 <HAL_RCC_GetHCLKFreq>
 8102efc:	4602      	mov	r2, r0
 8102efe:	4b06      	ldr	r3, [pc, #24]	@ (8102f18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102f00:	6a1b      	ldr	r3, [r3, #32]
 8102f02:	091b      	lsrs	r3, r3, #4
 8102f04:	f003 0307 	and.w	r3, r3, #7
 8102f08:	4904      	ldr	r1, [pc, #16]	@ (8102f1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8102f0a:	5ccb      	ldrb	r3, [r1, r3]
 8102f0c:	f003 031f 	and.w	r3, r3, #31
 8102f10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8102f14:	4618      	mov	r0, r3
 8102f16:	bd80      	pop	{r7, pc}
 8102f18:	58024400 	.word	0x58024400
 8102f1c:	08104a14 	.word	0x08104a14

08102f20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8102f20:	b480      	push	{r7}
 8102f22:	b089      	sub	sp, #36	@ 0x24
 8102f24:	af00      	add	r7, sp, #0
 8102f26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102f28:	4ba1      	ldr	r3, [pc, #644]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102f2c:	f003 0303 	and.w	r3, r3, #3
 8102f30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8102f32:	4b9f      	ldr	r3, [pc, #636]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102f36:	0b1b      	lsrs	r3, r3, #12
 8102f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102f3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8102f3e:	4b9c      	ldr	r3, [pc, #624]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f42:	091b      	lsrs	r3, r3, #4
 8102f44:	f003 0301 	and.w	r3, r3, #1
 8102f48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8102f4a:	4b99      	ldr	r3, [pc, #612]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102f4e:	08db      	lsrs	r3, r3, #3
 8102f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102f54:	693a      	ldr	r2, [r7, #16]
 8102f56:	fb02 f303 	mul.w	r3, r2, r3
 8102f5a:	ee07 3a90 	vmov	s15, r3
 8102f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8102f66:	697b      	ldr	r3, [r7, #20]
 8102f68:	2b00      	cmp	r3, #0
 8102f6a:	f000 8111 	beq.w	8103190 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102f6e:	69bb      	ldr	r3, [r7, #24]
 8102f70:	2b02      	cmp	r3, #2
 8102f72:	f000 8083 	beq.w	810307c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8102f76:	69bb      	ldr	r3, [r7, #24]
 8102f78:	2b02      	cmp	r3, #2
 8102f7a:	f200 80a1 	bhi.w	81030c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102f7e:	69bb      	ldr	r3, [r7, #24]
 8102f80:	2b00      	cmp	r3, #0
 8102f82:	d003      	beq.n	8102f8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8102f84:	69bb      	ldr	r3, [r7, #24]
 8102f86:	2b01      	cmp	r3, #1
 8102f88:	d056      	beq.n	8103038 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102f8a:	e099      	b.n	81030c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102f8c:	4b88      	ldr	r3, [pc, #544]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102f8e:	681b      	ldr	r3, [r3, #0]
 8102f90:	f003 0320 	and.w	r3, r3, #32
 8102f94:	2b00      	cmp	r3, #0
 8102f96:	d02d      	beq.n	8102ff4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102f98:	4b85      	ldr	r3, [pc, #532]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102f9a:	681b      	ldr	r3, [r3, #0]
 8102f9c:	08db      	lsrs	r3, r3, #3
 8102f9e:	f003 0303 	and.w	r3, r3, #3
 8102fa2:	4a84      	ldr	r2, [pc, #528]	@ (81031b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8102fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8102fa8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102faa:	68bb      	ldr	r3, [r7, #8]
 8102fac:	ee07 3a90 	vmov	s15, r3
 8102fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102fb4:	697b      	ldr	r3, [r7, #20]
 8102fb6:	ee07 3a90 	vmov	s15, r3
 8102fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102fc2:	4b7b      	ldr	r3, [pc, #492]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102fca:	ee07 3a90 	vmov	s15, r3
 8102fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8102fd6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81031b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102fee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8102ff2:	e087      	b.n	8103104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102ff4:	697b      	ldr	r3, [r7, #20]
 8102ff6:	ee07 3a90 	vmov	s15, r3
 8102ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ffe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81031bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103006:	4b6a      	ldr	r3, [pc, #424]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810300a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810300e:	ee07 3a90 	vmov	s15, r3
 8103012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103016:	ed97 6a03 	vldr	s12, [r7, #12]
 810301a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81031b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810301e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810302a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810302e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103036:	e065      	b.n	8103104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103038:	697b      	ldr	r3, [r7, #20]
 810303a:	ee07 3a90 	vmov	s15, r3
 810303e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103042:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81031c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810304a:	4b59      	ldr	r3, [pc, #356]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810304c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810304e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103052:	ee07 3a90 	vmov	s15, r3
 8103056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810305a:	ed97 6a03 	vldr	s12, [r7, #12]
 810305e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81031b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810306a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810306e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810307a:	e043      	b.n	8103104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810307c:	697b      	ldr	r3, [r7, #20]
 810307e:	ee07 3a90 	vmov	s15, r3
 8103082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103086:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810308a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810308e:	4b48      	ldr	r3, [pc, #288]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103096:	ee07 3a90 	vmov	s15, r3
 810309a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810309e:	ed97 6a03 	vldr	s12, [r7, #12]
 81030a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81031b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81030a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81030b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81030be:	e021      	b.n	8103104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81030c0:	697b      	ldr	r3, [r7, #20]
 81030c2:	ee07 3a90 	vmov	s15, r3
 81030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81031c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81030ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030d2:	4b37      	ldr	r3, [pc, #220]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81030d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81030d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81030da:	ee07 3a90 	vmov	s15, r3
 81030de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81030e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81030e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81031b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81030ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81030f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103102:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8103104:	4b2a      	ldr	r3, [pc, #168]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103108:	0a5b      	lsrs	r3, r3, #9
 810310a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810310e:	ee07 3a90 	vmov	s15, r3
 8103112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810311a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810311e:	edd7 6a07 	vldr	s13, [r7, #28]
 8103122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810312a:	ee17 2a90 	vmov	r2, s15
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8103132:	4b1f      	ldr	r3, [pc, #124]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103136:	0c1b      	lsrs	r3, r3, #16
 8103138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810313c:	ee07 3a90 	vmov	s15, r3
 8103140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103144:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103148:	ee37 7a87 	vadd.f32	s14, s15, s14
 810314c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103158:	ee17 2a90 	vmov	r2, s15
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8103160:	4b13      	ldr	r3, [pc, #76]	@ (81031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103164:	0e1b      	lsrs	r3, r3, #24
 8103166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810316a:	ee07 3a90 	vmov	s15, r3
 810316e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103172:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103176:	ee37 7a87 	vadd.f32	s14, s15, s14
 810317a:	edd7 6a07 	vldr	s13, [r7, #28]
 810317e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103186:	ee17 2a90 	vmov	r2, s15
 810318a:	687b      	ldr	r3, [r7, #4]
 810318c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810318e:	e008      	b.n	81031a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	2200      	movs	r2, #0
 8103194:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	2200      	movs	r2, #0
 810319a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	2200      	movs	r2, #0
 81031a0:	609a      	str	r2, [r3, #8]
}
 81031a2:	bf00      	nop
 81031a4:	3724      	adds	r7, #36	@ 0x24
 81031a6:	46bd      	mov	sp, r7
 81031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031ac:	4770      	bx	lr
 81031ae:	bf00      	nop
 81031b0:	58024400 	.word	0x58024400
 81031b4:	03d09000 	.word	0x03d09000
 81031b8:	46000000 	.word	0x46000000
 81031bc:	4c742400 	.word	0x4c742400
 81031c0:	4a742400 	.word	0x4a742400
 81031c4:	4bbebc20 	.word	0x4bbebc20

081031c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81031c8:	b480      	push	{r7}
 81031ca:	b089      	sub	sp, #36	@ 0x24
 81031cc:	af00      	add	r7, sp, #0
 81031ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81031d0:	4ba1      	ldr	r3, [pc, #644]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81031d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81031d4:	f003 0303 	and.w	r3, r3, #3
 81031d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81031da:	4b9f      	ldr	r3, [pc, #636]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81031de:	0d1b      	lsrs	r3, r3, #20
 81031e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81031e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81031e6:	4b9c      	ldr	r3, [pc, #624]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81031e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81031ea:	0a1b      	lsrs	r3, r3, #8
 81031ec:	f003 0301 	and.w	r3, r3, #1
 81031f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81031f2:	4b99      	ldr	r3, [pc, #612]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81031f6:	08db      	lsrs	r3, r3, #3
 81031f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81031fc:	693a      	ldr	r2, [r7, #16]
 81031fe:	fb02 f303 	mul.w	r3, r2, r3
 8103202:	ee07 3a90 	vmov	s15, r3
 8103206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810320a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810320e:	697b      	ldr	r3, [r7, #20]
 8103210:	2b00      	cmp	r3, #0
 8103212:	f000 8111 	beq.w	8103438 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8103216:	69bb      	ldr	r3, [r7, #24]
 8103218:	2b02      	cmp	r3, #2
 810321a:	f000 8083 	beq.w	8103324 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810321e:	69bb      	ldr	r3, [r7, #24]
 8103220:	2b02      	cmp	r3, #2
 8103222:	f200 80a1 	bhi.w	8103368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8103226:	69bb      	ldr	r3, [r7, #24]
 8103228:	2b00      	cmp	r3, #0
 810322a:	d003      	beq.n	8103234 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810322c:	69bb      	ldr	r3, [r7, #24]
 810322e:	2b01      	cmp	r3, #1
 8103230:	d056      	beq.n	81032e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8103232:	e099      	b.n	8103368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103234:	4b88      	ldr	r3, [pc, #544]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	f003 0320 	and.w	r3, r3, #32
 810323c:	2b00      	cmp	r3, #0
 810323e:	d02d      	beq.n	810329c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103240:	4b85      	ldr	r3, [pc, #532]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103242:	681b      	ldr	r3, [r3, #0]
 8103244:	08db      	lsrs	r3, r3, #3
 8103246:	f003 0303 	and.w	r3, r3, #3
 810324a:	4a84      	ldr	r2, [pc, #528]	@ (810345c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810324c:	fa22 f303 	lsr.w	r3, r2, r3
 8103250:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103252:	68bb      	ldr	r3, [r7, #8]
 8103254:	ee07 3a90 	vmov	s15, r3
 8103258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810325c:	697b      	ldr	r3, [r7, #20]
 810325e:	ee07 3a90 	vmov	s15, r3
 8103262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810326a:	4b7b      	ldr	r3, [pc, #492]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810326e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103272:	ee07 3a90 	vmov	s15, r3
 8103276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810327a:	ed97 6a03 	vldr	s12, [r7, #12]
 810327e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8103460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810328a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810328e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103296:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810329a:	e087      	b.n	81033ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810329c:	697b      	ldr	r3, [r7, #20]
 810329e:	ee07 3a90 	vmov	s15, r3
 81032a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8103464 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81032aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81032ae:	4b6a      	ldr	r3, [pc, #424]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81032b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81032b6:	ee07 3a90 	vmov	s15, r3
 81032ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81032be:	ed97 6a03 	vldr	s12, [r7, #12]
 81032c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8103460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81032c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81032ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81032ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81032d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81032d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81032da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81032de:	e065      	b.n	81033ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81032e0:	697b      	ldr	r3, [r7, #20]
 81032e2:	ee07 3a90 	vmov	s15, r3
 81032e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8103468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81032ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81032f2:	4b59      	ldr	r3, [pc, #356]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81032f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81032fa:	ee07 3a90 	vmov	s15, r3
 81032fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103302:	ed97 6a03 	vldr	s12, [r7, #12]
 8103306:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8103460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810330a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810330e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810331a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810331e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103322:	e043      	b.n	81033ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103324:	697b      	ldr	r3, [r7, #20]
 8103326:	ee07 3a90 	vmov	s15, r3
 810332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810332e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810346c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8103332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103336:	4b48      	ldr	r3, [pc, #288]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810333a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810333e:	ee07 3a90 	vmov	s15, r3
 8103342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103346:	ed97 6a03 	vldr	s12, [r7, #12]
 810334a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8103460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810334e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810335a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810335e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103366:	e021      	b.n	81033ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103368:	697b      	ldr	r3, [r7, #20]
 810336a:	ee07 3a90 	vmov	s15, r3
 810336e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103372:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8103468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810337a:	4b37      	ldr	r3, [pc, #220]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810337e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103382:	ee07 3a90 	vmov	s15, r3
 8103386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810338a:	ed97 6a03 	vldr	s12, [r7, #12]
 810338e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8103460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810339a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810339e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81033a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81033a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81033aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81033ac:	4b2a      	ldr	r3, [pc, #168]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81033b0:	0a5b      	lsrs	r3, r3, #9
 81033b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81033b6:	ee07 3a90 	vmov	s15, r3
 81033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81033c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81033c6:	edd7 6a07 	vldr	s13, [r7, #28]
 81033ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81033ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81033d2:	ee17 2a90 	vmov	r2, s15
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81033da:	4b1f      	ldr	r3, [pc, #124]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81033de:	0c1b      	lsrs	r3, r3, #16
 81033e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81033e4:	ee07 3a90 	vmov	s15, r3
 81033e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81033f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81033f4:	edd7 6a07 	vldr	s13, [r7, #28]
 81033f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81033fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103400:	ee17 2a90 	vmov	r2, s15
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8103408:	4b13      	ldr	r3, [pc, #76]	@ (8103458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810340c:	0e1b      	lsrs	r3, r3, #24
 810340e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103412:	ee07 3a90 	vmov	s15, r3
 8103416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810341a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810341e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103422:	edd7 6a07 	vldr	s13, [r7, #28]
 8103426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810342a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810342e:	ee17 2a90 	vmov	r2, s15
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8103436:	e008      	b.n	810344a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8103438:	687b      	ldr	r3, [r7, #4]
 810343a:	2200      	movs	r2, #0
 810343c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	2200      	movs	r2, #0
 8103442:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	2200      	movs	r2, #0
 8103448:	609a      	str	r2, [r3, #8]
}
 810344a:	bf00      	nop
 810344c:	3724      	adds	r7, #36	@ 0x24
 810344e:	46bd      	mov	sp, r7
 8103450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103454:	4770      	bx	lr
 8103456:	bf00      	nop
 8103458:	58024400 	.word	0x58024400
 810345c:	03d09000 	.word	0x03d09000
 8103460:	46000000 	.word	0x46000000
 8103464:	4c742400 	.word	0x4c742400
 8103468:	4a742400 	.word	0x4a742400
 810346c:	4bbebc20 	.word	0x4bbebc20

08103470 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103470:	b580      	push	{r7, lr}
 8103472:	b084      	sub	sp, #16
 8103474:	af00      	add	r7, sp, #0
 8103476:	6078      	str	r0, [r7, #4]
 8103478:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810347a:	2300      	movs	r3, #0
 810347c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810347e:	4b54      	ldr	r3, [pc, #336]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103482:	f003 0303 	and.w	r3, r3, #3
 8103486:	2b03      	cmp	r3, #3
 8103488:	d101      	bne.n	810348e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810348a:	2301      	movs	r3, #1
 810348c:	e09b      	b.n	81035c6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810348e:	4b50      	ldr	r3, [pc, #320]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103490:	681b      	ldr	r3, [r3, #0]
 8103492:	4a4f      	ldr	r2, [pc, #316]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103494:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810349a:	f7fd fd31 	bl	8100f00 <HAL_GetTick>
 810349e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81034a0:	e008      	b.n	81034b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81034a2:	f7fd fd2d 	bl	8100f00 <HAL_GetTick>
 81034a6:	4602      	mov	r2, r0
 81034a8:	68bb      	ldr	r3, [r7, #8]
 81034aa:	1ad3      	subs	r3, r2, r3
 81034ac:	2b02      	cmp	r3, #2
 81034ae:	d901      	bls.n	81034b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81034b0:	2303      	movs	r3, #3
 81034b2:	e088      	b.n	81035c6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81034b4:	4b46      	ldr	r3, [pc, #280]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 81034b6:	681b      	ldr	r3, [r3, #0]
 81034b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81034bc:	2b00      	cmp	r3, #0
 81034be:	d1f0      	bne.n	81034a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81034c0:	4b43      	ldr	r3, [pc, #268]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 81034c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81034c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	681b      	ldr	r3, [r3, #0]
 81034cc:	031b      	lsls	r3, r3, #12
 81034ce:	4940      	ldr	r1, [pc, #256]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 81034d0:	4313      	orrs	r3, r2
 81034d2:	628b      	str	r3, [r1, #40]	@ 0x28
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	685b      	ldr	r3, [r3, #4]
 81034d8:	3b01      	subs	r3, #1
 81034da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	689b      	ldr	r3, [r3, #8]
 81034e2:	3b01      	subs	r3, #1
 81034e4:	025b      	lsls	r3, r3, #9
 81034e6:	b29b      	uxth	r3, r3
 81034e8:	431a      	orrs	r2, r3
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	68db      	ldr	r3, [r3, #12]
 81034ee:	3b01      	subs	r3, #1
 81034f0:	041b      	lsls	r3, r3, #16
 81034f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81034f6:	431a      	orrs	r2, r3
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	691b      	ldr	r3, [r3, #16]
 81034fc:	3b01      	subs	r3, #1
 81034fe:	061b      	lsls	r3, r3, #24
 8103500:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103504:	4932      	ldr	r1, [pc, #200]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103506:	4313      	orrs	r3, r2
 8103508:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810350a:	4b31      	ldr	r3, [pc, #196]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 810350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810350e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	695b      	ldr	r3, [r3, #20]
 8103516:	492e      	ldr	r1, [pc, #184]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103518:	4313      	orrs	r3, r2
 810351a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810351c:	4b2c      	ldr	r3, [pc, #176]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 810351e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103520:	f023 0220 	bic.w	r2, r3, #32
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	699b      	ldr	r3, [r3, #24]
 8103528:	4929      	ldr	r1, [pc, #164]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 810352a:	4313      	orrs	r3, r2
 810352c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810352e:	4b28      	ldr	r3, [pc, #160]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103532:	4a27      	ldr	r2, [pc, #156]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103534:	f023 0310 	bic.w	r3, r3, #16
 8103538:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810353a:	4b25      	ldr	r3, [pc, #148]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 810353c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810353e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103542:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8103546:	687a      	ldr	r2, [r7, #4]
 8103548:	69d2      	ldr	r2, [r2, #28]
 810354a:	00d2      	lsls	r2, r2, #3
 810354c:	4920      	ldr	r1, [pc, #128]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 810354e:	4313      	orrs	r3, r2
 8103550:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103552:	4b1f      	ldr	r3, [pc, #124]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103556:	4a1e      	ldr	r2, [pc, #120]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103558:	f043 0310 	orr.w	r3, r3, #16
 810355c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810355e:	683b      	ldr	r3, [r7, #0]
 8103560:	2b00      	cmp	r3, #0
 8103562:	d106      	bne.n	8103572 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103564:	4b1a      	ldr	r3, [pc, #104]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103568:	4a19      	ldr	r2, [pc, #100]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 810356a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810356e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103570:	e00f      	b.n	8103592 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103572:	683b      	ldr	r3, [r7, #0]
 8103574:	2b01      	cmp	r3, #1
 8103576:	d106      	bne.n	8103586 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103578:	4b15      	ldr	r3, [pc, #84]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 810357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810357c:	4a14      	ldr	r2, [pc, #80]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 810357e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8103582:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103584:	e005      	b.n	8103592 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103586:	4b12      	ldr	r3, [pc, #72]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810358a:	4a11      	ldr	r2, [pc, #68]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 810358c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103590:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103592:	4b0f      	ldr	r3, [pc, #60]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103594:	681b      	ldr	r3, [r3, #0]
 8103596:	4a0e      	ldr	r2, [pc, #56]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 8103598:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810359c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810359e:	f7fd fcaf 	bl	8100f00 <HAL_GetTick>
 81035a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81035a4:	e008      	b.n	81035b8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81035a6:	f7fd fcab 	bl	8100f00 <HAL_GetTick>
 81035aa:	4602      	mov	r2, r0
 81035ac:	68bb      	ldr	r3, [r7, #8]
 81035ae:	1ad3      	subs	r3, r2, r3
 81035b0:	2b02      	cmp	r3, #2
 81035b2:	d901      	bls.n	81035b8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81035b4:	2303      	movs	r3, #3
 81035b6:	e006      	b.n	81035c6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81035b8:	4b05      	ldr	r3, [pc, #20]	@ (81035d0 <RCCEx_PLL2_Config+0x160>)
 81035ba:	681b      	ldr	r3, [r3, #0]
 81035bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81035c0:	2b00      	cmp	r3, #0
 81035c2:	d0f0      	beq.n	81035a6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 81035c6:	4618      	mov	r0, r3
 81035c8:	3710      	adds	r7, #16
 81035ca:	46bd      	mov	sp, r7
 81035cc:	bd80      	pop	{r7, pc}
 81035ce:	bf00      	nop
 81035d0:	58024400 	.word	0x58024400

081035d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81035d4:	b580      	push	{r7, lr}
 81035d6:	b084      	sub	sp, #16
 81035d8:	af00      	add	r7, sp, #0
 81035da:	6078      	str	r0, [r7, #4]
 81035dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81035de:	2300      	movs	r3, #0
 81035e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81035e2:	4b54      	ldr	r3, [pc, #336]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81035e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81035e6:	f003 0303 	and.w	r3, r3, #3
 81035ea:	2b03      	cmp	r3, #3
 81035ec:	d101      	bne.n	81035f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81035ee:	2301      	movs	r3, #1
 81035f0:	e09b      	b.n	810372a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81035f2:	4b50      	ldr	r3, [pc, #320]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81035f4:	681b      	ldr	r3, [r3, #0]
 81035f6:	4a4f      	ldr	r2, [pc, #316]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81035f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81035fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81035fe:	f7fd fc7f 	bl	8100f00 <HAL_GetTick>
 8103602:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103604:	e008      	b.n	8103618 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103606:	f7fd fc7b 	bl	8100f00 <HAL_GetTick>
 810360a:	4602      	mov	r2, r0
 810360c:	68bb      	ldr	r3, [r7, #8]
 810360e:	1ad3      	subs	r3, r2, r3
 8103610:	2b02      	cmp	r3, #2
 8103612:	d901      	bls.n	8103618 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103614:	2303      	movs	r3, #3
 8103616:	e088      	b.n	810372a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103618:	4b46      	ldr	r3, [pc, #280]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 810361a:	681b      	ldr	r3, [r3, #0]
 810361c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103620:	2b00      	cmp	r3, #0
 8103622:	d1f0      	bne.n	8103606 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103624:	4b43      	ldr	r3, [pc, #268]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 8103626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103628:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	681b      	ldr	r3, [r3, #0]
 8103630:	051b      	lsls	r3, r3, #20
 8103632:	4940      	ldr	r1, [pc, #256]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 8103634:	4313      	orrs	r3, r2
 8103636:	628b      	str	r3, [r1, #40]	@ 0x28
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	685b      	ldr	r3, [r3, #4]
 810363c:	3b01      	subs	r3, #1
 810363e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103642:	687b      	ldr	r3, [r7, #4]
 8103644:	689b      	ldr	r3, [r3, #8]
 8103646:	3b01      	subs	r3, #1
 8103648:	025b      	lsls	r3, r3, #9
 810364a:	b29b      	uxth	r3, r3
 810364c:	431a      	orrs	r2, r3
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	68db      	ldr	r3, [r3, #12]
 8103652:	3b01      	subs	r3, #1
 8103654:	041b      	lsls	r3, r3, #16
 8103656:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810365a:	431a      	orrs	r2, r3
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	691b      	ldr	r3, [r3, #16]
 8103660:	3b01      	subs	r3, #1
 8103662:	061b      	lsls	r3, r3, #24
 8103664:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103668:	4932      	ldr	r1, [pc, #200]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 810366a:	4313      	orrs	r3, r2
 810366c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810366e:	4b31      	ldr	r3, [pc, #196]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 8103670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103672:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	695b      	ldr	r3, [r3, #20]
 810367a:	492e      	ldr	r1, [pc, #184]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 810367c:	4313      	orrs	r3, r2
 810367e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103680:	4b2c      	ldr	r3, [pc, #176]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 8103682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103684:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	699b      	ldr	r3, [r3, #24]
 810368c:	4929      	ldr	r1, [pc, #164]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 810368e:	4313      	orrs	r3, r2
 8103690:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103692:	4b28      	ldr	r3, [pc, #160]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 8103694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103696:	4a27      	ldr	r2, [pc, #156]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 8103698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810369c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810369e:	4b25      	ldr	r3, [pc, #148]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81036a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81036a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81036aa:	687a      	ldr	r2, [r7, #4]
 81036ac:	69d2      	ldr	r2, [r2, #28]
 81036ae:	00d2      	lsls	r2, r2, #3
 81036b0:	4920      	ldr	r1, [pc, #128]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036b2:	4313      	orrs	r3, r2
 81036b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81036b6:	4b1f      	ldr	r3, [pc, #124]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036ba:	4a1e      	ldr	r2, [pc, #120]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81036c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81036c2:	683b      	ldr	r3, [r7, #0]
 81036c4:	2b00      	cmp	r3, #0
 81036c6:	d106      	bne.n	81036d6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81036c8:	4b1a      	ldr	r3, [pc, #104]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036cc:	4a19      	ldr	r2, [pc, #100]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81036d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81036d4:	e00f      	b.n	81036f6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81036d6:	683b      	ldr	r3, [r7, #0]
 81036d8:	2b01      	cmp	r3, #1
 81036da:	d106      	bne.n	81036ea <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81036dc:	4b15      	ldr	r3, [pc, #84]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036e0:	4a14      	ldr	r2, [pc, #80]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81036e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81036e8:	e005      	b.n	81036f6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81036ea:	4b12      	ldr	r3, [pc, #72]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036ee:	4a11      	ldr	r2, [pc, #68]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81036f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81036f6:	4b0f      	ldr	r3, [pc, #60]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036f8:	681b      	ldr	r3, [r3, #0]
 81036fa:	4a0e      	ldr	r2, [pc, #56]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 81036fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8103700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103702:	f7fd fbfd 	bl	8100f00 <HAL_GetTick>
 8103706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103708:	e008      	b.n	810371c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810370a:	f7fd fbf9 	bl	8100f00 <HAL_GetTick>
 810370e:	4602      	mov	r2, r0
 8103710:	68bb      	ldr	r3, [r7, #8]
 8103712:	1ad3      	subs	r3, r2, r3
 8103714:	2b02      	cmp	r3, #2
 8103716:	d901      	bls.n	810371c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103718:	2303      	movs	r3, #3
 810371a:	e006      	b.n	810372a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810371c:	4b05      	ldr	r3, [pc, #20]	@ (8103734 <RCCEx_PLL3_Config+0x160>)
 810371e:	681b      	ldr	r3, [r3, #0]
 8103720:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103724:	2b00      	cmp	r3, #0
 8103726:	d0f0      	beq.n	810370a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103728:	7bfb      	ldrb	r3, [r7, #15]
}
 810372a:	4618      	mov	r0, r3
 810372c:	3710      	adds	r7, #16
 810372e:	46bd      	mov	sp, r7
 8103730:	bd80      	pop	{r7, pc}
 8103732:	bf00      	nop
 8103734:	58024400 	.word	0x58024400

08103738 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8103738:	b580      	push	{r7, lr}
 810373a:	b084      	sub	sp, #16
 810373c:	af00      	add	r7, sp, #0
 810373e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	2b00      	cmp	r3, #0
 8103744:	d101      	bne.n	810374a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8103746:	2301      	movs	r3, #1
 8103748:	e10f      	b.n	810396a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810374a:	687b      	ldr	r3, [r7, #4]
 810374c:	2200      	movs	r2, #0
 810374e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8103750:	687b      	ldr	r3, [r7, #4]
 8103752:	681b      	ldr	r3, [r3, #0]
 8103754:	4a87      	ldr	r2, [pc, #540]	@ (8103974 <HAL_SPI_Init+0x23c>)
 8103756:	4293      	cmp	r3, r2
 8103758:	d00f      	beq.n	810377a <HAL_SPI_Init+0x42>
 810375a:	687b      	ldr	r3, [r7, #4]
 810375c:	681b      	ldr	r3, [r3, #0]
 810375e:	4a86      	ldr	r2, [pc, #536]	@ (8103978 <HAL_SPI_Init+0x240>)
 8103760:	4293      	cmp	r3, r2
 8103762:	d00a      	beq.n	810377a <HAL_SPI_Init+0x42>
 8103764:	687b      	ldr	r3, [r7, #4]
 8103766:	681b      	ldr	r3, [r3, #0]
 8103768:	4a84      	ldr	r2, [pc, #528]	@ (810397c <HAL_SPI_Init+0x244>)
 810376a:	4293      	cmp	r3, r2
 810376c:	d005      	beq.n	810377a <HAL_SPI_Init+0x42>
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	68db      	ldr	r3, [r3, #12]
 8103772:	2b0f      	cmp	r3, #15
 8103774:	d901      	bls.n	810377a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8103776:	2301      	movs	r3, #1
 8103778:	e0f7      	b.n	810396a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810377a:	6878      	ldr	r0, [r7, #4]
 810377c:	f000 f900 	bl	8103980 <SPI_GetPacketSize>
 8103780:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	681b      	ldr	r3, [r3, #0]
 8103786:	4a7b      	ldr	r2, [pc, #492]	@ (8103974 <HAL_SPI_Init+0x23c>)
 8103788:	4293      	cmp	r3, r2
 810378a:	d00c      	beq.n	81037a6 <HAL_SPI_Init+0x6e>
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	681b      	ldr	r3, [r3, #0]
 8103790:	4a79      	ldr	r2, [pc, #484]	@ (8103978 <HAL_SPI_Init+0x240>)
 8103792:	4293      	cmp	r3, r2
 8103794:	d007      	beq.n	81037a6 <HAL_SPI_Init+0x6e>
 8103796:	687b      	ldr	r3, [r7, #4]
 8103798:	681b      	ldr	r3, [r3, #0]
 810379a:	4a78      	ldr	r2, [pc, #480]	@ (810397c <HAL_SPI_Init+0x244>)
 810379c:	4293      	cmp	r3, r2
 810379e:	d002      	beq.n	81037a6 <HAL_SPI_Init+0x6e>
 81037a0:	68fb      	ldr	r3, [r7, #12]
 81037a2:	2b08      	cmp	r3, #8
 81037a4:	d811      	bhi.n	81037ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81037aa:	4a72      	ldr	r2, [pc, #456]	@ (8103974 <HAL_SPI_Init+0x23c>)
 81037ac:	4293      	cmp	r3, r2
 81037ae:	d009      	beq.n	81037c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	4a70      	ldr	r2, [pc, #448]	@ (8103978 <HAL_SPI_Init+0x240>)
 81037b6:	4293      	cmp	r3, r2
 81037b8:	d004      	beq.n	81037c4 <HAL_SPI_Init+0x8c>
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	4a6f      	ldr	r2, [pc, #444]	@ (810397c <HAL_SPI_Init+0x244>)
 81037c0:	4293      	cmp	r3, r2
 81037c2:	d104      	bne.n	81037ce <HAL_SPI_Init+0x96>
 81037c4:	68fb      	ldr	r3, [r7, #12]
 81037c6:	2b10      	cmp	r3, #16
 81037c8:	d901      	bls.n	81037ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81037ca:	2301      	movs	r3, #1
 81037cc:	e0cd      	b.n	810396a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81037d4:	b2db      	uxtb	r3, r3
 81037d6:	2b00      	cmp	r3, #0
 81037d8:	d106      	bne.n	81037e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	2200      	movs	r2, #0
 81037de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81037e2:	6878      	ldr	r0, [r7, #4]
 81037e4:	f7fd f812 	bl	810080c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81037e8:	687b      	ldr	r3, [r7, #4]
 81037ea:	2202      	movs	r2, #2
 81037ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	681a      	ldr	r2, [r3, #0]
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	681b      	ldr	r3, [r3, #0]
 81037fa:	f022 0201 	bic.w	r2, r2, #1
 81037fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8103800:	687b      	ldr	r3, [r7, #4]
 8103802:	681b      	ldr	r3, [r3, #0]
 8103804:	689b      	ldr	r3, [r3, #8]
 8103806:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 810380a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	699b      	ldr	r3, [r3, #24]
 8103810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103814:	d119      	bne.n	810384a <HAL_SPI_Init+0x112>
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	685b      	ldr	r3, [r3, #4]
 810381a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810381e:	d103      	bne.n	8103828 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8103824:	2b00      	cmp	r3, #0
 8103826:	d008      	beq.n	810383a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810382c:	2b00      	cmp	r3, #0
 810382e:	d10c      	bne.n	810384a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8103834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103838:	d107      	bne.n	810384a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	681a      	ldr	r2, [r3, #0]
 8103840:	687b      	ldr	r3, [r7, #4]
 8103842:	681b      	ldr	r3, [r3, #0]
 8103844:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8103848:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810384a:	687b      	ldr	r3, [r7, #4]
 810384c:	685b      	ldr	r3, [r3, #4]
 810384e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8103852:	2b00      	cmp	r3, #0
 8103854:	d00f      	beq.n	8103876 <HAL_SPI_Init+0x13e>
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	68db      	ldr	r3, [r3, #12]
 810385a:	2b06      	cmp	r3, #6
 810385c:	d90b      	bls.n	8103876 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 810385e:	687b      	ldr	r3, [r7, #4]
 8103860:	681b      	ldr	r3, [r3, #0]
 8103862:	681b      	ldr	r3, [r3, #0]
 8103864:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	430a      	orrs	r2, r1
 8103872:	601a      	str	r2, [r3, #0]
 8103874:	e007      	b.n	8103886 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	681a      	ldr	r2, [r3, #0]
 810387c:	687b      	ldr	r3, [r7, #4]
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103884:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	69da      	ldr	r2, [r3, #28]
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810388e:	431a      	orrs	r2, r3
 8103890:	68bb      	ldr	r3, [r7, #8]
 8103892:	431a      	orrs	r2, r3
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103898:	ea42 0103 	orr.w	r1, r2, r3
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	68da      	ldr	r2, [r3, #12]
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	430a      	orrs	r2, r1
 81038a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81038b0:	431a      	orrs	r2, r3
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81038b6:	431a      	orrs	r2, r3
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	699b      	ldr	r3, [r3, #24]
 81038bc:	431a      	orrs	r2, r3
 81038be:	687b      	ldr	r3, [r7, #4]
 81038c0:	691b      	ldr	r3, [r3, #16]
 81038c2:	431a      	orrs	r2, r3
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	695b      	ldr	r3, [r3, #20]
 81038c8:	431a      	orrs	r2, r3
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	6a1b      	ldr	r3, [r3, #32]
 81038ce:	431a      	orrs	r2, r3
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	685b      	ldr	r3, [r3, #4]
 81038d4:	431a      	orrs	r2, r3
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81038da:	431a      	orrs	r2, r3
 81038dc:	687b      	ldr	r3, [r7, #4]
 81038de:	689b      	ldr	r3, [r3, #8]
 81038e0:	431a      	orrs	r2, r3
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81038e6:	ea42 0103 	orr.w	r1, r2, r3
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	681b      	ldr	r3, [r3, #0]
 81038f2:	430a      	orrs	r2, r1
 81038f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81038f6:	687b      	ldr	r3, [r7, #4]
 81038f8:	685b      	ldr	r3, [r3, #4]
 81038fa:	2b00      	cmp	r3, #0
 81038fc:	d113      	bne.n	8103926 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81038fe:	687b      	ldr	r3, [r7, #4]
 8103900:	681b      	ldr	r3, [r3, #0]
 8103902:	689b      	ldr	r3, [r3, #8]
 8103904:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8103908:	687b      	ldr	r3, [r7, #4]
 810390a:	681b      	ldr	r3, [r3, #0]
 810390c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8103910:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8103912:	687b      	ldr	r3, [r7, #4]
 8103914:	681b      	ldr	r3, [r3, #0]
 8103916:	689b      	ldr	r3, [r3, #8]
 8103918:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	681b      	ldr	r3, [r3, #0]
 8103920:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8103924:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	681b      	ldr	r3, [r3, #0]
 810392a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	681b      	ldr	r3, [r3, #0]
 8103930:	f022 0201 	bic.w	r2, r2, #1
 8103934:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	685b      	ldr	r3, [r3, #4]
 810393a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810393e:	2b00      	cmp	r3, #0
 8103940:	d00a      	beq.n	8103958 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	681b      	ldr	r3, [r3, #0]
 8103946:	68db      	ldr	r3, [r3, #12]
 8103948:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	681b      	ldr	r3, [r3, #0]
 8103954:	430a      	orrs	r2, r1
 8103956:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	2200      	movs	r2, #0
 810395c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	2201      	movs	r2, #1
 8103964:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8103968:	2300      	movs	r3, #0
}
 810396a:	4618      	mov	r0, r3
 810396c:	3710      	adds	r7, #16
 810396e:	46bd      	mov	sp, r7
 8103970:	bd80      	pop	{r7, pc}
 8103972:	bf00      	nop
 8103974:	40013000 	.word	0x40013000
 8103978:	40003800 	.word	0x40003800
 810397c:	40003c00 	.word	0x40003c00

08103980 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8103980:	b480      	push	{r7}
 8103982:	b085      	sub	sp, #20
 8103984:	af00      	add	r7, sp, #0
 8103986:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810398c:	095b      	lsrs	r3, r3, #5
 810398e:	3301      	adds	r3, #1
 8103990:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8103992:	687b      	ldr	r3, [r7, #4]
 8103994:	68db      	ldr	r3, [r3, #12]
 8103996:	3301      	adds	r3, #1
 8103998:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810399a:	68bb      	ldr	r3, [r7, #8]
 810399c:	3307      	adds	r3, #7
 810399e:	08db      	lsrs	r3, r3, #3
 81039a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81039a2:	68bb      	ldr	r3, [r7, #8]
 81039a4:	68fa      	ldr	r2, [r7, #12]
 81039a6:	fb02 f303 	mul.w	r3, r2, r3
}
 81039aa:	4618      	mov	r0, r3
 81039ac:	3714      	adds	r7, #20
 81039ae:	46bd      	mov	sp, r7
 81039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039b4:	4770      	bx	lr

081039b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81039b6:	b580      	push	{r7, lr}
 81039b8:	b082      	sub	sp, #8
 81039ba:	af00      	add	r7, sp, #0
 81039bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	2b00      	cmp	r3, #0
 81039c2:	d101      	bne.n	81039c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81039c4:	2301      	movs	r3, #1
 81039c6:	e042      	b.n	8103a4e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81039ce:	2b00      	cmp	r3, #0
 81039d0:	d106      	bne.n	81039e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	2200      	movs	r2, #0
 81039d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81039da:	6878      	ldr	r0, [r7, #4]
 81039dc:	f000 f83b 	bl	8103a56 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	2224      	movs	r2, #36	@ 0x24
 81039e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	681a      	ldr	r2, [r3, #0]
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	681b      	ldr	r3, [r3, #0]
 81039f2:	f022 0201 	bic.w	r2, r2, #1
 81039f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81039f8:	687b      	ldr	r3, [r7, #4]
 81039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81039fc:	2b00      	cmp	r3, #0
 81039fe:	d002      	beq.n	8103a06 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8103a00:	6878      	ldr	r0, [r7, #4]
 8103a02:	f000 fd9b 	bl	810453c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8103a06:	6878      	ldr	r0, [r7, #4]
 8103a08:	f000 f830 	bl	8103a6c <UART_SetConfig>
 8103a0c:	4603      	mov	r3, r0
 8103a0e:	2b01      	cmp	r3, #1
 8103a10:	d101      	bne.n	8103a16 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8103a12:	2301      	movs	r3, #1
 8103a14:	e01b      	b.n	8103a4e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	685a      	ldr	r2, [r3, #4]
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8103a24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	681b      	ldr	r3, [r3, #0]
 8103a2a:	689a      	ldr	r2, [r3, #8]
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8103a34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	681b      	ldr	r3, [r3, #0]
 8103a3a:	681a      	ldr	r2, [r3, #0]
 8103a3c:	687b      	ldr	r3, [r7, #4]
 8103a3e:	681b      	ldr	r3, [r3, #0]
 8103a40:	f042 0201 	orr.w	r2, r2, #1
 8103a44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8103a46:	6878      	ldr	r0, [r7, #4]
 8103a48:	f000 fe1a 	bl	8104680 <UART_CheckIdleState>
 8103a4c:	4603      	mov	r3, r0
}
 8103a4e:	4618      	mov	r0, r3
 8103a50:	3708      	adds	r7, #8
 8103a52:	46bd      	mov	sp, r7
 8103a54:	bd80      	pop	{r7, pc}

08103a56 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8103a56:	b480      	push	{r7}
 8103a58:	b083      	sub	sp, #12
 8103a5a:	af00      	add	r7, sp, #0
 8103a5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8103a5e:	bf00      	nop
 8103a60:	370c      	adds	r7, #12
 8103a62:	46bd      	mov	sp, r7
 8103a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a68:	4770      	bx	lr
	...

08103a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8103a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103a70:	b092      	sub	sp, #72	@ 0x48
 8103a72:	af00      	add	r7, sp, #0
 8103a74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8103a76:	2300      	movs	r3, #0
 8103a78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8103a7c:	697b      	ldr	r3, [r7, #20]
 8103a7e:	689a      	ldr	r2, [r3, #8]
 8103a80:	697b      	ldr	r3, [r7, #20]
 8103a82:	691b      	ldr	r3, [r3, #16]
 8103a84:	431a      	orrs	r2, r3
 8103a86:	697b      	ldr	r3, [r7, #20]
 8103a88:	695b      	ldr	r3, [r3, #20]
 8103a8a:	431a      	orrs	r2, r3
 8103a8c:	697b      	ldr	r3, [r7, #20]
 8103a8e:	69db      	ldr	r3, [r3, #28]
 8103a90:	4313      	orrs	r3, r2
 8103a92:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8103a94:	697b      	ldr	r3, [r7, #20]
 8103a96:	681b      	ldr	r3, [r3, #0]
 8103a98:	681a      	ldr	r2, [r3, #0]
 8103a9a:	4bbd      	ldr	r3, [pc, #756]	@ (8103d90 <UART_SetConfig+0x324>)
 8103a9c:	4013      	ands	r3, r2
 8103a9e:	697a      	ldr	r2, [r7, #20]
 8103aa0:	6812      	ldr	r2, [r2, #0]
 8103aa2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8103aa4:	430b      	orrs	r3, r1
 8103aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8103aa8:	697b      	ldr	r3, [r7, #20]
 8103aaa:	681b      	ldr	r3, [r3, #0]
 8103aac:	685b      	ldr	r3, [r3, #4]
 8103aae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103ab2:	697b      	ldr	r3, [r7, #20]
 8103ab4:	68da      	ldr	r2, [r3, #12]
 8103ab6:	697b      	ldr	r3, [r7, #20]
 8103ab8:	681b      	ldr	r3, [r3, #0]
 8103aba:	430a      	orrs	r2, r1
 8103abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8103abe:	697b      	ldr	r3, [r7, #20]
 8103ac0:	699b      	ldr	r3, [r3, #24]
 8103ac2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8103ac4:	697b      	ldr	r3, [r7, #20]
 8103ac6:	681b      	ldr	r3, [r3, #0]
 8103ac8:	4ab2      	ldr	r2, [pc, #712]	@ (8103d94 <UART_SetConfig+0x328>)
 8103aca:	4293      	cmp	r3, r2
 8103acc:	d004      	beq.n	8103ad8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8103ace:	697b      	ldr	r3, [r7, #20]
 8103ad0:	6a1b      	ldr	r3, [r3, #32]
 8103ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8103ad4:	4313      	orrs	r3, r2
 8103ad6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8103ad8:	697b      	ldr	r3, [r7, #20]
 8103ada:	681b      	ldr	r3, [r3, #0]
 8103adc:	689b      	ldr	r3, [r3, #8]
 8103ade:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8103ae2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8103ae6:	697a      	ldr	r2, [r7, #20]
 8103ae8:	6812      	ldr	r2, [r2, #0]
 8103aea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8103aec:	430b      	orrs	r3, r1
 8103aee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8103af0:	697b      	ldr	r3, [r7, #20]
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103af6:	f023 010f 	bic.w	r1, r3, #15
 8103afa:	697b      	ldr	r3, [r7, #20]
 8103afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8103afe:	697b      	ldr	r3, [r7, #20]
 8103b00:	681b      	ldr	r3, [r3, #0]
 8103b02:	430a      	orrs	r2, r1
 8103b04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8103b06:	697b      	ldr	r3, [r7, #20]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	4aa3      	ldr	r2, [pc, #652]	@ (8103d98 <UART_SetConfig+0x32c>)
 8103b0c:	4293      	cmp	r3, r2
 8103b0e:	d177      	bne.n	8103c00 <UART_SetConfig+0x194>
 8103b10:	4ba2      	ldr	r3, [pc, #648]	@ (8103d9c <UART_SetConfig+0x330>)
 8103b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103b18:	2b28      	cmp	r3, #40	@ 0x28
 8103b1a:	d86d      	bhi.n	8103bf8 <UART_SetConfig+0x18c>
 8103b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8103b24 <UART_SetConfig+0xb8>)
 8103b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b22:	bf00      	nop
 8103b24:	08103bc9 	.word	0x08103bc9
 8103b28:	08103bf9 	.word	0x08103bf9
 8103b2c:	08103bf9 	.word	0x08103bf9
 8103b30:	08103bf9 	.word	0x08103bf9
 8103b34:	08103bf9 	.word	0x08103bf9
 8103b38:	08103bf9 	.word	0x08103bf9
 8103b3c:	08103bf9 	.word	0x08103bf9
 8103b40:	08103bf9 	.word	0x08103bf9
 8103b44:	08103bd1 	.word	0x08103bd1
 8103b48:	08103bf9 	.word	0x08103bf9
 8103b4c:	08103bf9 	.word	0x08103bf9
 8103b50:	08103bf9 	.word	0x08103bf9
 8103b54:	08103bf9 	.word	0x08103bf9
 8103b58:	08103bf9 	.word	0x08103bf9
 8103b5c:	08103bf9 	.word	0x08103bf9
 8103b60:	08103bf9 	.word	0x08103bf9
 8103b64:	08103bd9 	.word	0x08103bd9
 8103b68:	08103bf9 	.word	0x08103bf9
 8103b6c:	08103bf9 	.word	0x08103bf9
 8103b70:	08103bf9 	.word	0x08103bf9
 8103b74:	08103bf9 	.word	0x08103bf9
 8103b78:	08103bf9 	.word	0x08103bf9
 8103b7c:	08103bf9 	.word	0x08103bf9
 8103b80:	08103bf9 	.word	0x08103bf9
 8103b84:	08103be1 	.word	0x08103be1
 8103b88:	08103bf9 	.word	0x08103bf9
 8103b8c:	08103bf9 	.word	0x08103bf9
 8103b90:	08103bf9 	.word	0x08103bf9
 8103b94:	08103bf9 	.word	0x08103bf9
 8103b98:	08103bf9 	.word	0x08103bf9
 8103b9c:	08103bf9 	.word	0x08103bf9
 8103ba0:	08103bf9 	.word	0x08103bf9
 8103ba4:	08103be9 	.word	0x08103be9
 8103ba8:	08103bf9 	.word	0x08103bf9
 8103bac:	08103bf9 	.word	0x08103bf9
 8103bb0:	08103bf9 	.word	0x08103bf9
 8103bb4:	08103bf9 	.word	0x08103bf9
 8103bb8:	08103bf9 	.word	0x08103bf9
 8103bbc:	08103bf9 	.word	0x08103bf9
 8103bc0:	08103bf9 	.word	0x08103bf9
 8103bc4:	08103bf1 	.word	0x08103bf1
 8103bc8:	2301      	movs	r3, #1
 8103bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bce:	e220      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103bd0:	2304      	movs	r3, #4
 8103bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bd6:	e21c      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103bd8:	2308      	movs	r3, #8
 8103bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bde:	e218      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103be0:	2310      	movs	r3, #16
 8103be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103be6:	e214      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103be8:	2320      	movs	r3, #32
 8103bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bee:	e210      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103bf0:	2340      	movs	r3, #64	@ 0x40
 8103bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bf6:	e20c      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103bf8:	2380      	movs	r3, #128	@ 0x80
 8103bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bfe:	e208      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103c00:	697b      	ldr	r3, [r7, #20]
 8103c02:	681b      	ldr	r3, [r3, #0]
 8103c04:	4a66      	ldr	r2, [pc, #408]	@ (8103da0 <UART_SetConfig+0x334>)
 8103c06:	4293      	cmp	r3, r2
 8103c08:	d130      	bne.n	8103c6c <UART_SetConfig+0x200>
 8103c0a:	4b64      	ldr	r3, [pc, #400]	@ (8103d9c <UART_SetConfig+0x330>)
 8103c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c0e:	f003 0307 	and.w	r3, r3, #7
 8103c12:	2b05      	cmp	r3, #5
 8103c14:	d826      	bhi.n	8103c64 <UART_SetConfig+0x1f8>
 8103c16:	a201      	add	r2, pc, #4	@ (adr r2, 8103c1c <UART_SetConfig+0x1b0>)
 8103c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c1c:	08103c35 	.word	0x08103c35
 8103c20:	08103c3d 	.word	0x08103c3d
 8103c24:	08103c45 	.word	0x08103c45
 8103c28:	08103c4d 	.word	0x08103c4d
 8103c2c:	08103c55 	.word	0x08103c55
 8103c30:	08103c5d 	.word	0x08103c5d
 8103c34:	2300      	movs	r3, #0
 8103c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c3a:	e1ea      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103c3c:	2304      	movs	r3, #4
 8103c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c42:	e1e6      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103c44:	2308      	movs	r3, #8
 8103c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c4a:	e1e2      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103c4c:	2310      	movs	r3, #16
 8103c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c52:	e1de      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103c54:	2320      	movs	r3, #32
 8103c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c5a:	e1da      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103c5c:	2340      	movs	r3, #64	@ 0x40
 8103c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c62:	e1d6      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103c64:	2380      	movs	r3, #128	@ 0x80
 8103c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c6a:	e1d2      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103c6c:	697b      	ldr	r3, [r7, #20]
 8103c6e:	681b      	ldr	r3, [r3, #0]
 8103c70:	4a4c      	ldr	r2, [pc, #304]	@ (8103da4 <UART_SetConfig+0x338>)
 8103c72:	4293      	cmp	r3, r2
 8103c74:	d130      	bne.n	8103cd8 <UART_SetConfig+0x26c>
 8103c76:	4b49      	ldr	r3, [pc, #292]	@ (8103d9c <UART_SetConfig+0x330>)
 8103c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c7a:	f003 0307 	and.w	r3, r3, #7
 8103c7e:	2b05      	cmp	r3, #5
 8103c80:	d826      	bhi.n	8103cd0 <UART_SetConfig+0x264>
 8103c82:	a201      	add	r2, pc, #4	@ (adr r2, 8103c88 <UART_SetConfig+0x21c>)
 8103c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c88:	08103ca1 	.word	0x08103ca1
 8103c8c:	08103ca9 	.word	0x08103ca9
 8103c90:	08103cb1 	.word	0x08103cb1
 8103c94:	08103cb9 	.word	0x08103cb9
 8103c98:	08103cc1 	.word	0x08103cc1
 8103c9c:	08103cc9 	.word	0x08103cc9
 8103ca0:	2300      	movs	r3, #0
 8103ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103ca6:	e1b4      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103ca8:	2304      	movs	r3, #4
 8103caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cae:	e1b0      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103cb0:	2308      	movs	r3, #8
 8103cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cb6:	e1ac      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103cb8:	2310      	movs	r3, #16
 8103cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cbe:	e1a8      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103cc0:	2320      	movs	r3, #32
 8103cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cc6:	e1a4      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103cc8:	2340      	movs	r3, #64	@ 0x40
 8103cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cce:	e1a0      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103cd0:	2380      	movs	r3, #128	@ 0x80
 8103cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cd6:	e19c      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103cd8:	697b      	ldr	r3, [r7, #20]
 8103cda:	681b      	ldr	r3, [r3, #0]
 8103cdc:	4a32      	ldr	r2, [pc, #200]	@ (8103da8 <UART_SetConfig+0x33c>)
 8103cde:	4293      	cmp	r3, r2
 8103ce0:	d130      	bne.n	8103d44 <UART_SetConfig+0x2d8>
 8103ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8103d9c <UART_SetConfig+0x330>)
 8103ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ce6:	f003 0307 	and.w	r3, r3, #7
 8103cea:	2b05      	cmp	r3, #5
 8103cec:	d826      	bhi.n	8103d3c <UART_SetConfig+0x2d0>
 8103cee:	a201      	add	r2, pc, #4	@ (adr r2, 8103cf4 <UART_SetConfig+0x288>)
 8103cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103cf4:	08103d0d 	.word	0x08103d0d
 8103cf8:	08103d15 	.word	0x08103d15
 8103cfc:	08103d1d 	.word	0x08103d1d
 8103d00:	08103d25 	.word	0x08103d25
 8103d04:	08103d2d 	.word	0x08103d2d
 8103d08:	08103d35 	.word	0x08103d35
 8103d0c:	2300      	movs	r3, #0
 8103d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d12:	e17e      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103d14:	2304      	movs	r3, #4
 8103d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d1a:	e17a      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103d1c:	2308      	movs	r3, #8
 8103d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d22:	e176      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103d24:	2310      	movs	r3, #16
 8103d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d2a:	e172      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103d2c:	2320      	movs	r3, #32
 8103d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d32:	e16e      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103d34:	2340      	movs	r3, #64	@ 0x40
 8103d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d3a:	e16a      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103d3c:	2380      	movs	r3, #128	@ 0x80
 8103d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d42:	e166      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103d44:	697b      	ldr	r3, [r7, #20]
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	4a18      	ldr	r2, [pc, #96]	@ (8103dac <UART_SetConfig+0x340>)
 8103d4a:	4293      	cmp	r3, r2
 8103d4c:	d140      	bne.n	8103dd0 <UART_SetConfig+0x364>
 8103d4e:	4b13      	ldr	r3, [pc, #76]	@ (8103d9c <UART_SetConfig+0x330>)
 8103d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103d52:	f003 0307 	and.w	r3, r3, #7
 8103d56:	2b05      	cmp	r3, #5
 8103d58:	d836      	bhi.n	8103dc8 <UART_SetConfig+0x35c>
 8103d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8103d60 <UART_SetConfig+0x2f4>)
 8103d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d60:	08103d79 	.word	0x08103d79
 8103d64:	08103d81 	.word	0x08103d81
 8103d68:	08103d89 	.word	0x08103d89
 8103d6c:	08103db1 	.word	0x08103db1
 8103d70:	08103db9 	.word	0x08103db9
 8103d74:	08103dc1 	.word	0x08103dc1
 8103d78:	2300      	movs	r3, #0
 8103d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d7e:	e148      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103d80:	2304      	movs	r3, #4
 8103d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d86:	e144      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103d88:	2308      	movs	r3, #8
 8103d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d8e:	e140      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103d90:	cfff69f3 	.word	0xcfff69f3
 8103d94:	58000c00 	.word	0x58000c00
 8103d98:	40011000 	.word	0x40011000
 8103d9c:	58024400 	.word	0x58024400
 8103da0:	40004400 	.word	0x40004400
 8103da4:	40004800 	.word	0x40004800
 8103da8:	40004c00 	.word	0x40004c00
 8103dac:	40005000 	.word	0x40005000
 8103db0:	2310      	movs	r3, #16
 8103db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103db6:	e12c      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103db8:	2320      	movs	r3, #32
 8103dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103dbe:	e128      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103dc0:	2340      	movs	r3, #64	@ 0x40
 8103dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103dc6:	e124      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103dc8:	2380      	movs	r3, #128	@ 0x80
 8103dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103dce:	e120      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103dd0:	697b      	ldr	r3, [r7, #20]
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	4acb      	ldr	r2, [pc, #812]	@ (8104104 <UART_SetConfig+0x698>)
 8103dd6:	4293      	cmp	r3, r2
 8103dd8:	d176      	bne.n	8103ec8 <UART_SetConfig+0x45c>
 8103dda:	4bcb      	ldr	r3, [pc, #812]	@ (8104108 <UART_SetConfig+0x69c>)
 8103ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103dde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103de2:	2b28      	cmp	r3, #40	@ 0x28
 8103de4:	d86c      	bhi.n	8103ec0 <UART_SetConfig+0x454>
 8103de6:	a201      	add	r2, pc, #4	@ (adr r2, 8103dec <UART_SetConfig+0x380>)
 8103de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103dec:	08103e91 	.word	0x08103e91
 8103df0:	08103ec1 	.word	0x08103ec1
 8103df4:	08103ec1 	.word	0x08103ec1
 8103df8:	08103ec1 	.word	0x08103ec1
 8103dfc:	08103ec1 	.word	0x08103ec1
 8103e00:	08103ec1 	.word	0x08103ec1
 8103e04:	08103ec1 	.word	0x08103ec1
 8103e08:	08103ec1 	.word	0x08103ec1
 8103e0c:	08103e99 	.word	0x08103e99
 8103e10:	08103ec1 	.word	0x08103ec1
 8103e14:	08103ec1 	.word	0x08103ec1
 8103e18:	08103ec1 	.word	0x08103ec1
 8103e1c:	08103ec1 	.word	0x08103ec1
 8103e20:	08103ec1 	.word	0x08103ec1
 8103e24:	08103ec1 	.word	0x08103ec1
 8103e28:	08103ec1 	.word	0x08103ec1
 8103e2c:	08103ea1 	.word	0x08103ea1
 8103e30:	08103ec1 	.word	0x08103ec1
 8103e34:	08103ec1 	.word	0x08103ec1
 8103e38:	08103ec1 	.word	0x08103ec1
 8103e3c:	08103ec1 	.word	0x08103ec1
 8103e40:	08103ec1 	.word	0x08103ec1
 8103e44:	08103ec1 	.word	0x08103ec1
 8103e48:	08103ec1 	.word	0x08103ec1
 8103e4c:	08103ea9 	.word	0x08103ea9
 8103e50:	08103ec1 	.word	0x08103ec1
 8103e54:	08103ec1 	.word	0x08103ec1
 8103e58:	08103ec1 	.word	0x08103ec1
 8103e5c:	08103ec1 	.word	0x08103ec1
 8103e60:	08103ec1 	.word	0x08103ec1
 8103e64:	08103ec1 	.word	0x08103ec1
 8103e68:	08103ec1 	.word	0x08103ec1
 8103e6c:	08103eb1 	.word	0x08103eb1
 8103e70:	08103ec1 	.word	0x08103ec1
 8103e74:	08103ec1 	.word	0x08103ec1
 8103e78:	08103ec1 	.word	0x08103ec1
 8103e7c:	08103ec1 	.word	0x08103ec1
 8103e80:	08103ec1 	.word	0x08103ec1
 8103e84:	08103ec1 	.word	0x08103ec1
 8103e88:	08103ec1 	.word	0x08103ec1
 8103e8c:	08103eb9 	.word	0x08103eb9
 8103e90:	2301      	movs	r3, #1
 8103e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103e96:	e0bc      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103e98:	2304      	movs	r3, #4
 8103e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103e9e:	e0b8      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103ea0:	2308      	movs	r3, #8
 8103ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103ea6:	e0b4      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103ea8:	2310      	movs	r3, #16
 8103eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103eae:	e0b0      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103eb0:	2320      	movs	r3, #32
 8103eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103eb6:	e0ac      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103eb8:	2340      	movs	r3, #64	@ 0x40
 8103eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103ebe:	e0a8      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103ec0:	2380      	movs	r3, #128	@ 0x80
 8103ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103ec6:	e0a4      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103ec8:	697b      	ldr	r3, [r7, #20]
 8103eca:	681b      	ldr	r3, [r3, #0]
 8103ecc:	4a8f      	ldr	r2, [pc, #572]	@ (810410c <UART_SetConfig+0x6a0>)
 8103ece:	4293      	cmp	r3, r2
 8103ed0:	d130      	bne.n	8103f34 <UART_SetConfig+0x4c8>
 8103ed2:	4b8d      	ldr	r3, [pc, #564]	@ (8104108 <UART_SetConfig+0x69c>)
 8103ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ed6:	f003 0307 	and.w	r3, r3, #7
 8103eda:	2b05      	cmp	r3, #5
 8103edc:	d826      	bhi.n	8103f2c <UART_SetConfig+0x4c0>
 8103ede:	a201      	add	r2, pc, #4	@ (adr r2, 8103ee4 <UART_SetConfig+0x478>)
 8103ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ee4:	08103efd 	.word	0x08103efd
 8103ee8:	08103f05 	.word	0x08103f05
 8103eec:	08103f0d 	.word	0x08103f0d
 8103ef0:	08103f15 	.word	0x08103f15
 8103ef4:	08103f1d 	.word	0x08103f1d
 8103ef8:	08103f25 	.word	0x08103f25
 8103efc:	2300      	movs	r3, #0
 8103efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f02:	e086      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f04:	2304      	movs	r3, #4
 8103f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f0a:	e082      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f0c:	2308      	movs	r3, #8
 8103f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f12:	e07e      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f14:	2310      	movs	r3, #16
 8103f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f1a:	e07a      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f1c:	2320      	movs	r3, #32
 8103f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f22:	e076      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f24:	2340      	movs	r3, #64	@ 0x40
 8103f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f2a:	e072      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f2c:	2380      	movs	r3, #128	@ 0x80
 8103f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f32:	e06e      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f34:	697b      	ldr	r3, [r7, #20]
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	4a75      	ldr	r2, [pc, #468]	@ (8104110 <UART_SetConfig+0x6a4>)
 8103f3a:	4293      	cmp	r3, r2
 8103f3c:	d130      	bne.n	8103fa0 <UART_SetConfig+0x534>
 8103f3e:	4b72      	ldr	r3, [pc, #456]	@ (8104108 <UART_SetConfig+0x69c>)
 8103f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103f42:	f003 0307 	and.w	r3, r3, #7
 8103f46:	2b05      	cmp	r3, #5
 8103f48:	d826      	bhi.n	8103f98 <UART_SetConfig+0x52c>
 8103f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8103f50 <UART_SetConfig+0x4e4>)
 8103f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f50:	08103f69 	.word	0x08103f69
 8103f54:	08103f71 	.word	0x08103f71
 8103f58:	08103f79 	.word	0x08103f79
 8103f5c:	08103f81 	.word	0x08103f81
 8103f60:	08103f89 	.word	0x08103f89
 8103f64:	08103f91 	.word	0x08103f91
 8103f68:	2300      	movs	r3, #0
 8103f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f6e:	e050      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f70:	2304      	movs	r3, #4
 8103f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f76:	e04c      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f78:	2308      	movs	r3, #8
 8103f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f7e:	e048      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f80:	2310      	movs	r3, #16
 8103f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f86:	e044      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f88:	2320      	movs	r3, #32
 8103f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f8e:	e040      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f90:	2340      	movs	r3, #64	@ 0x40
 8103f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f96:	e03c      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103f98:	2380      	movs	r3, #128	@ 0x80
 8103f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103f9e:	e038      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103fa0:	697b      	ldr	r3, [r7, #20]
 8103fa2:	681b      	ldr	r3, [r3, #0]
 8103fa4:	4a5b      	ldr	r2, [pc, #364]	@ (8104114 <UART_SetConfig+0x6a8>)
 8103fa6:	4293      	cmp	r3, r2
 8103fa8:	d130      	bne.n	810400c <UART_SetConfig+0x5a0>
 8103faa:	4b57      	ldr	r3, [pc, #348]	@ (8104108 <UART_SetConfig+0x69c>)
 8103fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103fae:	f003 0307 	and.w	r3, r3, #7
 8103fb2:	2b05      	cmp	r3, #5
 8103fb4:	d826      	bhi.n	8104004 <UART_SetConfig+0x598>
 8103fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8103fbc <UART_SetConfig+0x550>)
 8103fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103fbc:	08103fd5 	.word	0x08103fd5
 8103fc0:	08103fdd 	.word	0x08103fdd
 8103fc4:	08103fe5 	.word	0x08103fe5
 8103fc8:	08103fed 	.word	0x08103fed
 8103fcc:	08103ff5 	.word	0x08103ff5
 8103fd0:	08103ffd 	.word	0x08103ffd
 8103fd4:	2302      	movs	r3, #2
 8103fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103fda:	e01a      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103fdc:	2304      	movs	r3, #4
 8103fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103fe2:	e016      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103fe4:	2308      	movs	r3, #8
 8103fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103fea:	e012      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103fec:	2310      	movs	r3, #16
 8103fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103ff2:	e00e      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103ff4:	2320      	movs	r3, #32
 8103ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103ffa:	e00a      	b.n	8104012 <UART_SetConfig+0x5a6>
 8103ffc:	2340      	movs	r3, #64	@ 0x40
 8103ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104002:	e006      	b.n	8104012 <UART_SetConfig+0x5a6>
 8104004:	2380      	movs	r3, #128	@ 0x80
 8104006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810400a:	e002      	b.n	8104012 <UART_SetConfig+0x5a6>
 810400c:	2380      	movs	r3, #128	@ 0x80
 810400e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8104012:	697b      	ldr	r3, [r7, #20]
 8104014:	681b      	ldr	r3, [r3, #0]
 8104016:	4a3f      	ldr	r2, [pc, #252]	@ (8104114 <UART_SetConfig+0x6a8>)
 8104018:	4293      	cmp	r3, r2
 810401a:	f040 80f8 	bne.w	810420e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810401e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8104022:	2b20      	cmp	r3, #32
 8104024:	dc46      	bgt.n	81040b4 <UART_SetConfig+0x648>
 8104026:	2b02      	cmp	r3, #2
 8104028:	f2c0 8082 	blt.w	8104130 <UART_SetConfig+0x6c4>
 810402c:	3b02      	subs	r3, #2
 810402e:	2b1e      	cmp	r3, #30
 8104030:	d87e      	bhi.n	8104130 <UART_SetConfig+0x6c4>
 8104032:	a201      	add	r2, pc, #4	@ (adr r2, 8104038 <UART_SetConfig+0x5cc>)
 8104034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104038:	081040bb 	.word	0x081040bb
 810403c:	08104131 	.word	0x08104131
 8104040:	081040c3 	.word	0x081040c3
 8104044:	08104131 	.word	0x08104131
 8104048:	08104131 	.word	0x08104131
 810404c:	08104131 	.word	0x08104131
 8104050:	081040d3 	.word	0x081040d3
 8104054:	08104131 	.word	0x08104131
 8104058:	08104131 	.word	0x08104131
 810405c:	08104131 	.word	0x08104131
 8104060:	08104131 	.word	0x08104131
 8104064:	08104131 	.word	0x08104131
 8104068:	08104131 	.word	0x08104131
 810406c:	08104131 	.word	0x08104131
 8104070:	081040e3 	.word	0x081040e3
 8104074:	08104131 	.word	0x08104131
 8104078:	08104131 	.word	0x08104131
 810407c:	08104131 	.word	0x08104131
 8104080:	08104131 	.word	0x08104131
 8104084:	08104131 	.word	0x08104131
 8104088:	08104131 	.word	0x08104131
 810408c:	08104131 	.word	0x08104131
 8104090:	08104131 	.word	0x08104131
 8104094:	08104131 	.word	0x08104131
 8104098:	08104131 	.word	0x08104131
 810409c:	08104131 	.word	0x08104131
 81040a0:	08104131 	.word	0x08104131
 81040a4:	08104131 	.word	0x08104131
 81040a8:	08104131 	.word	0x08104131
 81040ac:	08104131 	.word	0x08104131
 81040b0:	08104123 	.word	0x08104123
 81040b4:	2b40      	cmp	r3, #64	@ 0x40
 81040b6:	d037      	beq.n	8104128 <UART_SetConfig+0x6bc>
 81040b8:	e03a      	b.n	8104130 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81040ba:	f7fe ff1b 	bl	8102ef4 <HAL_RCCEx_GetD3PCLK1Freq>
 81040be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81040c0:	e03c      	b.n	810413c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81040c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81040c6:	4618      	mov	r0, r3
 81040c8:	f7fe ff2a 	bl	8102f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81040cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81040ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81040d0:	e034      	b.n	810413c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81040d2:	f107 0318 	add.w	r3, r7, #24
 81040d6:	4618      	mov	r0, r3
 81040d8:	f7ff f876 	bl	81031c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81040dc:	69fb      	ldr	r3, [r7, #28]
 81040de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81040e0:	e02c      	b.n	810413c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81040e2:	4b09      	ldr	r3, [pc, #36]	@ (8104108 <UART_SetConfig+0x69c>)
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	f003 0320 	and.w	r3, r3, #32
 81040ea:	2b00      	cmp	r3, #0
 81040ec:	d016      	beq.n	810411c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81040ee:	4b06      	ldr	r3, [pc, #24]	@ (8104108 <UART_SetConfig+0x69c>)
 81040f0:	681b      	ldr	r3, [r3, #0]
 81040f2:	08db      	lsrs	r3, r3, #3
 81040f4:	f003 0303 	and.w	r3, r3, #3
 81040f8:	4a07      	ldr	r2, [pc, #28]	@ (8104118 <UART_SetConfig+0x6ac>)
 81040fa:	fa22 f303 	lsr.w	r3, r2, r3
 81040fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104100:	e01c      	b.n	810413c <UART_SetConfig+0x6d0>
 8104102:	bf00      	nop
 8104104:	40011400 	.word	0x40011400
 8104108:	58024400 	.word	0x58024400
 810410c:	40007800 	.word	0x40007800
 8104110:	40007c00 	.word	0x40007c00
 8104114:	58000c00 	.word	0x58000c00
 8104118:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810411c:	4b9d      	ldr	r3, [pc, #628]	@ (8104394 <UART_SetConfig+0x928>)
 810411e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104120:	e00c      	b.n	810413c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8104122:	4b9d      	ldr	r3, [pc, #628]	@ (8104398 <UART_SetConfig+0x92c>)
 8104124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104126:	e009      	b.n	810413c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8104128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810412c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810412e:	e005      	b.n	810413c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8104130:	2300      	movs	r3, #0
 8104132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8104134:	2301      	movs	r3, #1
 8104136:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810413a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810413c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810413e:	2b00      	cmp	r3, #0
 8104140:	f000 81de 	beq.w	8104500 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8104144:	697b      	ldr	r3, [r7, #20]
 8104146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104148:	4a94      	ldr	r2, [pc, #592]	@ (810439c <UART_SetConfig+0x930>)
 810414a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810414e:	461a      	mov	r2, r3
 8104150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104152:	fbb3 f3f2 	udiv	r3, r3, r2
 8104156:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8104158:	697b      	ldr	r3, [r7, #20]
 810415a:	685a      	ldr	r2, [r3, #4]
 810415c:	4613      	mov	r3, r2
 810415e:	005b      	lsls	r3, r3, #1
 8104160:	4413      	add	r3, r2
 8104162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8104164:	429a      	cmp	r2, r3
 8104166:	d305      	bcc.n	8104174 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8104168:	697b      	ldr	r3, [r7, #20]
 810416a:	685b      	ldr	r3, [r3, #4]
 810416c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810416e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8104170:	429a      	cmp	r2, r3
 8104172:	d903      	bls.n	810417c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8104174:	2301      	movs	r3, #1
 8104176:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810417a:	e1c1      	b.n	8104500 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810417c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810417e:	2200      	movs	r2, #0
 8104180:	60bb      	str	r3, [r7, #8]
 8104182:	60fa      	str	r2, [r7, #12]
 8104184:	697b      	ldr	r3, [r7, #20]
 8104186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104188:	4a84      	ldr	r2, [pc, #528]	@ (810439c <UART_SetConfig+0x930>)
 810418a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810418e:	b29b      	uxth	r3, r3
 8104190:	2200      	movs	r2, #0
 8104192:	603b      	str	r3, [r7, #0]
 8104194:	607a      	str	r2, [r7, #4]
 8104196:	e9d7 2300 	ldrd	r2, r3, [r7]
 810419a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810419e:	f7fc f89b 	bl	81002d8 <__aeabi_uldivmod>
 81041a2:	4602      	mov	r2, r0
 81041a4:	460b      	mov	r3, r1
 81041a6:	4610      	mov	r0, r2
 81041a8:	4619      	mov	r1, r3
 81041aa:	f04f 0200 	mov.w	r2, #0
 81041ae:	f04f 0300 	mov.w	r3, #0
 81041b2:	020b      	lsls	r3, r1, #8
 81041b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81041b8:	0202      	lsls	r2, r0, #8
 81041ba:	6979      	ldr	r1, [r7, #20]
 81041bc:	6849      	ldr	r1, [r1, #4]
 81041be:	0849      	lsrs	r1, r1, #1
 81041c0:	2000      	movs	r0, #0
 81041c2:	460c      	mov	r4, r1
 81041c4:	4605      	mov	r5, r0
 81041c6:	eb12 0804 	adds.w	r8, r2, r4
 81041ca:	eb43 0905 	adc.w	r9, r3, r5
 81041ce:	697b      	ldr	r3, [r7, #20]
 81041d0:	685b      	ldr	r3, [r3, #4]
 81041d2:	2200      	movs	r2, #0
 81041d4:	469a      	mov	sl, r3
 81041d6:	4693      	mov	fp, r2
 81041d8:	4652      	mov	r2, sl
 81041da:	465b      	mov	r3, fp
 81041dc:	4640      	mov	r0, r8
 81041de:	4649      	mov	r1, r9
 81041e0:	f7fc f87a 	bl	81002d8 <__aeabi_uldivmod>
 81041e4:	4602      	mov	r2, r0
 81041e6:	460b      	mov	r3, r1
 81041e8:	4613      	mov	r3, r2
 81041ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81041ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81041f2:	d308      	bcc.n	8104206 <UART_SetConfig+0x79a>
 81041f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81041f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81041fa:	d204      	bcs.n	8104206 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81041fc:	697b      	ldr	r3, [r7, #20]
 81041fe:	681b      	ldr	r3, [r3, #0]
 8104200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8104202:	60da      	str	r2, [r3, #12]
 8104204:	e17c      	b.n	8104500 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8104206:	2301      	movs	r3, #1
 8104208:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810420c:	e178      	b.n	8104500 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810420e:	697b      	ldr	r3, [r7, #20]
 8104210:	69db      	ldr	r3, [r3, #28]
 8104212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104216:	f040 80c5 	bne.w	81043a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810421a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810421e:	2b20      	cmp	r3, #32
 8104220:	dc48      	bgt.n	81042b4 <UART_SetConfig+0x848>
 8104222:	2b00      	cmp	r3, #0
 8104224:	db7b      	blt.n	810431e <UART_SetConfig+0x8b2>
 8104226:	2b20      	cmp	r3, #32
 8104228:	d879      	bhi.n	810431e <UART_SetConfig+0x8b2>
 810422a:	a201      	add	r2, pc, #4	@ (adr r2, 8104230 <UART_SetConfig+0x7c4>)
 810422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104230:	081042bb 	.word	0x081042bb
 8104234:	081042c3 	.word	0x081042c3
 8104238:	0810431f 	.word	0x0810431f
 810423c:	0810431f 	.word	0x0810431f
 8104240:	081042cb 	.word	0x081042cb
 8104244:	0810431f 	.word	0x0810431f
 8104248:	0810431f 	.word	0x0810431f
 810424c:	0810431f 	.word	0x0810431f
 8104250:	081042db 	.word	0x081042db
 8104254:	0810431f 	.word	0x0810431f
 8104258:	0810431f 	.word	0x0810431f
 810425c:	0810431f 	.word	0x0810431f
 8104260:	0810431f 	.word	0x0810431f
 8104264:	0810431f 	.word	0x0810431f
 8104268:	0810431f 	.word	0x0810431f
 810426c:	0810431f 	.word	0x0810431f
 8104270:	081042eb 	.word	0x081042eb
 8104274:	0810431f 	.word	0x0810431f
 8104278:	0810431f 	.word	0x0810431f
 810427c:	0810431f 	.word	0x0810431f
 8104280:	0810431f 	.word	0x0810431f
 8104284:	0810431f 	.word	0x0810431f
 8104288:	0810431f 	.word	0x0810431f
 810428c:	0810431f 	.word	0x0810431f
 8104290:	0810431f 	.word	0x0810431f
 8104294:	0810431f 	.word	0x0810431f
 8104298:	0810431f 	.word	0x0810431f
 810429c:	0810431f 	.word	0x0810431f
 81042a0:	0810431f 	.word	0x0810431f
 81042a4:	0810431f 	.word	0x0810431f
 81042a8:	0810431f 	.word	0x0810431f
 81042ac:	0810431f 	.word	0x0810431f
 81042b0:	08104311 	.word	0x08104311
 81042b4:	2b40      	cmp	r3, #64	@ 0x40
 81042b6:	d02e      	beq.n	8104316 <UART_SetConfig+0x8aa>
 81042b8:	e031      	b.n	810431e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81042ba:	f7fd fbe5 	bl	8101a88 <HAL_RCC_GetPCLK1Freq>
 81042be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81042c0:	e033      	b.n	810432a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81042c2:	f7fd fbf7 	bl	8101ab4 <HAL_RCC_GetPCLK2Freq>
 81042c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81042c8:	e02f      	b.n	810432a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81042ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81042ce:	4618      	mov	r0, r3
 81042d0:	f7fe fe26 	bl	8102f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81042d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81042d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81042d8:	e027      	b.n	810432a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81042da:	f107 0318 	add.w	r3, r7, #24
 81042de:	4618      	mov	r0, r3
 81042e0:	f7fe ff72 	bl	81031c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81042e4:	69fb      	ldr	r3, [r7, #28]
 81042e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81042e8:	e01f      	b.n	810432a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81042ea:	4b2d      	ldr	r3, [pc, #180]	@ (81043a0 <UART_SetConfig+0x934>)
 81042ec:	681b      	ldr	r3, [r3, #0]
 81042ee:	f003 0320 	and.w	r3, r3, #32
 81042f2:	2b00      	cmp	r3, #0
 81042f4:	d009      	beq.n	810430a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81042f6:	4b2a      	ldr	r3, [pc, #168]	@ (81043a0 <UART_SetConfig+0x934>)
 81042f8:	681b      	ldr	r3, [r3, #0]
 81042fa:	08db      	lsrs	r3, r3, #3
 81042fc:	f003 0303 	and.w	r3, r3, #3
 8104300:	4a24      	ldr	r2, [pc, #144]	@ (8104394 <UART_SetConfig+0x928>)
 8104302:	fa22 f303 	lsr.w	r3, r2, r3
 8104306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104308:	e00f      	b.n	810432a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810430a:	4b22      	ldr	r3, [pc, #136]	@ (8104394 <UART_SetConfig+0x928>)
 810430c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810430e:	e00c      	b.n	810432a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8104310:	4b21      	ldr	r3, [pc, #132]	@ (8104398 <UART_SetConfig+0x92c>)
 8104312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104314:	e009      	b.n	810432a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8104316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810431a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810431c:	e005      	b.n	810432a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810431e:	2300      	movs	r3, #0
 8104320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8104322:	2301      	movs	r3, #1
 8104324:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8104328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810432a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810432c:	2b00      	cmp	r3, #0
 810432e:	f000 80e7 	beq.w	8104500 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104332:	697b      	ldr	r3, [r7, #20]
 8104334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104336:	4a19      	ldr	r2, [pc, #100]	@ (810439c <UART_SetConfig+0x930>)
 8104338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810433c:	461a      	mov	r2, r3
 810433e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104340:	fbb3 f3f2 	udiv	r3, r3, r2
 8104344:	005a      	lsls	r2, r3, #1
 8104346:	697b      	ldr	r3, [r7, #20]
 8104348:	685b      	ldr	r3, [r3, #4]
 810434a:	085b      	lsrs	r3, r3, #1
 810434c:	441a      	add	r2, r3
 810434e:	697b      	ldr	r3, [r7, #20]
 8104350:	685b      	ldr	r3, [r3, #4]
 8104352:	fbb2 f3f3 	udiv	r3, r2, r3
 8104356:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8104358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810435a:	2b0f      	cmp	r3, #15
 810435c:	d916      	bls.n	810438c <UART_SetConfig+0x920>
 810435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104364:	d212      	bcs.n	810438c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8104366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104368:	b29b      	uxth	r3, r3
 810436a:	f023 030f 	bic.w	r3, r3, #15
 810436e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8104370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104372:	085b      	lsrs	r3, r3, #1
 8104374:	b29b      	uxth	r3, r3
 8104376:	f003 0307 	and.w	r3, r3, #7
 810437a:	b29a      	uxth	r2, r3
 810437c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810437e:	4313      	orrs	r3, r2
 8104380:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8104382:	697b      	ldr	r3, [r7, #20]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8104388:	60da      	str	r2, [r3, #12]
 810438a:	e0b9      	b.n	8104500 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810438c:	2301      	movs	r3, #1
 810438e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8104392:	e0b5      	b.n	8104500 <UART_SetConfig+0xa94>
 8104394:	03d09000 	.word	0x03d09000
 8104398:	003d0900 	.word	0x003d0900
 810439c:	08104a30 	.word	0x08104a30
 81043a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81043a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81043a8:	2b20      	cmp	r3, #32
 81043aa:	dc49      	bgt.n	8104440 <UART_SetConfig+0x9d4>
 81043ac:	2b00      	cmp	r3, #0
 81043ae:	db7c      	blt.n	81044aa <UART_SetConfig+0xa3e>
 81043b0:	2b20      	cmp	r3, #32
 81043b2:	d87a      	bhi.n	81044aa <UART_SetConfig+0xa3e>
 81043b4:	a201      	add	r2, pc, #4	@ (adr r2, 81043bc <UART_SetConfig+0x950>)
 81043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81043ba:	bf00      	nop
 81043bc:	08104447 	.word	0x08104447
 81043c0:	0810444f 	.word	0x0810444f
 81043c4:	081044ab 	.word	0x081044ab
 81043c8:	081044ab 	.word	0x081044ab
 81043cc:	08104457 	.word	0x08104457
 81043d0:	081044ab 	.word	0x081044ab
 81043d4:	081044ab 	.word	0x081044ab
 81043d8:	081044ab 	.word	0x081044ab
 81043dc:	08104467 	.word	0x08104467
 81043e0:	081044ab 	.word	0x081044ab
 81043e4:	081044ab 	.word	0x081044ab
 81043e8:	081044ab 	.word	0x081044ab
 81043ec:	081044ab 	.word	0x081044ab
 81043f0:	081044ab 	.word	0x081044ab
 81043f4:	081044ab 	.word	0x081044ab
 81043f8:	081044ab 	.word	0x081044ab
 81043fc:	08104477 	.word	0x08104477
 8104400:	081044ab 	.word	0x081044ab
 8104404:	081044ab 	.word	0x081044ab
 8104408:	081044ab 	.word	0x081044ab
 810440c:	081044ab 	.word	0x081044ab
 8104410:	081044ab 	.word	0x081044ab
 8104414:	081044ab 	.word	0x081044ab
 8104418:	081044ab 	.word	0x081044ab
 810441c:	081044ab 	.word	0x081044ab
 8104420:	081044ab 	.word	0x081044ab
 8104424:	081044ab 	.word	0x081044ab
 8104428:	081044ab 	.word	0x081044ab
 810442c:	081044ab 	.word	0x081044ab
 8104430:	081044ab 	.word	0x081044ab
 8104434:	081044ab 	.word	0x081044ab
 8104438:	081044ab 	.word	0x081044ab
 810443c:	0810449d 	.word	0x0810449d
 8104440:	2b40      	cmp	r3, #64	@ 0x40
 8104442:	d02e      	beq.n	81044a2 <UART_SetConfig+0xa36>
 8104444:	e031      	b.n	81044aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8104446:	f7fd fb1f 	bl	8101a88 <HAL_RCC_GetPCLK1Freq>
 810444a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810444c:	e033      	b.n	81044b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810444e:	f7fd fb31 	bl	8101ab4 <HAL_RCC_GetPCLK2Freq>
 8104452:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104454:	e02f      	b.n	81044b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810445a:	4618      	mov	r0, r3
 810445c:	f7fe fd60 	bl	8102f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104464:	e027      	b.n	81044b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104466:	f107 0318 	add.w	r3, r7, #24
 810446a:	4618      	mov	r0, r3
 810446c:	f7fe feac 	bl	81031c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104470:	69fb      	ldr	r3, [r7, #28]
 8104472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104474:	e01f      	b.n	81044b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104476:	4b2d      	ldr	r3, [pc, #180]	@ (810452c <UART_SetConfig+0xac0>)
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	f003 0320 	and.w	r3, r3, #32
 810447e:	2b00      	cmp	r3, #0
 8104480:	d009      	beq.n	8104496 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8104482:	4b2a      	ldr	r3, [pc, #168]	@ (810452c <UART_SetConfig+0xac0>)
 8104484:	681b      	ldr	r3, [r3, #0]
 8104486:	08db      	lsrs	r3, r3, #3
 8104488:	f003 0303 	and.w	r3, r3, #3
 810448c:	4a28      	ldr	r2, [pc, #160]	@ (8104530 <UART_SetConfig+0xac4>)
 810448e:	fa22 f303 	lsr.w	r3, r2, r3
 8104492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104494:	e00f      	b.n	81044b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8104496:	4b26      	ldr	r3, [pc, #152]	@ (8104530 <UART_SetConfig+0xac4>)
 8104498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810449a:	e00c      	b.n	81044b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810449c:	4b25      	ldr	r3, [pc, #148]	@ (8104534 <UART_SetConfig+0xac8>)
 810449e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81044a0:	e009      	b.n	81044b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81044a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81044a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81044a8:	e005      	b.n	81044b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81044aa:	2300      	movs	r3, #0
 81044ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81044ae:	2301      	movs	r3, #1
 81044b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81044b4:	bf00      	nop
    }

    if (pclk != 0U)
 81044b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81044b8:	2b00      	cmp	r3, #0
 81044ba:	d021      	beq.n	8104500 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81044bc:	697b      	ldr	r3, [r7, #20]
 81044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81044c0:	4a1d      	ldr	r2, [pc, #116]	@ (8104538 <UART_SetConfig+0xacc>)
 81044c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81044c6:	461a      	mov	r2, r3
 81044c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81044ca:	fbb3 f2f2 	udiv	r2, r3, r2
 81044ce:	697b      	ldr	r3, [r7, #20]
 81044d0:	685b      	ldr	r3, [r3, #4]
 81044d2:	085b      	lsrs	r3, r3, #1
 81044d4:	441a      	add	r2, r3
 81044d6:	697b      	ldr	r3, [r7, #20]
 81044d8:	685b      	ldr	r3, [r3, #4]
 81044da:	fbb2 f3f3 	udiv	r3, r2, r3
 81044de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81044e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044e2:	2b0f      	cmp	r3, #15
 81044e4:	d909      	bls.n	81044fa <UART_SetConfig+0xa8e>
 81044e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81044ec:	d205      	bcs.n	81044fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044f0:	b29a      	uxth	r2, r3
 81044f2:	697b      	ldr	r3, [r7, #20]
 81044f4:	681b      	ldr	r3, [r3, #0]
 81044f6:	60da      	str	r2, [r3, #12]
 81044f8:	e002      	b.n	8104500 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81044fa:	2301      	movs	r3, #1
 81044fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8104500:	697b      	ldr	r3, [r7, #20]
 8104502:	2201      	movs	r2, #1
 8104504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8104508:	697b      	ldr	r3, [r7, #20]
 810450a:	2201      	movs	r2, #1
 810450c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8104510:	697b      	ldr	r3, [r7, #20]
 8104512:	2200      	movs	r2, #0
 8104514:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8104516:	697b      	ldr	r3, [r7, #20]
 8104518:	2200      	movs	r2, #0
 810451a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810451c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8104520:	4618      	mov	r0, r3
 8104522:	3748      	adds	r7, #72	@ 0x48
 8104524:	46bd      	mov	sp, r7
 8104526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810452a:	bf00      	nop
 810452c:	58024400 	.word	0x58024400
 8104530:	03d09000 	.word	0x03d09000
 8104534:	003d0900 	.word	0x003d0900
 8104538:	08104a30 	.word	0x08104a30

0810453c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810453c:	b480      	push	{r7}
 810453e:	b083      	sub	sp, #12
 8104540:	af00      	add	r7, sp, #0
 8104542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104548:	f003 0308 	and.w	r3, r3, #8
 810454c:	2b00      	cmp	r3, #0
 810454e:	d00a      	beq.n	8104566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8104550:	687b      	ldr	r3, [r7, #4]
 8104552:	681b      	ldr	r3, [r3, #0]
 8104554:	685b      	ldr	r3, [r3, #4]
 8104556:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810455a:	687b      	ldr	r3, [r7, #4]
 810455c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	430a      	orrs	r2, r1
 8104564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8104566:	687b      	ldr	r3, [r7, #4]
 8104568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810456a:	f003 0301 	and.w	r3, r3, #1
 810456e:	2b00      	cmp	r3, #0
 8104570:	d00a      	beq.n	8104588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	685b      	ldr	r3, [r3, #4]
 8104578:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810457c:	687b      	ldr	r3, [r7, #4]
 810457e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	681b      	ldr	r3, [r3, #0]
 8104584:	430a      	orrs	r2, r1
 8104586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8104588:	687b      	ldr	r3, [r7, #4]
 810458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810458c:	f003 0302 	and.w	r3, r3, #2
 8104590:	2b00      	cmp	r3, #0
 8104592:	d00a      	beq.n	81045aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	685b      	ldr	r3, [r3, #4]
 810459a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81045a2:	687b      	ldr	r3, [r7, #4]
 81045a4:	681b      	ldr	r3, [r3, #0]
 81045a6:	430a      	orrs	r2, r1
 81045a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81045ae:	f003 0304 	and.w	r3, r3, #4
 81045b2:	2b00      	cmp	r3, #0
 81045b4:	d00a      	beq.n	81045cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81045b6:	687b      	ldr	r3, [r7, #4]
 81045b8:	681b      	ldr	r3, [r3, #0]
 81045ba:	685b      	ldr	r3, [r3, #4]
 81045bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 81045c0:	687b      	ldr	r3, [r7, #4]
 81045c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81045c4:	687b      	ldr	r3, [r7, #4]
 81045c6:	681b      	ldr	r3, [r3, #0]
 81045c8:	430a      	orrs	r2, r1
 81045ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81045cc:	687b      	ldr	r3, [r7, #4]
 81045ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81045d0:	f003 0310 	and.w	r3, r3, #16
 81045d4:	2b00      	cmp	r3, #0
 81045d6:	d00a      	beq.n	81045ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	689b      	ldr	r3, [r3, #8]
 81045de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 81045e2:	687b      	ldr	r3, [r7, #4]
 81045e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81045e6:	687b      	ldr	r3, [r7, #4]
 81045e8:	681b      	ldr	r3, [r3, #0]
 81045ea:	430a      	orrs	r2, r1
 81045ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81045f2:	f003 0320 	and.w	r3, r3, #32
 81045f6:	2b00      	cmp	r3, #0
 81045f8:	d00a      	beq.n	8104610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81045fa:	687b      	ldr	r3, [r7, #4]
 81045fc:	681b      	ldr	r3, [r3, #0]
 81045fe:	689b      	ldr	r3, [r3, #8]
 8104600:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8104608:	687b      	ldr	r3, [r7, #4]
 810460a:	681b      	ldr	r3, [r3, #0]
 810460c:	430a      	orrs	r2, r1
 810460e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104618:	2b00      	cmp	r3, #0
 810461a:	d01a      	beq.n	8104652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810461c:	687b      	ldr	r3, [r7, #4]
 810461e:	681b      	ldr	r3, [r3, #0]
 8104620:	685b      	ldr	r3, [r3, #4]
 8104622:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810462a:	687b      	ldr	r3, [r7, #4]
 810462c:	681b      	ldr	r3, [r3, #0]
 810462e:	430a      	orrs	r2, r1
 8104630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8104632:	687b      	ldr	r3, [r7, #4]
 8104634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810463a:	d10a      	bne.n	8104652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	681b      	ldr	r3, [r3, #0]
 8104640:	685b      	ldr	r3, [r3, #4]
 8104642:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	681b      	ldr	r3, [r3, #0]
 810464e:	430a      	orrs	r2, r1
 8104650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8104652:	687b      	ldr	r3, [r7, #4]
 8104654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810465a:	2b00      	cmp	r3, #0
 810465c:	d00a      	beq.n	8104674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	681b      	ldr	r3, [r3, #0]
 8104662:	685b      	ldr	r3, [r3, #4]
 8104664:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	681b      	ldr	r3, [r3, #0]
 8104670:	430a      	orrs	r2, r1
 8104672:	605a      	str	r2, [r3, #4]
  }
}
 8104674:	bf00      	nop
 8104676:	370c      	adds	r7, #12
 8104678:	46bd      	mov	sp, r7
 810467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810467e:	4770      	bx	lr

08104680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8104680:	b580      	push	{r7, lr}
 8104682:	b098      	sub	sp, #96	@ 0x60
 8104684:	af02      	add	r7, sp, #8
 8104686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	2200      	movs	r2, #0
 810468c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8104690:	f7fc fc36 	bl	8100f00 <HAL_GetTick>
 8104694:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8104696:	687b      	ldr	r3, [r7, #4]
 8104698:	681b      	ldr	r3, [r3, #0]
 810469a:	681b      	ldr	r3, [r3, #0]
 810469c:	f003 0308 	and.w	r3, r3, #8
 81046a0:	2b08      	cmp	r3, #8
 81046a2:	d12f      	bne.n	8104704 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81046a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81046a8:	9300      	str	r3, [sp, #0]
 81046aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81046ac:	2200      	movs	r2, #0
 81046ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 81046b2:	6878      	ldr	r0, [r7, #4]
 81046b4:	f000 f88e 	bl	81047d4 <UART_WaitOnFlagUntilTimeout>
 81046b8:	4603      	mov	r3, r0
 81046ba:	2b00      	cmp	r3, #0
 81046bc:	d022      	beq.n	8104704 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81046be:	687b      	ldr	r3, [r7, #4]
 81046c0:	681b      	ldr	r3, [r3, #0]
 81046c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81046c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81046c6:	e853 3f00 	ldrex	r3, [r3]
 81046ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 81046cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81046ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81046d2:	653b      	str	r3, [r7, #80]	@ 0x50
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	681b      	ldr	r3, [r3, #0]
 81046d8:	461a      	mov	r2, r3
 81046da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81046dc:	647b      	str	r3, [r7, #68]	@ 0x44
 81046de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81046e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 81046e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81046e4:	e841 2300 	strex	r3, r2, [r1]
 81046e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 81046ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81046ec:	2b00      	cmp	r3, #0
 81046ee:	d1e6      	bne.n	81046be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 81046f0:	687b      	ldr	r3, [r7, #4]
 81046f2:	2220      	movs	r2, #32
 81046f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 81046f8:	687b      	ldr	r3, [r7, #4]
 81046fa:	2200      	movs	r2, #0
 81046fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8104700:	2303      	movs	r3, #3
 8104702:	e063      	b.n	81047cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8104704:	687b      	ldr	r3, [r7, #4]
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	f003 0304 	and.w	r3, r3, #4
 810470e:	2b04      	cmp	r3, #4
 8104710:	d149      	bne.n	81047a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8104712:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8104716:	9300      	str	r3, [sp, #0]
 8104718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810471a:	2200      	movs	r2, #0
 810471c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8104720:	6878      	ldr	r0, [r7, #4]
 8104722:	f000 f857 	bl	81047d4 <UART_WaitOnFlagUntilTimeout>
 8104726:	4603      	mov	r3, r0
 8104728:	2b00      	cmp	r3, #0
 810472a:	d03c      	beq.n	81047a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810472c:	687b      	ldr	r3, [r7, #4]
 810472e:	681b      	ldr	r3, [r3, #0]
 8104730:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104734:	e853 3f00 	ldrex	r3, [r3]
 8104738:	623b      	str	r3, [r7, #32]
   return(result);
 810473a:	6a3b      	ldr	r3, [r7, #32]
 810473c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8104740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	461a      	mov	r2, r3
 8104748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810474a:	633b      	str	r3, [r7, #48]	@ 0x30
 810474c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810474e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8104750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8104752:	e841 2300 	strex	r3, r2, [r1]
 8104756:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8104758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810475a:	2b00      	cmp	r3, #0
 810475c:	d1e6      	bne.n	810472c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	681b      	ldr	r3, [r3, #0]
 8104762:	3308      	adds	r3, #8
 8104764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104766:	693b      	ldr	r3, [r7, #16]
 8104768:	e853 3f00 	ldrex	r3, [r3]
 810476c:	60fb      	str	r3, [r7, #12]
   return(result);
 810476e:	68fb      	ldr	r3, [r7, #12]
 8104770:	f023 0301 	bic.w	r3, r3, #1
 8104774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	681b      	ldr	r3, [r3, #0]
 810477a:	3308      	adds	r3, #8
 810477c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810477e:	61fa      	str	r2, [r7, #28]
 8104780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104782:	69b9      	ldr	r1, [r7, #24]
 8104784:	69fa      	ldr	r2, [r7, #28]
 8104786:	e841 2300 	strex	r3, r2, [r1]
 810478a:	617b      	str	r3, [r7, #20]
   return(result);
 810478c:	697b      	ldr	r3, [r7, #20]
 810478e:	2b00      	cmp	r3, #0
 8104790:	d1e5      	bne.n	810475e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	2220      	movs	r2, #32
 8104796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810479a:	687b      	ldr	r3, [r7, #4]
 810479c:	2200      	movs	r2, #0
 810479e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81047a2:	2303      	movs	r3, #3
 81047a4:	e012      	b.n	81047cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	2220      	movs	r2, #32
 81047aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	2220      	movs	r2, #32
 81047b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81047b6:	687b      	ldr	r3, [r7, #4]
 81047b8:	2200      	movs	r2, #0
 81047ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81047bc:	687b      	ldr	r3, [r7, #4]
 81047be:	2200      	movs	r2, #0
 81047c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	2200      	movs	r2, #0
 81047c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81047ca:	2300      	movs	r3, #0
}
 81047cc:	4618      	mov	r0, r3
 81047ce:	3758      	adds	r7, #88	@ 0x58
 81047d0:	46bd      	mov	sp, r7
 81047d2:	bd80      	pop	{r7, pc}

081047d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81047d4:	b580      	push	{r7, lr}
 81047d6:	b084      	sub	sp, #16
 81047d8:	af00      	add	r7, sp, #0
 81047da:	60f8      	str	r0, [r7, #12]
 81047dc:	60b9      	str	r1, [r7, #8]
 81047de:	603b      	str	r3, [r7, #0]
 81047e0:	4613      	mov	r3, r2
 81047e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81047e4:	e04f      	b.n	8104886 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81047e6:	69bb      	ldr	r3, [r7, #24]
 81047e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81047ec:	d04b      	beq.n	8104886 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81047ee:	f7fc fb87 	bl	8100f00 <HAL_GetTick>
 81047f2:	4602      	mov	r2, r0
 81047f4:	683b      	ldr	r3, [r7, #0]
 81047f6:	1ad3      	subs	r3, r2, r3
 81047f8:	69ba      	ldr	r2, [r7, #24]
 81047fa:	429a      	cmp	r2, r3
 81047fc:	d302      	bcc.n	8104804 <UART_WaitOnFlagUntilTimeout+0x30>
 81047fe:	69bb      	ldr	r3, [r7, #24]
 8104800:	2b00      	cmp	r3, #0
 8104802:	d101      	bne.n	8104808 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8104804:	2303      	movs	r3, #3
 8104806:	e04e      	b.n	81048a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8104808:	68fb      	ldr	r3, [r7, #12]
 810480a:	681b      	ldr	r3, [r3, #0]
 810480c:	681b      	ldr	r3, [r3, #0]
 810480e:	f003 0304 	and.w	r3, r3, #4
 8104812:	2b00      	cmp	r3, #0
 8104814:	d037      	beq.n	8104886 <UART_WaitOnFlagUntilTimeout+0xb2>
 8104816:	68bb      	ldr	r3, [r7, #8]
 8104818:	2b80      	cmp	r3, #128	@ 0x80
 810481a:	d034      	beq.n	8104886 <UART_WaitOnFlagUntilTimeout+0xb2>
 810481c:	68bb      	ldr	r3, [r7, #8]
 810481e:	2b40      	cmp	r3, #64	@ 0x40
 8104820:	d031      	beq.n	8104886 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8104822:	68fb      	ldr	r3, [r7, #12]
 8104824:	681b      	ldr	r3, [r3, #0]
 8104826:	69db      	ldr	r3, [r3, #28]
 8104828:	f003 0308 	and.w	r3, r3, #8
 810482c:	2b08      	cmp	r3, #8
 810482e:	d110      	bne.n	8104852 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8104830:	68fb      	ldr	r3, [r7, #12]
 8104832:	681b      	ldr	r3, [r3, #0]
 8104834:	2208      	movs	r2, #8
 8104836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8104838:	68f8      	ldr	r0, [r7, #12]
 810483a:	f000 f838 	bl	81048ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810483e:	68fb      	ldr	r3, [r7, #12]
 8104840:	2208      	movs	r2, #8
 8104842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8104846:	68fb      	ldr	r3, [r7, #12]
 8104848:	2200      	movs	r2, #0
 810484a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810484e:	2301      	movs	r3, #1
 8104850:	e029      	b.n	81048a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8104852:	68fb      	ldr	r3, [r7, #12]
 8104854:	681b      	ldr	r3, [r3, #0]
 8104856:	69db      	ldr	r3, [r3, #28]
 8104858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810485c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104860:	d111      	bne.n	8104886 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8104862:	68fb      	ldr	r3, [r7, #12]
 8104864:	681b      	ldr	r3, [r3, #0]
 8104866:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810486a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810486c:	68f8      	ldr	r0, [r7, #12]
 810486e:	f000 f81e 	bl	81048ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8104872:	68fb      	ldr	r3, [r7, #12]
 8104874:	2220      	movs	r2, #32
 8104876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810487a:	68fb      	ldr	r3, [r7, #12]
 810487c:	2200      	movs	r2, #0
 810487e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8104882:	2303      	movs	r3, #3
 8104884:	e00f      	b.n	81048a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8104886:	68fb      	ldr	r3, [r7, #12]
 8104888:	681b      	ldr	r3, [r3, #0]
 810488a:	69da      	ldr	r2, [r3, #28]
 810488c:	68bb      	ldr	r3, [r7, #8]
 810488e:	4013      	ands	r3, r2
 8104890:	68ba      	ldr	r2, [r7, #8]
 8104892:	429a      	cmp	r2, r3
 8104894:	bf0c      	ite	eq
 8104896:	2301      	moveq	r3, #1
 8104898:	2300      	movne	r3, #0
 810489a:	b2db      	uxtb	r3, r3
 810489c:	461a      	mov	r2, r3
 810489e:	79fb      	ldrb	r3, [r7, #7]
 81048a0:	429a      	cmp	r2, r3
 81048a2:	d0a0      	beq.n	81047e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81048a4:	2300      	movs	r3, #0
}
 81048a6:	4618      	mov	r0, r3
 81048a8:	3710      	adds	r7, #16
 81048aa:	46bd      	mov	sp, r7
 81048ac:	bd80      	pop	{r7, pc}

081048ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81048ae:	b480      	push	{r7}
 81048b0:	b095      	sub	sp, #84	@ 0x54
 81048b2:	af00      	add	r7, sp, #0
 81048b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81048b6:	687b      	ldr	r3, [r7, #4]
 81048b8:	681b      	ldr	r3, [r3, #0]
 81048ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81048bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81048be:	e853 3f00 	ldrex	r3, [r3]
 81048c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81048c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81048ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81048cc:	687b      	ldr	r3, [r7, #4]
 81048ce:	681b      	ldr	r3, [r3, #0]
 81048d0:	461a      	mov	r2, r3
 81048d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81048d4:	643b      	str	r3, [r7, #64]	@ 0x40
 81048d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81048d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81048da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81048dc:	e841 2300 	strex	r3, r2, [r1]
 81048e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 81048e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048e4:	2b00      	cmp	r3, #0
 81048e6:	d1e6      	bne.n	81048b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81048e8:	687b      	ldr	r3, [r7, #4]
 81048ea:	681b      	ldr	r3, [r3, #0]
 81048ec:	3308      	adds	r3, #8
 81048ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81048f0:	6a3b      	ldr	r3, [r7, #32]
 81048f2:	e853 3f00 	ldrex	r3, [r3]
 81048f6:	61fb      	str	r3, [r7, #28]
   return(result);
 81048f8:	69fb      	ldr	r3, [r7, #28]
 81048fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81048fe:	f023 0301 	bic.w	r3, r3, #1
 8104902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	681b      	ldr	r3, [r3, #0]
 8104908:	3308      	adds	r3, #8
 810490a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810490c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810490e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8104912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104914:	e841 2300 	strex	r3, r2, [r1]
 8104918:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810491c:	2b00      	cmp	r3, #0
 810491e:	d1e3      	bne.n	81048e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8104920:	687b      	ldr	r3, [r7, #4]
 8104922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104924:	2b01      	cmp	r3, #1
 8104926:	d118      	bne.n	810495a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104928:	687b      	ldr	r3, [r7, #4]
 810492a:	681b      	ldr	r3, [r3, #0]
 810492c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810492e:	68fb      	ldr	r3, [r7, #12]
 8104930:	e853 3f00 	ldrex	r3, [r3]
 8104934:	60bb      	str	r3, [r7, #8]
   return(result);
 8104936:	68bb      	ldr	r3, [r7, #8]
 8104938:	f023 0310 	bic.w	r3, r3, #16
 810493c:	647b      	str	r3, [r7, #68]	@ 0x44
 810493e:	687b      	ldr	r3, [r7, #4]
 8104940:	681b      	ldr	r3, [r3, #0]
 8104942:	461a      	mov	r2, r3
 8104944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104946:	61bb      	str	r3, [r7, #24]
 8104948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810494a:	6979      	ldr	r1, [r7, #20]
 810494c:	69ba      	ldr	r2, [r7, #24]
 810494e:	e841 2300 	strex	r3, r2, [r1]
 8104952:	613b      	str	r3, [r7, #16]
   return(result);
 8104954:	693b      	ldr	r3, [r7, #16]
 8104956:	2b00      	cmp	r3, #0
 8104958:	d1e6      	bne.n	8104928 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810495a:	687b      	ldr	r3, [r7, #4]
 810495c:	2220      	movs	r2, #32
 810495e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	2200      	movs	r2, #0
 8104966:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8104968:	687b      	ldr	r3, [r7, #4]
 810496a:	2200      	movs	r2, #0
 810496c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810496e:	bf00      	nop
 8104970:	3754      	adds	r7, #84	@ 0x54
 8104972:	46bd      	mov	sp, r7
 8104974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104978:	4770      	bx	lr
	...

0810497c <read_data_from_m7>:
#include <stdint.h>
#include "stm32h7xx_hal.h"
#include "Shared_memory.h"

void read_data_from_m7(void)
{
 810497c:	b580      	push	{r7, lr}
 810497e:	b082      	sub	sp, #8
 8104980:	af00      	add	r7, sp, #0
    // Wait for HSEM notification
    while (HAL_HSEM_IsSemTaken(0) == 1); // Busy-wait (or use interrupt)
 8104982:	bf00      	nop
 8104984:	2000      	movs	r0, #0
 8104986:	f7fc fe23 	bl	81015d0 <HAL_HSEM_IsSemTaken>
 810498a:	4603      	mov	r3, r0
 810498c:	2b01      	cmp	r3, #1
 810498e:	d0f9      	beq.n	8104984 <read_data_from_m7+0x8>

    uint32_t data = shared_data;  // Read data from shared memory
 8104990:	4b03      	ldr	r3, [pc, #12]	@ (81049a0 <read_data_from_m7+0x24>)
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	607b      	str	r3, [r7, #4]
}
 8104996:	bf00      	nop
 8104998:	3708      	adds	r7, #8
 810499a:	46bd      	mov	sp, r7
 810499c:	bd80      	pop	{r7, pc}
 810499e:	bf00      	nop
 81049a0:	38000000 	.word	0x38000000

081049a4 <memset>:
 81049a4:	4402      	add	r2, r0
 81049a6:	4603      	mov	r3, r0
 81049a8:	4293      	cmp	r3, r2
 81049aa:	d100      	bne.n	81049ae <memset+0xa>
 81049ac:	4770      	bx	lr
 81049ae:	f803 1b01 	strb.w	r1, [r3], #1
 81049b2:	e7f9      	b.n	81049a8 <memset+0x4>

081049b4 <__libc_init_array>:
 81049b4:	b570      	push	{r4, r5, r6, lr}
 81049b6:	4d0d      	ldr	r5, [pc, #52]	@ (81049ec <__libc_init_array+0x38>)
 81049b8:	4c0d      	ldr	r4, [pc, #52]	@ (81049f0 <__libc_init_array+0x3c>)
 81049ba:	1b64      	subs	r4, r4, r5
 81049bc:	10a4      	asrs	r4, r4, #2
 81049be:	2600      	movs	r6, #0
 81049c0:	42a6      	cmp	r6, r4
 81049c2:	d109      	bne.n	81049d8 <__libc_init_array+0x24>
 81049c4:	4d0b      	ldr	r5, [pc, #44]	@ (81049f4 <__libc_init_array+0x40>)
 81049c6:	4c0c      	ldr	r4, [pc, #48]	@ (81049f8 <__libc_init_array+0x44>)
 81049c8:	f000 f818 	bl	81049fc <_init>
 81049cc:	1b64      	subs	r4, r4, r5
 81049ce:	10a4      	asrs	r4, r4, #2
 81049d0:	2600      	movs	r6, #0
 81049d2:	42a6      	cmp	r6, r4
 81049d4:	d105      	bne.n	81049e2 <__libc_init_array+0x2e>
 81049d6:	bd70      	pop	{r4, r5, r6, pc}
 81049d8:	f855 3b04 	ldr.w	r3, [r5], #4
 81049dc:	4798      	blx	r3
 81049de:	3601      	adds	r6, #1
 81049e0:	e7ee      	b.n	81049c0 <__libc_init_array+0xc>
 81049e2:	f855 3b04 	ldr.w	r3, [r5], #4
 81049e6:	4798      	blx	r3
 81049e8:	3601      	adds	r6, #1
 81049ea:	e7f2      	b.n	81049d2 <__libc_init_array+0x1e>
 81049ec:	08104a50 	.word	0x08104a50
 81049f0:	08104a50 	.word	0x08104a50
 81049f4:	08104a50 	.word	0x08104a50
 81049f8:	08104a54 	.word	0x08104a54

081049fc <_init>:
 81049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81049fe:	bf00      	nop
 8104a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104a02:	bc08      	pop	{r3}
 8104a04:	469e      	mov	lr, r3
 8104a06:	4770      	bx	lr

08104a08 <_fini>:
 8104a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104a0a:	bf00      	nop
 8104a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104a0e:	bc08      	pop	{r3}
 8104a10:	469e      	mov	lr, r3
 8104a12:	4770      	bx	lr
